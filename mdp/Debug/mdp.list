
mdp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007728  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bd0  080078b8  080078b8  000178b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008488  08008488  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008488  08008488  00018488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008490  08008490  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008490  08008490  00018490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008494  08008494  00018494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008498  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004e7c  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004ef0  20004ef0  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018890  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000340c  00000000  00000000  00038934  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001560  00000000  00000000  0003bd40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001428  00000000  00000000  0003d2a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000036e1  00000000  00000000  0003e6c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016fc6  00000000  00000000  00041da9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d51e1  00000000  00000000  00058d6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012df50  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005dd8  00000000  00000000  0012dfa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080078a0 	.word	0x080078a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080078a0 	.word	0x080078a0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000578:	f000 fd26 	bl	8000fc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057c:	f000 f850 	bl	8000620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000580:	f000 f9c8 	bl	8000914 <MX_GPIO_Init>
  MX_TIM8_Init();
 8000584:	f000 f8fe 	bl	8000784 <MX_TIM8_Init>
  MX_TIM2_Init();
 8000588:	f000 f8a8 	bl	80006dc <MX_TIM2_Init>
  MX_USART3_UART_Init();
 800058c:	f000 f998 	bl	80008c0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 8000590:	f006 fc5a 	bl	8006e48 <OLED_Init>
  // Receive an amount of data from rpi
  HAL_UART_Receive_IT(&huart3,(uint8_t *)aRxBuffer, 10);
 8000594:	220a      	movs	r2, #10
 8000596:	4914      	ldr	r1, [pc, #80]	; (80005e8 <main+0x74>)
 8000598:	4814      	ldr	r0, [pc, #80]	; (80005ec <main+0x78>)
 800059a:	f002 fdf8 	bl	800318e <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800059e:	f003 fd5f 	bl	8004060 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005a2:	4a13      	ldr	r2, [pc, #76]	; (80005f0 <main+0x7c>)
 80005a4:	2100      	movs	r1, #0
 80005a6:	4813      	ldr	r0, [pc, #76]	; (80005f4 <main+0x80>)
 80005a8:	f003 fda4 	bl	80040f4 <osThreadNew>
 80005ac:	4603      	mov	r3, r0
 80005ae:	4a12      	ldr	r2, [pc, #72]	; (80005f8 <main+0x84>)
 80005b0:	6013      	str	r3, [r2, #0]

  /* creation of showTask */
  showTaskHandle = osThreadNew(show, NULL, &showTask_attributes);
 80005b2:	4a12      	ldr	r2, [pc, #72]	; (80005fc <main+0x88>)
 80005b4:	2100      	movs	r1, #0
 80005b6:	4812      	ldr	r0, [pc, #72]	; (8000600 <main+0x8c>)
 80005b8:	f003 fd9c 	bl	80040f4 <osThreadNew>
 80005bc:	4603      	mov	r3, r0
 80005be:	4a11      	ldr	r2, [pc, #68]	; (8000604 <main+0x90>)
 80005c0:	6013      	str	r3, [r2, #0]

  /* creation of motorTask */
  motorTaskHandle = osThreadNew(motor, NULL, &motorTask_attributes);
 80005c2:	4a11      	ldr	r2, [pc, #68]	; (8000608 <main+0x94>)
 80005c4:	2100      	movs	r1, #0
 80005c6:	4811      	ldr	r0, [pc, #68]	; (800060c <main+0x98>)
 80005c8:	f003 fd94 	bl	80040f4 <osThreadNew>
 80005cc:	4603      	mov	r3, r0
 80005ce:	4a10      	ldr	r2, [pc, #64]	; (8000610 <main+0x9c>)
 80005d0:	6013      	str	r3, [r2, #0]

  /* creation of encoderTask */
  encoderTaskHandle = osThreadNew(encoder, NULL, &encoderTask_attributes);
 80005d2:	4a10      	ldr	r2, [pc, #64]	; (8000614 <main+0xa0>)
 80005d4:	2100      	movs	r1, #0
 80005d6:	4810      	ldr	r0, [pc, #64]	; (8000618 <main+0xa4>)
 80005d8:	f003 fd8c 	bl	80040f4 <osThreadNew>
 80005dc:	4603      	mov	r3, r0
 80005de:	4a0f      	ldr	r2, [pc, #60]	; (800061c <main+0xa8>)
 80005e0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005e2:	f003 fd61 	bl	80040a8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005e6:	e7fe      	b.n	80005e6 <main+0x72>
 80005e8:	20000174 	.word	0x20000174
 80005ec:	20000120 	.word	0x20000120
 80005f0:	08007948 	.word	0x08007948
 80005f4:	08000a1d 	.word	0x08000a1d
 80005f8:	20000164 	.word	0x20000164
 80005fc:	0800796c 	.word	0x0800796c
 8000600:	08000a3d 	.word	0x08000a3d
 8000604:	20000168 	.word	0x20000168
 8000608:	08007990 	.word	0x08007990
 800060c:	08000a7d 	.word	0x08000a7d
 8000610:	2000016c 	.word	0x2000016c
 8000614:	080079b4 	.word	0x080079b4
 8000618:	08000b41 	.word	0x08000b41
 800061c:	20000170 	.word	0x20000170

08000620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b094      	sub	sp, #80	; 0x50
 8000624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	f107 0320 	add.w	r3, r7, #32
 800062a:	2230      	movs	r2, #48	; 0x30
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f006 fcce 	bl	8006fd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000634:	f107 030c 	add.w	r3, r7, #12
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000644:	2300      	movs	r3, #0
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	4b22      	ldr	r3, [pc, #136]	; (80006d4 <SystemClock_Config+0xb4>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064c:	4a21      	ldr	r2, [pc, #132]	; (80006d4 <SystemClock_Config+0xb4>)
 800064e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000652:	6413      	str	r3, [r2, #64]	; 0x40
 8000654:	4b1f      	ldr	r3, [pc, #124]	; (80006d4 <SystemClock_Config+0xb4>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800065c:	60bb      	str	r3, [r7, #8]
 800065e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000660:	2300      	movs	r3, #0
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	4b1c      	ldr	r3, [pc, #112]	; (80006d8 <SystemClock_Config+0xb8>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a1b      	ldr	r2, [pc, #108]	; (80006d8 <SystemClock_Config+0xb8>)
 800066a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800066e:	6013      	str	r3, [r2, #0]
 8000670:	4b19      	ldr	r3, [pc, #100]	; (80006d8 <SystemClock_Config+0xb8>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800067c:	2302      	movs	r3, #2
 800067e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000680:	2301      	movs	r3, #1
 8000682:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000684:	2310      	movs	r3, #16
 8000686:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000688:	2300      	movs	r3, #0
 800068a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068c:	f107 0320 	add.w	r3, r7, #32
 8000690:	4618      	mov	r0, r3
 8000692:	f001 f8cb 	bl	800182c <HAL_RCC_OscConfig>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800069c:	f000 fac4 	bl	8000c28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a0:	230f      	movs	r3, #15
 80006a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006a4:	2300      	movs	r3, #0
 80006a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006b4:	f107 030c 	add.w	r3, r7, #12
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f001 fb2e 	bl	8001d1c <HAL_RCC_ClockConfig>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80006c6:	f000 faaf 	bl	8000c28 <Error_Handler>
  }
}
 80006ca:	bf00      	nop
 80006cc:	3750      	adds	r7, #80	; 0x50
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40023800 	.word	0x40023800
 80006d8:	40007000 	.word	0x40007000

080006dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b08c      	sub	sp, #48	; 0x30
 80006e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80006e2:	f107 030c 	add.w	r3, r7, #12
 80006e6:	2224      	movs	r2, #36	; 0x24
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f006 fc70 	bl	8006fd0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006f0:	1d3b      	adds	r3, r7, #4
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006f8:	4b21      	ldr	r3, [pc, #132]	; (8000780 <MX_TIM2_Init+0xa4>)
 80006fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000700:	4b1f      	ldr	r3, [pc, #124]	; (8000780 <MX_TIM2_Init+0xa4>)
 8000702:	2200      	movs	r2, #0
 8000704:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000706:	4b1e      	ldr	r3, [pc, #120]	; (8000780 <MX_TIM2_Init+0xa4>)
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800070c:	4b1c      	ldr	r3, [pc, #112]	; (8000780 <MX_TIM2_Init+0xa4>)
 800070e:	f04f 32ff 	mov.w	r2, #4294967295
 8000712:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000714:	4b1a      	ldr	r3, [pc, #104]	; (8000780 <MX_TIM2_Init+0xa4>)
 8000716:	2200      	movs	r2, #0
 8000718:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800071a:	4b19      	ldr	r3, [pc, #100]	; (8000780 <MX_TIM2_Init+0xa4>)
 800071c:	2200      	movs	r2, #0
 800071e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000720:	2303      	movs	r3, #3
 8000722:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000724:	2300      	movs	r3, #0
 8000726:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000728:	2301      	movs	r3, #1
 800072a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800072c:	2300      	movs	r3, #0
 800072e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000730:	2300      	movs	r3, #0
 8000732:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000734:	2300      	movs	r3, #0
 8000736:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000738:	2301      	movs	r3, #1
 800073a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800073c:	2300      	movs	r3, #0
 800073e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8000740:	230a      	movs	r3, #10
 8000742:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000744:	f107 030c 	add.w	r3, r7, #12
 8000748:	4619      	mov	r1, r3
 800074a:	480d      	ldr	r0, [pc, #52]	; (8000780 <MX_TIM2_Init+0xa4>)
 800074c:	f001 fe36 	bl	80023bc <HAL_TIM_Encoder_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000756:	f000 fa67 	bl	8000c28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800075a:	2300      	movs	r3, #0
 800075c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800075e:	2300      	movs	r3, #0
 8000760:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	4619      	mov	r1, r3
 8000766:	4806      	ldr	r0, [pc, #24]	; (8000780 <MX_TIM2_Init+0xa4>)
 8000768:	f002 fbf6 	bl	8002f58 <HAL_TIMEx_MasterConfigSynchronization>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000772:	f000 fa59 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000776:	bf00      	nop
 8000778:	3730      	adds	r7, #48	; 0x30
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20000090 	.word	0x20000090

08000784 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b096      	sub	sp, #88	; 0x58
 8000788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800078a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000798:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
 80007ae:	60da      	str	r2, [r3, #12]
 80007b0:	611a      	str	r2, [r3, #16]
 80007b2:	615a      	str	r2, [r3, #20]
 80007b4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007b6:	1d3b      	adds	r3, r7, #4
 80007b8:	2220      	movs	r2, #32
 80007ba:	2100      	movs	r1, #0
 80007bc:	4618      	mov	r0, r3
 80007be:	f006 fc07 	bl	8006fd0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80007c2:	4b3d      	ldr	r3, [pc, #244]	; (80008b8 <MX_TIM8_Init+0x134>)
 80007c4:	4a3d      	ldr	r2, [pc, #244]	; (80008bc <MX_TIM8_Init+0x138>)
 80007c6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80007c8:	4b3b      	ldr	r3, [pc, #236]	; (80008b8 <MX_TIM8_Init+0x134>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ce:	4b3a      	ldr	r3, [pc, #232]	; (80008b8 <MX_TIM8_Init+0x134>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 80007d4:	4b38      	ldr	r3, [pc, #224]	; (80008b8 <MX_TIM8_Init+0x134>)
 80007d6:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80007da:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007dc:	4b36      	ldr	r3, [pc, #216]	; (80008b8 <MX_TIM8_Init+0x134>)
 80007de:	2200      	movs	r2, #0
 80007e0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80007e2:	4b35      	ldr	r3, [pc, #212]	; (80008b8 <MX_TIM8_Init+0x134>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007e8:	4b33      	ldr	r3, [pc, #204]	; (80008b8 <MX_TIM8_Init+0x134>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80007ee:	4832      	ldr	r0, [pc, #200]	; (80008b8 <MX_TIM8_Init+0x134>)
 80007f0:	f001 fc74 	bl	80020dc <HAL_TIM_Base_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80007fa:	f000 fa15 	bl	8000c28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000802:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000804:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000808:	4619      	mov	r1, r3
 800080a:	482b      	ldr	r0, [pc, #172]	; (80008b8 <MX_TIM8_Init+0x134>)
 800080c:	f001 ffcc 	bl	80027a8 <HAL_TIM_ConfigClockSource>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8000816:	f000 fa07 	bl	8000c28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800081a:	4827      	ldr	r0, [pc, #156]	; (80008b8 <MX_TIM8_Init+0x134>)
 800081c:	f001 fcad 	bl	800217a <HAL_TIM_PWM_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8000826:	f000 f9ff 	bl	8000c28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800082a:	2300      	movs	r3, #0
 800082c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800082e:	2300      	movs	r3, #0
 8000830:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000832:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000836:	4619      	mov	r1, r3
 8000838:	481f      	ldr	r0, [pc, #124]	; (80008b8 <MX_TIM8_Init+0x134>)
 800083a:	f002 fb8d 	bl	8002f58 <HAL_TIMEx_MasterConfigSynchronization>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000844:	f000 f9f0 	bl	8000c28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000848:	2360      	movs	r3, #96	; 0x60
 800084a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800084c:	2300      	movs	r3, #0
 800084e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000850:	2300      	movs	r3, #0
 8000852:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000854:	2300      	movs	r3, #0
 8000856:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000858:	2300      	movs	r3, #0
 800085a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800085c:	2300      	movs	r3, #0
 800085e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000860:	2300      	movs	r3, #0
 8000862:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000864:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000868:	2200      	movs	r2, #0
 800086a:	4619      	mov	r1, r3
 800086c:	4812      	ldr	r0, [pc, #72]	; (80008b8 <MX_TIM8_Init+0x134>)
 800086e:	f001 fed9 	bl	8002624 <HAL_TIM_PWM_ConfigChannel>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8000878:	f000 f9d6 	bl	8000c28 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800087c:	2300      	movs	r3, #0
 800087e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000880:	2300      	movs	r3, #0
 8000882:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000884:	2300      	movs	r3, #0
 8000886:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000888:	2300      	movs	r3, #0
 800088a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800088c:	2300      	movs	r3, #0
 800088e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000890:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000894:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000896:	2300      	movs	r3, #0
 8000898:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800089a:	1d3b      	adds	r3, r7, #4
 800089c:	4619      	mov	r1, r3
 800089e:	4806      	ldr	r0, [pc, #24]	; (80008b8 <MX_TIM8_Init+0x134>)
 80008a0:	f002 fbd6 	bl	8003050 <HAL_TIMEx_ConfigBreakDeadTime>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 80008aa:	f000 f9bd 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80008ae:	bf00      	nop
 80008b0:	3758      	adds	r7, #88	; 0x58
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	200000d8 	.word	0x200000d8
 80008bc:	40010400 	.word	0x40010400

080008c0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008c4:	4b11      	ldr	r3, [pc, #68]	; (800090c <MX_USART3_UART_Init+0x4c>)
 80008c6:	4a12      	ldr	r2, [pc, #72]	; (8000910 <MX_USART3_UART_Init+0x50>)
 80008c8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008ca:	4b10      	ldr	r3, [pc, #64]	; (800090c <MX_USART3_UART_Init+0x4c>)
 80008cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008d0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008d2:	4b0e      	ldr	r3, [pc, #56]	; (800090c <MX_USART3_UART_Init+0x4c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008d8:	4b0c      	ldr	r3, [pc, #48]	; (800090c <MX_USART3_UART_Init+0x4c>)
 80008da:	2200      	movs	r2, #0
 80008dc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008de:	4b0b      	ldr	r3, [pc, #44]	; (800090c <MX_USART3_UART_Init+0x4c>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008e4:	4b09      	ldr	r3, [pc, #36]	; (800090c <MX_USART3_UART_Init+0x4c>)
 80008e6:	220c      	movs	r2, #12
 80008e8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ea:	4b08      	ldr	r3, [pc, #32]	; (800090c <MX_USART3_UART_Init+0x4c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f0:	4b06      	ldr	r3, [pc, #24]	; (800090c <MX_USART3_UART_Init+0x4c>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008f6:	4805      	ldr	r0, [pc, #20]	; (800090c <MX_USART3_UART_Init+0x4c>)
 80008f8:	f002 fbfc 	bl	80030f4 <HAL_UART_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000902:	f000 f991 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	20000120 	.word	0x20000120
 8000910:	40004800 	.word	0x40004800

08000914 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b08a      	sub	sp, #40	; 0x28
 8000918:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091a:	f107 0314 	add.w	r3, r7, #20
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]
 8000924:	609a      	str	r2, [r3, #8]
 8000926:	60da      	str	r2, [r3, #12]
 8000928:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	613b      	str	r3, [r7, #16]
 800092e:	4b38      	ldr	r3, [pc, #224]	; (8000a10 <MX_GPIO_Init+0xfc>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	4a37      	ldr	r2, [pc, #220]	; (8000a10 <MX_GPIO_Init+0xfc>)
 8000934:	f043 0310 	orr.w	r3, r3, #16
 8000938:	6313      	str	r3, [r2, #48]	; 0x30
 800093a:	4b35      	ldr	r3, [pc, #212]	; (8000a10 <MX_GPIO_Init+0xfc>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	f003 0310 	and.w	r3, r3, #16
 8000942:	613b      	str	r3, [r7, #16]
 8000944:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	60fb      	str	r3, [r7, #12]
 800094a:	4b31      	ldr	r3, [pc, #196]	; (8000a10 <MX_GPIO_Init+0xfc>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	4a30      	ldr	r2, [pc, #192]	; (8000a10 <MX_GPIO_Init+0xfc>)
 8000950:	f043 0301 	orr.w	r3, r3, #1
 8000954:	6313      	str	r3, [r2, #48]	; 0x30
 8000956:	4b2e      	ldr	r3, [pc, #184]	; (8000a10 <MX_GPIO_Init+0xfc>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	f003 0301 	and.w	r3, r3, #1
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	60bb      	str	r3, [r7, #8]
 8000966:	4b2a      	ldr	r3, [pc, #168]	; (8000a10 <MX_GPIO_Init+0xfc>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	4a29      	ldr	r2, [pc, #164]	; (8000a10 <MX_GPIO_Init+0xfc>)
 800096c:	f043 0304 	orr.w	r3, r3, #4
 8000970:	6313      	str	r3, [r2, #48]	; 0x30
 8000972:	4b27      	ldr	r3, [pc, #156]	; (8000a10 <MX_GPIO_Init+0xfc>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	f003 0304 	and.w	r3, r3, #4
 800097a:	60bb      	str	r3, [r7, #8]
 800097c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	607b      	str	r3, [r7, #4]
 8000982:	4b23      	ldr	r3, [pc, #140]	; (8000a10 <MX_GPIO_Init+0xfc>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a22      	ldr	r2, [pc, #136]	; (8000a10 <MX_GPIO_Init+0xfc>)
 8000988:	f043 0302 	orr.w	r3, r3, #2
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
 800098e:	4b20      	ldr	r3, [pc, #128]	; (8000a10 <MX_GPIO_Init+0xfc>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	f003 0302 	and.w	r3, r3, #2
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 800099a:	2200      	movs	r2, #0
 800099c:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
 80009a0:	481c      	ldr	r0, [pc, #112]	; (8000a14 <MX_GPIO_Init+0x100>)
 80009a2:	f000 fee7 	bl	8001774 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN5_Pin, GPIO_PIN_RESET);
 80009a6:	2200      	movs	r2, #0
 80009a8:	213c      	movs	r1, #60	; 0x3c
 80009aa:	481b      	ldr	r0, [pc, #108]	; (8000a18 <MX_GPIO_Init+0x104>)
 80009ac:	f000 fee2 	bl	8001774 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 80009b0:	f44f 63bc 	mov.w	r3, #1504	; 0x5e0
 80009b4:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b6:	2301      	movs	r3, #1
 80009b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009be:	2300      	movs	r3, #0
 80009c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009c2:	f107 0314 	add.w	r3, r7, #20
 80009c6:	4619      	mov	r1, r3
 80009c8:	4812      	ldr	r0, [pc, #72]	; (8000a14 <MX_GPIO_Init+0x100>)
 80009ca:	f000 fd37 	bl	800143c <HAL_GPIO_Init>

  /*Configure GPIO pin : AIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin;
 80009ce:	2304      	movs	r3, #4
 80009d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d2:	2301      	movs	r3, #1
 80009d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009da:	2302      	movs	r3, #2
 80009dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(AIN2_GPIO_Port, &GPIO_InitStruct);
 80009de:	f107 0314 	add.w	r3, r7, #20
 80009e2:	4619      	mov	r1, r3
 80009e4:	480c      	ldr	r0, [pc, #48]	; (8000a18 <MX_GPIO_Init+0x104>)
 80009e6:	f000 fd29 	bl	800143c <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN1_Pin BIN1_Pin BIN5_Pin */
  GPIO_InitStruct.Pin = AIN1_Pin|BIN1_Pin|BIN5_Pin;
 80009ea:	2338      	movs	r3, #56	; 0x38
 80009ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ee:	2301      	movs	r3, #1
 80009f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f6:	2300      	movs	r3, #0
 80009f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fa:	f107 0314 	add.w	r3, r7, #20
 80009fe:	4619      	mov	r1, r3
 8000a00:	4805      	ldr	r0, [pc, #20]	; (8000a18 <MX_GPIO_Init+0x104>)
 8000a02:	f000 fd1b 	bl	800143c <HAL_GPIO_Init>

}
 8000a06:	bf00      	nop
 8000a08:	3728      	adds	r7, #40	; 0x28
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40023800 	.word	0x40023800
 8000a14:	40021000 	.word	0x40021000
 8000a18:	40020000 	.word	0x40020000

08000a1c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
	/* Example to send data to the other side
	 * HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
	if(ch < 'Z')
		ch++;
	else ch = 'A' */
	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8000a24:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a28:	4803      	ldr	r0, [pc, #12]	; (8000a38 <StartDefaultTask+0x1c>)
 8000a2a:	f000 febc 	bl	80017a6 <HAL_GPIO_TogglePin>
    osDelay(1000);
 8000a2e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a32:	f003 fbf1 	bl	8004218 <osDelay>
	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8000a36:	e7f5      	b.n	8000a24 <StartDefaultTask+0x8>
 8000a38:	40021000 	.word	0x40021000

08000a3c <show>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_show */
void show(void *argument)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b088      	sub	sp, #32
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN show */
  /* Infinite loop */
  uint8_t hello[20] = "I am alive\0";
 8000a44:	4a0c      	ldr	r2, [pc, #48]	; (8000a78 <show+0x3c>)
 8000a46:	f107 030c 	add.w	r3, r7, #12
 8000a4a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a4c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000a50:	f107 0318 	add.w	r3, r7, #24
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
  for(;;)
  {
	// Example to show received data
	//sprintf(Hello, "%s\0", aRxBuffer);
	OLED_ShowString(10,10,hello);
 8000a5a:	f107 030c 	add.w	r3, r7, #12
 8000a5e:	461a      	mov	r2, r3
 8000a60:	210a      	movs	r1, #10
 8000a62:	200a      	movs	r0, #10
 8000a64:	f006 f9be 	bl	8006de4 <OLED_ShowString>
	OLED_Refresh_Gram();
 8000a68:	f006 f848 	bl	8006afc <OLED_Refresh_Gram>
    osDelay(1000);
 8000a6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a70:	f003 fbd2 	bl	8004218 <osDelay>
	OLED_ShowString(10,10,hello);
 8000a74:	e7f1      	b.n	8000a5a <show+0x1e>
 8000a76:	bf00      	nop
 8000a78:	080078e8 	.word	0x080078e8

08000a7c <motor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_motor */
void motor(void *argument)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b088      	sub	sp, #32
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN motor */
	uint16_t pwmVal = 0;
 8000a84:	2300      	movs	r3, #0
 8000a86:	83fb      	strh	r3, [r7, #30]
	uint8_t hello[20];
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000a88:	2100      	movs	r1, #0
 8000a8a:	482a      	ldr	r0, [pc, #168]	; (8000b34 <motor+0xb8>)
 8000a8c:	f001 fbce 	bl	800222c <HAL_TIM_PWM_Start>
  /* Infinite loop */
  for(;;)
  {
	// speed up
	while(pwmVal < 4000)
 8000a90:	e021      	b.n	8000ad6 <motor+0x5a>
	{
		// pwm A
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8000a92:	2201      	movs	r2, #1
 8000a94:	2104      	movs	r1, #4
 8000a96:	4828      	ldr	r0, [pc, #160]	; (8000b38 <motor+0xbc>)
 8000a98:	f000 fe6c 	bl	8001774 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2108      	movs	r1, #8
 8000aa0:	4825      	ldr	r0, [pc, #148]	; (8000b38 <motor+0xbc>)
 8000aa2:	f000 fe67 	bl	8001774 <HAL_GPIO_WritePin>
		pwmVal++;
 8000aa6:	8bfb      	ldrh	r3, [r7, #30]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	83fb      	strh	r3, [r7, #30]
		// modify comparison value for duty cycle
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwmVal);
 8000aac:	4b21      	ldr	r3, [pc, #132]	; (8000b34 <motor+0xb8>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	8bfa      	ldrh	r2, [r7, #30]
 8000ab2:	635a      	str	r2, [r3, #52]	; 0x34
		// obviously ide does not like how we play with sprintf here, ignore the warning for now
		sprintf(hello, "Motor: %5d\0", pwmVal);
 8000ab4:	8bfa      	ldrh	r2, [r7, #30]
 8000ab6:	f107 0308 	add.w	r3, r7, #8
 8000aba:	4920      	ldr	r1, [pc, #128]	; (8000b3c <motor+0xc0>)
 8000abc:	4618      	mov	r0, r3
 8000abe:	f006 fa8f 	bl	8006fe0 <siprintf>
		OLED_ShowString(10,20,hello);
 8000ac2:	f107 0308 	add.w	r3, r7, #8
 8000ac6:	461a      	mov	r2, r3
 8000ac8:	2114      	movs	r1, #20
 8000aca:	200a      	movs	r0, #10
 8000acc:	f006 f98a 	bl	8006de4 <OLED_ShowString>
		osDelay(10);
 8000ad0:	200a      	movs	r0, #10
 8000ad2:	f003 fba1 	bl	8004218 <osDelay>
	while(pwmVal < 4000)
 8000ad6:	8bfb      	ldrh	r3, [r7, #30]
 8000ad8:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000adc:	d3d9      	bcc.n	8000a92 <motor+0x16>
	}

	// slow down
	while(pwmVal > 0)
 8000ade:	e021      	b.n	8000b24 <motor+0xa8>
	{
		// pwm A
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	2104      	movs	r1, #4
 8000ae4:	4814      	ldr	r0, [pc, #80]	; (8000b38 <motor+0xbc>)
 8000ae6:	f000 fe45 	bl	8001774 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8000aea:	2201      	movs	r2, #1
 8000aec:	2108      	movs	r1, #8
 8000aee:	4812      	ldr	r0, [pc, #72]	; (8000b38 <motor+0xbc>)
 8000af0:	f000 fe40 	bl	8001774 <HAL_GPIO_WritePin>
		pwmVal--;
 8000af4:	8bfb      	ldrh	r3, [r7, #30]
 8000af6:	3b01      	subs	r3, #1
 8000af8:	83fb      	strh	r3, [r7, #30]
		// modify comparison value for duty cycle
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwmVal);
 8000afa:	4b0e      	ldr	r3, [pc, #56]	; (8000b34 <motor+0xb8>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	8bfa      	ldrh	r2, [r7, #30]
 8000b00:	635a      	str	r2, [r3, #52]	; 0x34
		sprintf(hello, "Motor: %5d\0", pwmVal);
 8000b02:	8bfa      	ldrh	r2, [r7, #30]
 8000b04:	f107 0308 	add.w	r3, r7, #8
 8000b08:	490c      	ldr	r1, [pc, #48]	; (8000b3c <motor+0xc0>)
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f006 fa68 	bl	8006fe0 <siprintf>
		OLED_ShowString(10,20,hello);
 8000b10:	f107 0308 	add.w	r3, r7, #8
 8000b14:	461a      	mov	r2, r3
 8000b16:	2114      	movs	r1, #20
 8000b18:	200a      	movs	r0, #10
 8000b1a:	f006 f963 	bl	8006de4 <OLED_ShowString>
		osDelay(10);
 8000b1e:	200a      	movs	r0, #10
 8000b20:	f003 fb7a 	bl	8004218 <osDelay>
	while(pwmVal > 0)
 8000b24:	8bfb      	ldrh	r3, [r7, #30]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d1da      	bne.n	8000ae0 <motor+0x64>
	}
    osDelay(1000);
 8000b2a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b2e:	f003 fb73 	bl	8004218 <osDelay>
	while(pwmVal < 4000)
 8000b32:	e7d0      	b.n	8000ad6 <motor+0x5a>
 8000b34:	200000d8 	.word	0x200000d8
 8000b38:	40020000 	.word	0x40020000
 8000b3c:	080078fc 	.word	0x080078fc

08000b40 <encoder>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_encoder */
void encoder(void *argument)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08c      	sub	sp, #48	; 0x30
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN encoder */
  /* Infinite loop */
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000b48:	213c      	movs	r1, #60	; 0x3c
 8000b4a:	4834      	ldr	r0, [pc, #208]	; (8000c1c <encoder+0xdc>)
 8000b4c:	f001 fcdc 	bl	8002508 <HAL_TIM_Encoder_Start>

  int cnt1, cnt2, diff;
  uint32_t tick;
  uint8_t hello[20];
  uint16_t dir;
  cnt1 = __HAL_TIM_GET_COUNTER(&htim2);
 8000b50:	4b32      	ldr	r3, [pc, #200]	; (8000c1c <encoder+0xdc>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b56:	62fb      	str	r3, [r7, #44]	; 0x2c
  tick = HAL_GetTick();
 8000b58:	f000 fa9c 	bl	8001094 <HAL_GetTick>
 8000b5c:	6278      	str	r0, [r7, #36]	; 0x24

  for(;;)
  {
	if(HAL_GetTick() - tick > 1000L){
 8000b5e:	f000 fa99 	bl	8001094 <HAL_GetTick>
 8000b62:	4602      	mov	r2, r0
 8000b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b66:	1ad3      	subs	r3, r2, r3
 8000b68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000b6c:	d9f7      	bls.n	8000b5e <encoder+0x1e>
		cnt2 = __HAL_TIM_GET_COUNTER(&htim2);
 8000b6e:	4b2b      	ldr	r3, [pc, #172]	; (8000c1c <encoder+0xdc>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b74:	623b      	str	r3, [r7, #32]
		if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)){
 8000b76:	4b29      	ldr	r3, [pc, #164]	; (8000c1c <encoder+0xdc>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f003 0310 	and.w	r3, r3, #16
 8000b80:	2b10      	cmp	r3, #16
 8000b82:	d10e      	bne.n	8000ba2 <encoder+0x62>
			if(cnt2 < cnt1)
 8000b84:	6a3a      	ldr	r2, [r7, #32]
 8000b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	da04      	bge.n	8000b96 <encoder+0x56>
				diff = cnt2 - cnt1;
 8000b8c:	6a3a      	ldr	r2, [r7, #32]
 8000b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b90:	1ad3      	subs	r3, r2, r3
 8000b92:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b94:	e013      	b.n	8000bbe <encoder+0x7e>
			else
				diff = (4294967295 - cnt1) + cnt2;
 8000b96:	6a3a      	ldr	r2, [r7, #32]
 8000b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b9a:	1ad3      	subs	r3, r2, r3
 8000b9c:	3b01      	subs	r3, #1
 8000b9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ba0:	e00d      	b.n	8000bbe <encoder+0x7e>
		}
		else{
			if(cnt2 > cnt1)
 8000ba2:	6a3a      	ldr	r2, [r7, #32]
 8000ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	dd04      	ble.n	8000bb4 <encoder+0x74>
				diff = cnt2 - cnt1;
 8000baa:	6a3a      	ldr	r2, [r7, #32]
 8000bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bae:	1ad3      	subs	r3, r2, r3
 8000bb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8000bb2:	e004      	b.n	8000bbe <encoder+0x7e>
			else
				diff = (4294967295 - cnt1) + cnt2;
 8000bb4:	6a3a      	ldr	r2, [r7, #32]
 8000bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bb8:	1ad3      	subs	r3, r2, r3
 8000bba:	3b01      	subs	r3, #1
 8000bbc:	62bb      	str	r3, [r7, #40]	; 0x28
		}
		sprintf(hello, "Speed from encoder: %5d\0", diff);
 8000bbe:	f107 0308 	add.w	r3, r7, #8
 8000bc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000bc4:	4916      	ldr	r1, [pc, #88]	; (8000c20 <encoder+0xe0>)
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f006 fa0a 	bl	8006fe0 <siprintf>
		OLED_ShowString(10,30,hello);
 8000bcc:	f107 0308 	add.w	r3, r7, #8
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	211e      	movs	r1, #30
 8000bd4:	200a      	movs	r0, #10
 8000bd6:	f006 f905 	bl	8006de4 <OLED_ShowString>
		dir = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2);
 8000bda:	4b10      	ldr	r3, [pc, #64]	; (8000c1c <encoder+0xdc>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f003 0310 	and.w	r3, r3, #16
 8000be4:	2b10      	cmp	r3, #16
 8000be6:	bf0c      	ite	eq
 8000be8:	2301      	moveq	r3, #1
 8000bea:	2300      	movne	r3, #0
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	83fb      	strh	r3, [r7, #30]
		sprintf(hello, "Dir: %5d\0", dir);
 8000bf0:	8bfa      	ldrh	r2, [r7, #30]
 8000bf2:	f107 0308 	add.w	r3, r7, #8
 8000bf6:	490b      	ldr	r1, [pc, #44]	; (8000c24 <encoder+0xe4>)
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f006 f9f1 	bl	8006fe0 <siprintf>
		OLED_ShowString(10,40,hello);
 8000bfe:	f107 0308 	add.w	r3, r7, #8
 8000c02:	461a      	mov	r2, r3
 8000c04:	2128      	movs	r1, #40	; 0x28
 8000c06:	200a      	movs	r0, #10
 8000c08:	f006 f8ec 	bl	8006de4 <OLED_ShowString>
		cnt1 = __HAL_TIM_GET_COUNTER(&htim2);
 8000c0c:	4b03      	ldr	r3, [pc, #12]	; (8000c1c <encoder+0xdc>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c12:	62fb      	str	r3, [r7, #44]	; 0x2c
		tick = HAL_GetTick();
 8000c14:	f000 fa3e 	bl	8001094 <HAL_GetTick>
 8000c18:	6278      	str	r0, [r7, #36]	; 0x24
	if(HAL_GetTick() - tick > 1000L){
 8000c1a:	e7a0      	b.n	8000b5e <encoder+0x1e>
 8000c1c:	20000090 	.word	0x20000090
 8000c20:	08007908 	.word	0x08007908
 8000c24:	08007924 	.word	0x08007924

08000c28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c2c:	b672      	cpsid	i
}
 8000c2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <Error_Handler+0x8>
	...

08000c34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	607b      	str	r3, [r7, #4]
 8000c3e:	4b12      	ldr	r3, [pc, #72]	; (8000c88 <HAL_MspInit+0x54>)
 8000c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c42:	4a11      	ldr	r2, [pc, #68]	; (8000c88 <HAL_MspInit+0x54>)
 8000c44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c48:	6453      	str	r3, [r2, #68]	; 0x44
 8000c4a:	4b0f      	ldr	r3, [pc, #60]	; (8000c88 <HAL_MspInit+0x54>)
 8000c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c52:	607b      	str	r3, [r7, #4]
 8000c54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	603b      	str	r3, [r7, #0]
 8000c5a:	4b0b      	ldr	r3, [pc, #44]	; (8000c88 <HAL_MspInit+0x54>)
 8000c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5e:	4a0a      	ldr	r2, [pc, #40]	; (8000c88 <HAL_MspInit+0x54>)
 8000c60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c64:	6413      	str	r3, [r2, #64]	; 0x40
 8000c66:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <HAL_MspInit+0x54>)
 8000c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c6e:	603b      	str	r3, [r7, #0]
 8000c70:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c72:	2200      	movs	r2, #0
 8000c74:	210f      	movs	r1, #15
 8000c76:	f06f 0001 	mvn.w	r0, #1
 8000c7a:	f000 fb16 	bl	80012aa <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40023800 	.word	0x40023800

08000c8c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08a      	sub	sp, #40	; 0x28
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cac:	d14a      	bne.n	8000d44 <HAL_TIM_Encoder_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	613b      	str	r3, [r7, #16]
 8000cb2:	4b26      	ldr	r3, [pc, #152]	; (8000d4c <HAL_TIM_Encoder_MspInit+0xc0>)
 8000cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb6:	4a25      	ldr	r2, [pc, #148]	; (8000d4c <HAL_TIM_Encoder_MspInit+0xc0>)
 8000cb8:	f043 0301 	orr.w	r3, r3, #1
 8000cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cbe:	4b23      	ldr	r3, [pc, #140]	; (8000d4c <HAL_TIM_Encoder_MspInit+0xc0>)
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	613b      	str	r3, [r7, #16]
 8000cc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60fb      	str	r3, [r7, #12]
 8000cce:	4b1f      	ldr	r3, [pc, #124]	; (8000d4c <HAL_TIM_Encoder_MspInit+0xc0>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	4a1e      	ldr	r2, [pc, #120]	; (8000d4c <HAL_TIM_Encoder_MspInit+0xc0>)
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cda:	4b1c      	ldr	r3, [pc, #112]	; (8000d4c <HAL_TIM_Encoder_MspInit+0xc0>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60bb      	str	r3, [r7, #8]
 8000cea:	4b18      	ldr	r3, [pc, #96]	; (8000d4c <HAL_TIM_Encoder_MspInit+0xc0>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	4a17      	ldr	r2, [pc, #92]	; (8000d4c <HAL_TIM_Encoder_MspInit+0xc0>)
 8000cf0:	f043 0302 	orr.w	r3, r3, #2
 8000cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf6:	4b15      	ldr	r3, [pc, #84]	; (8000d4c <HAL_TIM_Encoder_MspInit+0xc0>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	f003 0302 	and.w	r3, r3, #2
 8000cfe:	60bb      	str	r3, [r7, #8]
 8000d00:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000d02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d10:	2300      	movs	r3, #0
 8000d12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d14:	2301      	movs	r3, #1
 8000d16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d18:	f107 0314 	add.w	r3, r7, #20
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	480c      	ldr	r0, [pc, #48]	; (8000d50 <HAL_TIM_Encoder_MspInit+0xc4>)
 8000d20:	f000 fb8c 	bl	800143c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d24:	2308      	movs	r3, #8
 8000d26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d30:	2300      	movs	r3, #0
 8000d32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d34:	2301      	movs	r3, #1
 8000d36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4805      	ldr	r0, [pc, #20]	; (8000d54 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000d40:	f000 fb7c 	bl	800143c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d44:	bf00      	nop
 8000d46:	3728      	adds	r7, #40	; 0x28
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40023800 	.word	0x40023800
 8000d50:	40020000 	.word	0x40020000
 8000d54:	40020400 	.word	0x40020400

08000d58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08a      	sub	sp, #40	; 0x28
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d60:	f107 0314 	add.w	r3, r7, #20
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
 8000d6e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM8)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a19      	ldr	r2, [pc, #100]	; (8000ddc <HAL_TIM_Base_MspInit+0x84>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d12b      	bne.n	8000dd2 <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	613b      	str	r3, [r7, #16]
 8000d7e:	4b18      	ldr	r3, [pc, #96]	; (8000de0 <HAL_TIM_Base_MspInit+0x88>)
 8000d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d82:	4a17      	ldr	r2, [pc, #92]	; (8000de0 <HAL_TIM_Base_MspInit+0x88>)
 8000d84:	f043 0302 	orr.w	r3, r3, #2
 8000d88:	6453      	str	r3, [r2, #68]	; 0x44
 8000d8a:	4b15      	ldr	r3, [pc, #84]	; (8000de0 <HAL_TIM_Base_MspInit+0x88>)
 8000d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8e:	f003 0302 	and.w	r3, r3, #2
 8000d92:	613b      	str	r3, [r7, #16]
 8000d94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	60fb      	str	r3, [r7, #12]
 8000d9a:	4b11      	ldr	r3, [pc, #68]	; (8000de0 <HAL_TIM_Base_MspInit+0x88>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	4a10      	ldr	r2, [pc, #64]	; (8000de0 <HAL_TIM_Base_MspInit+0x88>)
 8000da0:	f043 0304 	orr.w	r3, r3, #4
 8000da4:	6313      	str	r3, [r2, #48]	; 0x30
 8000da6:	4b0e      	ldr	r3, [pc, #56]	; (8000de0 <HAL_TIM_Base_MspInit+0x88>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	f003 0304 	and.w	r3, r3, #4
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    */
    GPIO_InitStruct.Pin = PWMA_Pin;
 8000db2:	2340      	movs	r3, #64	; 0x40
 8000db4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db6:	2302      	movs	r3, #2
 8000db8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWMA_GPIO_Port, &GPIO_InitStruct);
 8000dc6:	f107 0314 	add.w	r3, r7, #20
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4805      	ldr	r0, [pc, #20]	; (8000de4 <HAL_TIM_Base_MspInit+0x8c>)
 8000dce:	f000 fb35 	bl	800143c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000dd2:	bf00      	nop
 8000dd4:	3728      	adds	r7, #40	; 0x28
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40010400 	.word	0x40010400
 8000de0:	40023800 	.word	0x40023800
 8000de4:	40020800 	.word	0x40020800

08000de8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08a      	sub	sp, #40	; 0x28
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a1d      	ldr	r2, [pc, #116]	; (8000e7c <HAL_UART_MspInit+0x94>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d134      	bne.n	8000e74 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	613b      	str	r3, [r7, #16]
 8000e0e:	4b1c      	ldr	r3, [pc, #112]	; (8000e80 <HAL_UART_MspInit+0x98>)
 8000e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e12:	4a1b      	ldr	r2, [pc, #108]	; (8000e80 <HAL_UART_MspInit+0x98>)
 8000e14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e18:	6413      	str	r3, [r2, #64]	; 0x40
 8000e1a:	4b19      	ldr	r3, [pc, #100]	; (8000e80 <HAL_UART_MspInit+0x98>)
 8000e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e22:	613b      	str	r3, [r7, #16]
 8000e24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	4b15      	ldr	r3, [pc, #84]	; (8000e80 <HAL_UART_MspInit+0x98>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	4a14      	ldr	r2, [pc, #80]	; (8000e80 <HAL_UART_MspInit+0x98>)
 8000e30:	f043 0304 	orr.w	r3, r3, #4
 8000e34:	6313      	str	r3, [r2, #48]	; 0x30
 8000e36:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <HAL_UART_MspInit+0x98>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	f003 0304 	and.w	r3, r3, #4
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000e42:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e50:	2303      	movs	r3, #3
 8000e52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e54:	2307      	movs	r3, #7
 8000e56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e58:	f107 0314 	add.w	r3, r7, #20
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4809      	ldr	r0, [pc, #36]	; (8000e84 <HAL_UART_MspInit+0x9c>)
 8000e60:	f000 faec 	bl	800143c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000e64:	2200      	movs	r2, #0
 8000e66:	2105      	movs	r1, #5
 8000e68:	2027      	movs	r0, #39	; 0x27
 8000e6a:	f000 fa1e 	bl	80012aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000e6e:	2027      	movs	r0, #39	; 0x27
 8000e70:	f000 fa37 	bl	80012e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e74:	bf00      	nop
 8000e76:	3728      	adds	r7, #40	; 0x28
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	40004800 	.word	0x40004800
 8000e80:	40023800 	.word	0x40023800
 8000e84:	40020800 	.word	0x40020800

08000e88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e8c:	e7fe      	b.n	8000e8c <NMI_Handler+0x4>

08000e8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e92:	e7fe      	b.n	8000e92 <HardFault_Handler+0x4>

08000e94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e98:	e7fe      	b.n	8000e98 <MemManage_Handler+0x4>

08000e9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e9e:	e7fe      	b.n	8000e9e <BusFault_Handler+0x4>

08000ea0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea4:	e7fe      	b.n	8000ea4 <UsageFault_Handler+0x4>

08000ea6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr

08000eb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eb8:	f000 f8d8 	bl	800106c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000ebc:	f004 fdba 	bl	8005a34 <xTaskGetSchedulerState>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d001      	beq.n	8000eca <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000ec6:	f005 fb9f 	bl	8006608 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
	...

08000ed0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000ed4:	4802      	ldr	r0, [pc, #8]	; (8000ee0 <USART3_IRQHandler+0x10>)
 8000ed6:	f002 f98b 	bl	80031f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	20000120 	.word	0x20000120

08000ee4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000eec:	4a14      	ldr	r2, [pc, #80]	; (8000f40 <_sbrk+0x5c>)
 8000eee:	4b15      	ldr	r3, [pc, #84]	; (8000f44 <_sbrk+0x60>)
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ef8:	4b13      	ldr	r3, [pc, #76]	; (8000f48 <_sbrk+0x64>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d102      	bne.n	8000f06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f00:	4b11      	ldr	r3, [pc, #68]	; (8000f48 <_sbrk+0x64>)
 8000f02:	4a12      	ldr	r2, [pc, #72]	; (8000f4c <_sbrk+0x68>)
 8000f04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f06:	4b10      	ldr	r3, [pc, #64]	; (8000f48 <_sbrk+0x64>)
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4413      	add	r3, r2
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d207      	bcs.n	8000f24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f14:	f006 f824 	bl	8006f60 <__errno>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	220c      	movs	r2, #12
 8000f1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f22:	e009      	b.n	8000f38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f24:	4b08      	ldr	r3, [pc, #32]	; (8000f48 <_sbrk+0x64>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f2a:	4b07      	ldr	r3, [pc, #28]	; (8000f48 <_sbrk+0x64>)
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4413      	add	r3, r2
 8000f32:	4a05      	ldr	r2, [pc, #20]	; (8000f48 <_sbrk+0x64>)
 8000f34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f36:	68fb      	ldr	r3, [r7, #12]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3718      	adds	r7, #24
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20020000 	.word	0x20020000
 8000f44:	00000400 	.word	0x00000400
 8000f48:	20000188 	.word	0x20000188
 8000f4c:	20004ef0 	.word	0x20004ef0

08000f50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f54:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <SystemInit+0x20>)
 8000f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f5a:	4a05      	ldr	r2, [pc, #20]	; (8000f70 <SystemInit+0x20>)
 8000f5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	e000ed00 	.word	0xe000ed00

08000f74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f78:	480d      	ldr	r0, [pc, #52]	; (8000fb0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f7a:	490e      	ldr	r1, [pc, #56]	; (8000fb4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f7c:	4a0e      	ldr	r2, [pc, #56]	; (8000fb8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f80:	e002      	b.n	8000f88 <LoopCopyDataInit>

08000f82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f86:	3304      	adds	r3, #4

08000f88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f8c:	d3f9      	bcc.n	8000f82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f8e:	4a0b      	ldr	r2, [pc, #44]	; (8000fbc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f90:	4c0b      	ldr	r4, [pc, #44]	; (8000fc0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f94:	e001      	b.n	8000f9a <LoopFillZerobss>

08000f96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f98:	3204      	adds	r2, #4

08000f9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f9c:	d3fb      	bcc.n	8000f96 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f9e:	f7ff ffd7 	bl	8000f50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fa2:	f005 ffe3 	bl	8006f6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fa6:	f7ff fae5 	bl	8000574 <main>
  bx  lr    
 8000faa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000fac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fb4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000fb8:	08008498 	.word	0x08008498
  ldr r2, =_sbss
 8000fbc:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000fc0:	20004ef0 	.word	0x20004ef0

08000fc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fc4:	e7fe      	b.n	8000fc4 <ADC_IRQHandler>
	...

08000fc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fcc:	4b0e      	ldr	r3, [pc, #56]	; (8001008 <HAL_Init+0x40>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a0d      	ldr	r2, [pc, #52]	; (8001008 <HAL_Init+0x40>)
 8000fd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fd6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fd8:	4b0b      	ldr	r3, [pc, #44]	; (8001008 <HAL_Init+0x40>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a0a      	ldr	r2, [pc, #40]	; (8001008 <HAL_Init+0x40>)
 8000fde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fe2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fe4:	4b08      	ldr	r3, [pc, #32]	; (8001008 <HAL_Init+0x40>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a07      	ldr	r2, [pc, #28]	; (8001008 <HAL_Init+0x40>)
 8000fea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ff0:	2003      	movs	r0, #3
 8000ff2:	f000 f94f 	bl	8001294 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ff6:	200f      	movs	r0, #15
 8000ff8:	f000 f808 	bl	800100c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ffc:	f7ff fe1a 	bl	8000c34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001000:	2300      	movs	r3, #0
}
 8001002:	4618      	mov	r0, r3
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40023c00 	.word	0x40023c00

0800100c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001014:	4b12      	ldr	r3, [pc, #72]	; (8001060 <HAL_InitTick+0x54>)
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	4b12      	ldr	r3, [pc, #72]	; (8001064 <HAL_InitTick+0x58>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	4619      	mov	r1, r3
 800101e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001022:	fbb3 f3f1 	udiv	r3, r3, r1
 8001026:	fbb2 f3f3 	udiv	r3, r2, r3
 800102a:	4618      	mov	r0, r3
 800102c:	f000 f967 	bl	80012fe <HAL_SYSTICK_Config>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	e00e      	b.n	8001058 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2b0f      	cmp	r3, #15
 800103e:	d80a      	bhi.n	8001056 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001040:	2200      	movs	r2, #0
 8001042:	6879      	ldr	r1, [r7, #4]
 8001044:	f04f 30ff 	mov.w	r0, #4294967295
 8001048:	f000 f92f 	bl	80012aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800104c:	4a06      	ldr	r2, [pc, #24]	; (8001068 <HAL_InitTick+0x5c>)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001052:	2300      	movs	r3, #0
 8001054:	e000      	b.n	8001058 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
}
 8001058:	4618      	mov	r0, r3
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	20000000 	.word	0x20000000
 8001064:	20000008 	.word	0x20000008
 8001068:	20000004 	.word	0x20000004

0800106c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001070:	4b06      	ldr	r3, [pc, #24]	; (800108c <HAL_IncTick+0x20>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	461a      	mov	r2, r3
 8001076:	4b06      	ldr	r3, [pc, #24]	; (8001090 <HAL_IncTick+0x24>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4413      	add	r3, r2
 800107c:	4a04      	ldr	r2, [pc, #16]	; (8001090 <HAL_IncTick+0x24>)
 800107e:	6013      	str	r3, [r2, #0]
}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	20000008 	.word	0x20000008
 8001090:	2000018c 	.word	0x2000018c

08001094 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  return uwTick;
 8001098:	4b03      	ldr	r3, [pc, #12]	; (80010a8 <HAL_GetTick+0x14>)
 800109a:	681b      	ldr	r3, [r3, #0]
}
 800109c:	4618      	mov	r0, r3
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	2000018c 	.word	0x2000018c

080010ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010b4:	f7ff ffee 	bl	8001094 <HAL_GetTick>
 80010b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010c4:	d005      	beq.n	80010d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010c6:	4b0a      	ldr	r3, [pc, #40]	; (80010f0 <HAL_Delay+0x44>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	461a      	mov	r2, r3
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	4413      	add	r3, r2
 80010d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010d2:	bf00      	nop
 80010d4:	f7ff ffde 	bl	8001094 <HAL_GetTick>
 80010d8:	4602      	mov	r2, r0
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	68fa      	ldr	r2, [r7, #12]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d8f7      	bhi.n	80010d4 <HAL_Delay+0x28>
  {
  }
}
 80010e4:	bf00      	nop
 80010e6:	bf00      	nop
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20000008 	.word	0x20000008

080010f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f003 0307 	and.w	r3, r3, #7
 8001102:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001104:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <__NVIC_SetPriorityGrouping+0x44>)
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800110a:	68ba      	ldr	r2, [r7, #8]
 800110c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001110:	4013      	ands	r3, r2
 8001112:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800111c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001120:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001124:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001126:	4a04      	ldr	r2, [pc, #16]	; (8001138 <__NVIC_SetPriorityGrouping+0x44>)
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	60d3      	str	r3, [r2, #12]
}
 800112c:	bf00      	nop
 800112e:	3714      	adds	r7, #20
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	e000ed00 	.word	0xe000ed00

0800113c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001140:	4b04      	ldr	r3, [pc, #16]	; (8001154 <__NVIC_GetPriorityGrouping+0x18>)
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	0a1b      	lsrs	r3, r3, #8
 8001146:	f003 0307 	and.w	r3, r3, #7
}
 800114a:	4618      	mov	r0, r3
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	e000ed00 	.word	0xe000ed00

08001158 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001166:	2b00      	cmp	r3, #0
 8001168:	db0b      	blt.n	8001182 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800116a:	79fb      	ldrb	r3, [r7, #7]
 800116c:	f003 021f 	and.w	r2, r3, #31
 8001170:	4907      	ldr	r1, [pc, #28]	; (8001190 <__NVIC_EnableIRQ+0x38>)
 8001172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001176:	095b      	lsrs	r3, r3, #5
 8001178:	2001      	movs	r0, #1
 800117a:	fa00 f202 	lsl.w	r2, r0, r2
 800117e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001182:	bf00      	nop
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	e000e100 	.word	0xe000e100

08001194 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	6039      	str	r1, [r7, #0]
 800119e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	db0a      	blt.n	80011be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	b2da      	uxtb	r2, r3
 80011ac:	490c      	ldr	r1, [pc, #48]	; (80011e0 <__NVIC_SetPriority+0x4c>)
 80011ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b2:	0112      	lsls	r2, r2, #4
 80011b4:	b2d2      	uxtb	r2, r2
 80011b6:	440b      	add	r3, r1
 80011b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011bc:	e00a      	b.n	80011d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	b2da      	uxtb	r2, r3
 80011c2:	4908      	ldr	r1, [pc, #32]	; (80011e4 <__NVIC_SetPriority+0x50>)
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	f003 030f 	and.w	r3, r3, #15
 80011ca:	3b04      	subs	r3, #4
 80011cc:	0112      	lsls	r2, r2, #4
 80011ce:	b2d2      	uxtb	r2, r2
 80011d0:	440b      	add	r3, r1
 80011d2:	761a      	strb	r2, [r3, #24]
}
 80011d4:	bf00      	nop
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	e000e100 	.word	0xe000e100
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b089      	sub	sp, #36	; 0x24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	f003 0307 	and.w	r3, r3, #7
 80011fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	f1c3 0307 	rsb	r3, r3, #7
 8001202:	2b04      	cmp	r3, #4
 8001204:	bf28      	it	cs
 8001206:	2304      	movcs	r3, #4
 8001208:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	3304      	adds	r3, #4
 800120e:	2b06      	cmp	r3, #6
 8001210:	d902      	bls.n	8001218 <NVIC_EncodePriority+0x30>
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	3b03      	subs	r3, #3
 8001216:	e000      	b.n	800121a <NVIC_EncodePriority+0x32>
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800121c:	f04f 32ff 	mov.w	r2, #4294967295
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	43da      	mvns	r2, r3
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	401a      	ands	r2, r3
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001230:	f04f 31ff 	mov.w	r1, #4294967295
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	fa01 f303 	lsl.w	r3, r1, r3
 800123a:	43d9      	mvns	r1, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001240:	4313      	orrs	r3, r2
         );
}
 8001242:	4618      	mov	r0, r3
 8001244:	3724      	adds	r7, #36	; 0x24
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
	...

08001250 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	3b01      	subs	r3, #1
 800125c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001260:	d301      	bcc.n	8001266 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001262:	2301      	movs	r3, #1
 8001264:	e00f      	b.n	8001286 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001266:	4a0a      	ldr	r2, [pc, #40]	; (8001290 <SysTick_Config+0x40>)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	3b01      	subs	r3, #1
 800126c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800126e:	210f      	movs	r1, #15
 8001270:	f04f 30ff 	mov.w	r0, #4294967295
 8001274:	f7ff ff8e 	bl	8001194 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001278:	4b05      	ldr	r3, [pc, #20]	; (8001290 <SysTick_Config+0x40>)
 800127a:	2200      	movs	r2, #0
 800127c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800127e:	4b04      	ldr	r3, [pc, #16]	; (8001290 <SysTick_Config+0x40>)
 8001280:	2207      	movs	r2, #7
 8001282:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	e000e010 	.word	0xe000e010

08001294 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f7ff ff29 	bl	80010f4 <__NVIC_SetPriorityGrouping>
}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b086      	sub	sp, #24
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	4603      	mov	r3, r0
 80012b2:	60b9      	str	r1, [r7, #8]
 80012b4:	607a      	str	r2, [r7, #4]
 80012b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012bc:	f7ff ff3e 	bl	800113c <__NVIC_GetPriorityGrouping>
 80012c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	68b9      	ldr	r1, [r7, #8]
 80012c6:	6978      	ldr	r0, [r7, #20]
 80012c8:	f7ff ff8e 	bl	80011e8 <NVIC_EncodePriority>
 80012cc:	4602      	mov	r2, r0
 80012ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012d2:	4611      	mov	r1, r2
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff ff5d 	bl	8001194 <__NVIC_SetPriority>
}
 80012da:	bf00      	nop
 80012dc:	3718      	adds	r7, #24
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b082      	sub	sp, #8
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	4603      	mov	r3, r0
 80012ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff ff31 	bl	8001158 <__NVIC_EnableIRQ>
}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b082      	sub	sp, #8
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f7ff ffa2 	bl	8001250 <SysTick_Config>
 800130c:	4603      	mov	r3, r0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	b084      	sub	sp, #16
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001322:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001324:	f7ff feb6 	bl	8001094 <HAL_GetTick>
 8001328:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001330:	b2db      	uxtb	r3, r3
 8001332:	2b02      	cmp	r3, #2
 8001334:	d008      	beq.n	8001348 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2280      	movs	r2, #128	; 0x80
 800133a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2200      	movs	r2, #0
 8001340:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	e052      	b.n	80013ee <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f022 0216 	bic.w	r2, r2, #22
 8001356:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	695a      	ldr	r2, [r3, #20]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001366:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136c:	2b00      	cmp	r3, #0
 800136e:	d103      	bne.n	8001378 <HAL_DMA_Abort+0x62>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001374:	2b00      	cmp	r3, #0
 8001376:	d007      	beq.n	8001388 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f022 0208 	bic.w	r2, r2, #8
 8001386:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f022 0201 	bic.w	r2, r2, #1
 8001396:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001398:	e013      	b.n	80013c2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800139a:	f7ff fe7b 	bl	8001094 <HAL_GetTick>
 800139e:	4602      	mov	r2, r0
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	2b05      	cmp	r3, #5
 80013a6:	d90c      	bls.n	80013c2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2220      	movs	r2, #32
 80013ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2203      	movs	r2, #3
 80013b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2200      	movs	r2, #0
 80013ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e015      	b.n	80013ee <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 0301 	and.w	r3, r3, #1
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d1e4      	bne.n	800139a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013d4:	223f      	movs	r2, #63	; 0x3f
 80013d6:	409a      	lsls	r2, r3
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2201      	movs	r2, #1
 80013e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2200      	movs	r2, #0
 80013e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013f6:	b480      	push	{r7}
 80013f8:	b083      	sub	sp, #12
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001404:	b2db      	uxtb	r3, r3
 8001406:	2b02      	cmp	r3, #2
 8001408:	d004      	beq.n	8001414 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2280      	movs	r2, #128	; 0x80
 800140e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	e00c      	b.n	800142e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2205      	movs	r2, #5
 8001418:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f022 0201 	bic.w	r2, r2, #1
 800142a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800142c:	2300      	movs	r3, #0
}
 800142e:	4618      	mov	r0, r3
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
	...

0800143c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800143c:	b480      	push	{r7}
 800143e:	b089      	sub	sp, #36	; 0x24
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001446:	2300      	movs	r3, #0
 8001448:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800144a:	2300      	movs	r3, #0
 800144c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800144e:	2300      	movs	r3, #0
 8001450:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001452:	2300      	movs	r3, #0
 8001454:	61fb      	str	r3, [r7, #28]
 8001456:	e16b      	b.n	8001730 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001458:	2201      	movs	r2, #1
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	697a      	ldr	r2, [r7, #20]
 8001468:	4013      	ands	r3, r2
 800146a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800146c:	693a      	ldr	r2, [r7, #16]
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	429a      	cmp	r2, r3
 8001472:	f040 815a 	bne.w	800172a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f003 0303 	and.w	r3, r3, #3
 800147e:	2b01      	cmp	r3, #1
 8001480:	d005      	beq.n	800148e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800148a:	2b02      	cmp	r3, #2
 800148c:	d130      	bne.n	80014f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	2203      	movs	r2, #3
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	43db      	mvns	r3, r3
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	4013      	ands	r3, r2
 80014a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	68da      	ldr	r2, [r3, #12]
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	fa02 f303 	lsl.w	r3, r2, r3
 80014b2:	69ba      	ldr	r2, [r7, #24]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014c4:	2201      	movs	r2, #1
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	43db      	mvns	r3, r3
 80014ce:	69ba      	ldr	r2, [r7, #24]
 80014d0:	4013      	ands	r3, r2
 80014d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	091b      	lsrs	r3, r3, #4
 80014da:	f003 0201 	and.w	r2, r3, #1
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	4313      	orrs	r3, r2
 80014e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f003 0303 	and.w	r3, r3, #3
 80014f8:	2b03      	cmp	r3, #3
 80014fa:	d017      	beq.n	800152c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	2203      	movs	r2, #3
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	43db      	mvns	r3, r3
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	4013      	ands	r3, r2
 8001512:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	689a      	ldr	r2, [r3, #8]
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	4313      	orrs	r3, r2
 8001524:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f003 0303 	and.w	r3, r3, #3
 8001534:	2b02      	cmp	r3, #2
 8001536:	d123      	bne.n	8001580 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	08da      	lsrs	r2, r3, #3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	3208      	adds	r2, #8
 8001540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001544:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	f003 0307 	and.w	r3, r3, #7
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	220f      	movs	r2, #15
 8001550:	fa02 f303 	lsl.w	r3, r2, r3
 8001554:	43db      	mvns	r3, r3
 8001556:	69ba      	ldr	r2, [r7, #24]
 8001558:	4013      	ands	r3, r2
 800155a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	691a      	ldr	r2, [r3, #16]
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	f003 0307 	and.w	r3, r3, #7
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	4313      	orrs	r3, r2
 8001570:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	08da      	lsrs	r2, r3, #3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	3208      	adds	r2, #8
 800157a:	69b9      	ldr	r1, [r7, #24]
 800157c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	2203      	movs	r2, #3
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	43db      	mvns	r3, r3
 8001592:	69ba      	ldr	r2, [r7, #24]
 8001594:	4013      	ands	r3, r2
 8001596:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f003 0203 	and.w	r2, r3, #3
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	f000 80b4 	beq.w	800172a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	60fb      	str	r3, [r7, #12]
 80015c6:	4b60      	ldr	r3, [pc, #384]	; (8001748 <HAL_GPIO_Init+0x30c>)
 80015c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ca:	4a5f      	ldr	r2, [pc, #380]	; (8001748 <HAL_GPIO_Init+0x30c>)
 80015cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015d0:	6453      	str	r3, [r2, #68]	; 0x44
 80015d2:	4b5d      	ldr	r3, [pc, #372]	; (8001748 <HAL_GPIO_Init+0x30c>)
 80015d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015de:	4a5b      	ldr	r2, [pc, #364]	; (800174c <HAL_GPIO_Init+0x310>)
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	089b      	lsrs	r3, r3, #2
 80015e4:	3302      	adds	r3, #2
 80015e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	f003 0303 	and.w	r3, r3, #3
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	220f      	movs	r2, #15
 80015f6:	fa02 f303 	lsl.w	r3, r2, r3
 80015fa:	43db      	mvns	r3, r3
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	4013      	ands	r3, r2
 8001600:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4a52      	ldr	r2, [pc, #328]	; (8001750 <HAL_GPIO_Init+0x314>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d02b      	beq.n	8001662 <HAL_GPIO_Init+0x226>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4a51      	ldr	r2, [pc, #324]	; (8001754 <HAL_GPIO_Init+0x318>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d025      	beq.n	800165e <HAL_GPIO_Init+0x222>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a50      	ldr	r2, [pc, #320]	; (8001758 <HAL_GPIO_Init+0x31c>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d01f      	beq.n	800165a <HAL_GPIO_Init+0x21e>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a4f      	ldr	r2, [pc, #316]	; (800175c <HAL_GPIO_Init+0x320>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d019      	beq.n	8001656 <HAL_GPIO_Init+0x21a>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a4e      	ldr	r2, [pc, #312]	; (8001760 <HAL_GPIO_Init+0x324>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d013      	beq.n	8001652 <HAL_GPIO_Init+0x216>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4a4d      	ldr	r2, [pc, #308]	; (8001764 <HAL_GPIO_Init+0x328>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d00d      	beq.n	800164e <HAL_GPIO_Init+0x212>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a4c      	ldr	r2, [pc, #304]	; (8001768 <HAL_GPIO_Init+0x32c>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d007      	beq.n	800164a <HAL_GPIO_Init+0x20e>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a4b      	ldr	r2, [pc, #300]	; (800176c <HAL_GPIO_Init+0x330>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d101      	bne.n	8001646 <HAL_GPIO_Init+0x20a>
 8001642:	2307      	movs	r3, #7
 8001644:	e00e      	b.n	8001664 <HAL_GPIO_Init+0x228>
 8001646:	2308      	movs	r3, #8
 8001648:	e00c      	b.n	8001664 <HAL_GPIO_Init+0x228>
 800164a:	2306      	movs	r3, #6
 800164c:	e00a      	b.n	8001664 <HAL_GPIO_Init+0x228>
 800164e:	2305      	movs	r3, #5
 8001650:	e008      	b.n	8001664 <HAL_GPIO_Init+0x228>
 8001652:	2304      	movs	r3, #4
 8001654:	e006      	b.n	8001664 <HAL_GPIO_Init+0x228>
 8001656:	2303      	movs	r3, #3
 8001658:	e004      	b.n	8001664 <HAL_GPIO_Init+0x228>
 800165a:	2302      	movs	r3, #2
 800165c:	e002      	b.n	8001664 <HAL_GPIO_Init+0x228>
 800165e:	2301      	movs	r3, #1
 8001660:	e000      	b.n	8001664 <HAL_GPIO_Init+0x228>
 8001662:	2300      	movs	r3, #0
 8001664:	69fa      	ldr	r2, [r7, #28]
 8001666:	f002 0203 	and.w	r2, r2, #3
 800166a:	0092      	lsls	r2, r2, #2
 800166c:	4093      	lsls	r3, r2
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	4313      	orrs	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001674:	4935      	ldr	r1, [pc, #212]	; (800174c <HAL_GPIO_Init+0x310>)
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	089b      	lsrs	r3, r3, #2
 800167a:	3302      	adds	r3, #2
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001682:	4b3b      	ldr	r3, [pc, #236]	; (8001770 <HAL_GPIO_Init+0x334>)
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	43db      	mvns	r3, r3
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	4013      	ands	r3, r2
 8001690:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d003      	beq.n	80016a6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016a6:	4a32      	ldr	r2, [pc, #200]	; (8001770 <HAL_GPIO_Init+0x334>)
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016ac:	4b30      	ldr	r3, [pc, #192]	; (8001770 <HAL_GPIO_Init+0x334>)
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	43db      	mvns	r3, r3
 80016b6:	69ba      	ldr	r2, [r7, #24]
 80016b8:	4013      	ands	r3, r2
 80016ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d003      	beq.n	80016d0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016d0:	4a27      	ldr	r2, [pc, #156]	; (8001770 <HAL_GPIO_Init+0x334>)
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016d6:	4b26      	ldr	r3, [pc, #152]	; (8001770 <HAL_GPIO_Init+0x334>)
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	43db      	mvns	r3, r3
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	4013      	ands	r3, r2
 80016e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d003      	beq.n	80016fa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80016f2:	69ba      	ldr	r2, [r7, #24]
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016fa:	4a1d      	ldr	r2, [pc, #116]	; (8001770 <HAL_GPIO_Init+0x334>)
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001700:	4b1b      	ldr	r3, [pc, #108]	; (8001770 <HAL_GPIO_Init+0x334>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	43db      	mvns	r3, r3
 800170a:	69ba      	ldr	r2, [r7, #24]
 800170c:	4013      	ands	r3, r2
 800170e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d003      	beq.n	8001724 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	4313      	orrs	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001724:	4a12      	ldr	r2, [pc, #72]	; (8001770 <HAL_GPIO_Init+0x334>)
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	3301      	adds	r3, #1
 800172e:	61fb      	str	r3, [r7, #28]
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	2b0f      	cmp	r3, #15
 8001734:	f67f ae90 	bls.w	8001458 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001738:	bf00      	nop
 800173a:	bf00      	nop
 800173c:	3724      	adds	r7, #36	; 0x24
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	40023800 	.word	0x40023800
 800174c:	40013800 	.word	0x40013800
 8001750:	40020000 	.word	0x40020000
 8001754:	40020400 	.word	0x40020400
 8001758:	40020800 	.word	0x40020800
 800175c:	40020c00 	.word	0x40020c00
 8001760:	40021000 	.word	0x40021000
 8001764:	40021400 	.word	0x40021400
 8001768:	40021800 	.word	0x40021800
 800176c:	40021c00 	.word	0x40021c00
 8001770:	40013c00 	.word	0x40013c00

08001774 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	460b      	mov	r3, r1
 800177e:	807b      	strh	r3, [r7, #2]
 8001780:	4613      	mov	r3, r2
 8001782:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001784:	787b      	ldrb	r3, [r7, #1]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d003      	beq.n	8001792 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800178a:	887a      	ldrh	r2, [r7, #2]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001790:	e003      	b.n	800179a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001792:	887b      	ldrh	r3, [r7, #2]
 8001794:	041a      	lsls	r2, r3, #16
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	619a      	str	r2, [r3, #24]
}
 800179a:	bf00      	nop
 800179c:	370c      	adds	r7, #12
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr

080017a6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017a6:	b480      	push	{r7}
 80017a8:	b085      	sub	sp, #20
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
 80017ae:	460b      	mov	r3, r1
 80017b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017b8:	887a      	ldrh	r2, [r7, #2]
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	4013      	ands	r3, r2
 80017be:	041a      	lsls	r2, r3, #16
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	43d9      	mvns	r1, r3
 80017c4:	887b      	ldrh	r3, [r7, #2]
 80017c6:	400b      	ands	r3, r1
 80017c8:	431a      	orrs	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	619a      	str	r2, [r3, #24]
}
 80017ce:	bf00      	nop
 80017d0:	3714      	adds	r7, #20
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
	...

080017dc <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80017e2:	4b06      	ldr	r3, [pc, #24]	; (80017fc <HAL_PWR_EnableBkUpAccess+0x20>)
 80017e4:	2201      	movs	r2, #1
 80017e6:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80017e8:	4b05      	ldr	r3, [pc, #20]	; (8001800 <HAL_PWR_EnableBkUpAccess+0x24>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 80017ee:	687b      	ldr	r3, [r7, #4]
}
 80017f0:	bf00      	nop
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	420e0020 	.word	0x420e0020
 8001800:	40007000 	.word	0x40007000

08001804 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 800180a:	4b06      	ldr	r3, [pc, #24]	; (8001824 <HAL_PWR_DisableBkUpAccess+0x20>)
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8001810:	4b05      	ldr	r3, [pc, #20]	; (8001828 <HAL_PWR_DisableBkUpAccess+0x24>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8001816:	687b      	ldr	r3, [r7, #4]
}
 8001818:	bf00      	nop
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	420e0020 	.word	0x420e0020
 8001828:	40007000 	.word	0x40007000

0800182c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d101      	bne.n	800183e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e267      	b.n	8001d0e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	2b00      	cmp	r3, #0
 8001848:	d075      	beq.n	8001936 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800184a:	4b88      	ldr	r3, [pc, #544]	; (8001a6c <HAL_RCC_OscConfig+0x240>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f003 030c 	and.w	r3, r3, #12
 8001852:	2b04      	cmp	r3, #4
 8001854:	d00c      	beq.n	8001870 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001856:	4b85      	ldr	r3, [pc, #532]	; (8001a6c <HAL_RCC_OscConfig+0x240>)
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800185e:	2b08      	cmp	r3, #8
 8001860:	d112      	bne.n	8001888 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001862:	4b82      	ldr	r3, [pc, #520]	; (8001a6c <HAL_RCC_OscConfig+0x240>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800186a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800186e:	d10b      	bne.n	8001888 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001870:	4b7e      	ldr	r3, [pc, #504]	; (8001a6c <HAL_RCC_OscConfig+0x240>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d05b      	beq.n	8001934 <HAL_RCC_OscConfig+0x108>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d157      	bne.n	8001934 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e242      	b.n	8001d0e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001890:	d106      	bne.n	80018a0 <HAL_RCC_OscConfig+0x74>
 8001892:	4b76      	ldr	r3, [pc, #472]	; (8001a6c <HAL_RCC_OscConfig+0x240>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a75      	ldr	r2, [pc, #468]	; (8001a6c <HAL_RCC_OscConfig+0x240>)
 8001898:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800189c:	6013      	str	r3, [r2, #0]
 800189e:	e01d      	b.n	80018dc <HAL_RCC_OscConfig+0xb0>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018a8:	d10c      	bne.n	80018c4 <HAL_RCC_OscConfig+0x98>
 80018aa:	4b70      	ldr	r3, [pc, #448]	; (8001a6c <HAL_RCC_OscConfig+0x240>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a6f      	ldr	r2, [pc, #444]	; (8001a6c <HAL_RCC_OscConfig+0x240>)
 80018b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018b4:	6013      	str	r3, [r2, #0]
 80018b6:	4b6d      	ldr	r3, [pc, #436]	; (8001a6c <HAL_RCC_OscConfig+0x240>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a6c      	ldr	r2, [pc, #432]	; (8001a6c <HAL_RCC_OscConfig+0x240>)
 80018bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018c0:	6013      	str	r3, [r2, #0]
 80018c2:	e00b      	b.n	80018dc <HAL_RCC_OscConfig+0xb0>
 80018c4:	4b69      	ldr	r3, [pc, #420]	; (8001a6c <HAL_RCC_OscConfig+0x240>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a68      	ldr	r2, [pc, #416]	; (8001a6c <HAL_RCC_OscConfig+0x240>)
 80018ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018ce:	6013      	str	r3, [r2, #0]
 80018d0:	4b66      	ldr	r3, [pc, #408]	; (8001a6c <HAL_RCC_OscConfig+0x240>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a65      	ldr	r2, [pc, #404]	; (8001a6c <HAL_RCC_OscConfig+0x240>)
 80018d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d013      	beq.n	800190c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e4:	f7ff fbd6 	bl	8001094 <HAL_GetTick>
 80018e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ea:	e008      	b.n	80018fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018ec:	f7ff fbd2 	bl	8001094 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b64      	cmp	r3, #100	; 0x64
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e207      	b.n	8001d0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018fe:	4b5b      	ldr	r3, [pc, #364]	; (8001a6c <HAL_RCC_OscConfig+0x240>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d0f0      	beq.n	80018ec <HAL_RCC_OscConfig+0xc0>
 800190a:	e014      	b.n	8001936 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800190c:	f7ff fbc2 	bl	8001094 <HAL_GetTick>
 8001910:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001912:	e008      	b.n	8001926 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001914:	f7ff fbbe 	bl	8001094 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b64      	cmp	r3, #100	; 0x64
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e1f3      	b.n	8001d0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001926:	4b51      	ldr	r3, [pc, #324]	; (8001a6c <HAL_RCC_OscConfig+0x240>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d1f0      	bne.n	8001914 <HAL_RCC_OscConfig+0xe8>
 8001932:	e000      	b.n	8001936 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001934:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	2b00      	cmp	r3, #0
 8001940:	d063      	beq.n	8001a0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001942:	4b4a      	ldr	r3, [pc, #296]	; (8001a6c <HAL_RCC_OscConfig+0x240>)
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	f003 030c 	and.w	r3, r3, #12
 800194a:	2b00      	cmp	r3, #0
 800194c:	d00b      	beq.n	8001966 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800194e:	4b47      	ldr	r3, [pc, #284]	; (8001a6c <HAL_RCC_OscConfig+0x240>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001956:	2b08      	cmp	r3, #8
 8001958:	d11c      	bne.n	8001994 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800195a:	4b44      	ldr	r3, [pc, #272]	; (8001a6c <HAL_RCC_OscConfig+0x240>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d116      	bne.n	8001994 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001966:	4b41      	ldr	r3, [pc, #260]	; (8001a6c <HAL_RCC_OscConfig+0x240>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0302 	and.w	r3, r3, #2
 800196e:	2b00      	cmp	r3, #0
 8001970:	d005      	beq.n	800197e <HAL_RCC_OscConfig+0x152>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	68db      	ldr	r3, [r3, #12]
 8001976:	2b01      	cmp	r3, #1
 8001978:	d001      	beq.n	800197e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e1c7      	b.n	8001d0e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800197e:	4b3b      	ldr	r3, [pc, #236]	; (8001a6c <HAL_RCC_OscConfig+0x240>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	691b      	ldr	r3, [r3, #16]
 800198a:	00db      	lsls	r3, r3, #3
 800198c:	4937      	ldr	r1, [pc, #220]	; (8001a6c <HAL_RCC_OscConfig+0x240>)
 800198e:	4313      	orrs	r3, r2
 8001990:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001992:	e03a      	b.n	8001a0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d020      	beq.n	80019de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800199c:	4b34      	ldr	r3, [pc, #208]	; (8001a70 <HAL_RCC_OscConfig+0x244>)
 800199e:	2201      	movs	r2, #1
 80019a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a2:	f7ff fb77 	bl	8001094 <HAL_GetTick>
 80019a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019a8:	e008      	b.n	80019bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019aa:	f7ff fb73 	bl	8001094 <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d901      	bls.n	80019bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80019b8:	2303      	movs	r3, #3
 80019ba:	e1a8      	b.n	8001d0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019bc:	4b2b      	ldr	r3, [pc, #172]	; (8001a6c <HAL_RCC_OscConfig+0x240>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0302 	and.w	r3, r3, #2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d0f0      	beq.n	80019aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019c8:	4b28      	ldr	r3, [pc, #160]	; (8001a6c <HAL_RCC_OscConfig+0x240>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	691b      	ldr	r3, [r3, #16]
 80019d4:	00db      	lsls	r3, r3, #3
 80019d6:	4925      	ldr	r1, [pc, #148]	; (8001a6c <HAL_RCC_OscConfig+0x240>)
 80019d8:	4313      	orrs	r3, r2
 80019da:	600b      	str	r3, [r1, #0]
 80019dc:	e015      	b.n	8001a0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019de:	4b24      	ldr	r3, [pc, #144]	; (8001a70 <HAL_RCC_OscConfig+0x244>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e4:	f7ff fb56 	bl	8001094 <HAL_GetTick>
 80019e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019ec:	f7ff fb52 	bl	8001094 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e187      	b.n	8001d0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019fe:	4b1b      	ldr	r3, [pc, #108]	; (8001a6c <HAL_RCC_OscConfig+0x240>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d1f0      	bne.n	80019ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0308 	and.w	r3, r3, #8
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d036      	beq.n	8001a84 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	695b      	ldr	r3, [r3, #20]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d016      	beq.n	8001a4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a1e:	4b15      	ldr	r3, [pc, #84]	; (8001a74 <HAL_RCC_OscConfig+0x248>)
 8001a20:	2201      	movs	r2, #1
 8001a22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a24:	f7ff fb36 	bl	8001094 <HAL_GetTick>
 8001a28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a2a:	e008      	b.n	8001a3e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a2c:	f7ff fb32 	bl	8001094 <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e167      	b.n	8001d0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a3e:	4b0b      	ldr	r3, [pc, #44]	; (8001a6c <HAL_RCC_OscConfig+0x240>)
 8001a40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d0f0      	beq.n	8001a2c <HAL_RCC_OscConfig+0x200>
 8001a4a:	e01b      	b.n	8001a84 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a4c:	4b09      	ldr	r3, [pc, #36]	; (8001a74 <HAL_RCC_OscConfig+0x248>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a52:	f7ff fb1f 	bl	8001094 <HAL_GetTick>
 8001a56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a58:	e00e      	b.n	8001a78 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a5a:	f7ff fb1b 	bl	8001094 <HAL_GetTick>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d907      	bls.n	8001a78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e150      	b.n	8001d0e <HAL_RCC_OscConfig+0x4e2>
 8001a6c:	40023800 	.word	0x40023800
 8001a70:	42470000 	.word	0x42470000
 8001a74:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a78:	4b88      	ldr	r3, [pc, #544]	; (8001c9c <HAL_RCC_OscConfig+0x470>)
 8001a7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d1ea      	bne.n	8001a5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0304 	and.w	r3, r3, #4
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	f000 8097 	beq.w	8001bc0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a92:	2300      	movs	r3, #0
 8001a94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a96:	4b81      	ldr	r3, [pc, #516]	; (8001c9c <HAL_RCC_OscConfig+0x470>)
 8001a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d10f      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	60bb      	str	r3, [r7, #8]
 8001aa6:	4b7d      	ldr	r3, [pc, #500]	; (8001c9c <HAL_RCC_OscConfig+0x470>)
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aaa:	4a7c      	ldr	r2, [pc, #496]	; (8001c9c <HAL_RCC_OscConfig+0x470>)
 8001aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ab0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ab2:	4b7a      	ldr	r3, [pc, #488]	; (8001c9c <HAL_RCC_OscConfig+0x470>)
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aba:	60bb      	str	r3, [r7, #8]
 8001abc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ac2:	4b77      	ldr	r3, [pc, #476]	; (8001ca0 <HAL_RCC_OscConfig+0x474>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d118      	bne.n	8001b00 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ace:	4b74      	ldr	r3, [pc, #464]	; (8001ca0 <HAL_RCC_OscConfig+0x474>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a73      	ldr	r2, [pc, #460]	; (8001ca0 <HAL_RCC_OscConfig+0x474>)
 8001ad4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ad8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ada:	f7ff fadb 	bl	8001094 <HAL_GetTick>
 8001ade:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae0:	e008      	b.n	8001af4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ae2:	f7ff fad7 	bl	8001094 <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d901      	bls.n	8001af4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e10c      	b.n	8001d0e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001af4:	4b6a      	ldr	r3, [pc, #424]	; (8001ca0 <HAL_RCC_OscConfig+0x474>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d0f0      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d106      	bne.n	8001b16 <HAL_RCC_OscConfig+0x2ea>
 8001b08:	4b64      	ldr	r3, [pc, #400]	; (8001c9c <HAL_RCC_OscConfig+0x470>)
 8001b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b0c:	4a63      	ldr	r2, [pc, #396]	; (8001c9c <HAL_RCC_OscConfig+0x470>)
 8001b0e:	f043 0301 	orr.w	r3, r3, #1
 8001b12:	6713      	str	r3, [r2, #112]	; 0x70
 8001b14:	e01c      	b.n	8001b50 <HAL_RCC_OscConfig+0x324>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	2b05      	cmp	r3, #5
 8001b1c:	d10c      	bne.n	8001b38 <HAL_RCC_OscConfig+0x30c>
 8001b1e:	4b5f      	ldr	r3, [pc, #380]	; (8001c9c <HAL_RCC_OscConfig+0x470>)
 8001b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b22:	4a5e      	ldr	r2, [pc, #376]	; (8001c9c <HAL_RCC_OscConfig+0x470>)
 8001b24:	f043 0304 	orr.w	r3, r3, #4
 8001b28:	6713      	str	r3, [r2, #112]	; 0x70
 8001b2a:	4b5c      	ldr	r3, [pc, #368]	; (8001c9c <HAL_RCC_OscConfig+0x470>)
 8001b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b2e:	4a5b      	ldr	r2, [pc, #364]	; (8001c9c <HAL_RCC_OscConfig+0x470>)
 8001b30:	f043 0301 	orr.w	r3, r3, #1
 8001b34:	6713      	str	r3, [r2, #112]	; 0x70
 8001b36:	e00b      	b.n	8001b50 <HAL_RCC_OscConfig+0x324>
 8001b38:	4b58      	ldr	r3, [pc, #352]	; (8001c9c <HAL_RCC_OscConfig+0x470>)
 8001b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b3c:	4a57      	ldr	r2, [pc, #348]	; (8001c9c <HAL_RCC_OscConfig+0x470>)
 8001b3e:	f023 0301 	bic.w	r3, r3, #1
 8001b42:	6713      	str	r3, [r2, #112]	; 0x70
 8001b44:	4b55      	ldr	r3, [pc, #340]	; (8001c9c <HAL_RCC_OscConfig+0x470>)
 8001b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b48:	4a54      	ldr	r2, [pc, #336]	; (8001c9c <HAL_RCC_OscConfig+0x470>)
 8001b4a:	f023 0304 	bic.w	r3, r3, #4
 8001b4e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d015      	beq.n	8001b84 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b58:	f7ff fa9c 	bl	8001094 <HAL_GetTick>
 8001b5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b5e:	e00a      	b.n	8001b76 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b60:	f7ff fa98 	bl	8001094 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e0cb      	b.n	8001d0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b76:	4b49      	ldr	r3, [pc, #292]	; (8001c9c <HAL_RCC_OscConfig+0x470>)
 8001b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d0ee      	beq.n	8001b60 <HAL_RCC_OscConfig+0x334>
 8001b82:	e014      	b.n	8001bae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b84:	f7ff fa86 	bl	8001094 <HAL_GetTick>
 8001b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b8a:	e00a      	b.n	8001ba2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b8c:	f7ff fa82 	bl	8001094 <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e0b5      	b.n	8001d0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ba2:	4b3e      	ldr	r3, [pc, #248]	; (8001c9c <HAL_RCC_OscConfig+0x470>)
 8001ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d1ee      	bne.n	8001b8c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bae:	7dfb      	ldrb	r3, [r7, #23]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d105      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bb4:	4b39      	ldr	r3, [pc, #228]	; (8001c9c <HAL_RCC_OscConfig+0x470>)
 8001bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb8:	4a38      	ldr	r2, [pc, #224]	; (8001c9c <HAL_RCC_OscConfig+0x470>)
 8001bba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bbe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	f000 80a1 	beq.w	8001d0c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bca:	4b34      	ldr	r3, [pc, #208]	; (8001c9c <HAL_RCC_OscConfig+0x470>)
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	f003 030c 	and.w	r3, r3, #12
 8001bd2:	2b08      	cmp	r3, #8
 8001bd4:	d05c      	beq.n	8001c90 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	699b      	ldr	r3, [r3, #24]
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d141      	bne.n	8001c62 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bde:	4b31      	ldr	r3, [pc, #196]	; (8001ca4 <HAL_RCC_OscConfig+0x478>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be4:	f7ff fa56 	bl	8001094 <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bec:	f7ff fa52 	bl	8001094 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e087      	b.n	8001d0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bfe:	4b27      	ldr	r3, [pc, #156]	; (8001c9c <HAL_RCC_OscConfig+0x470>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d1f0      	bne.n	8001bec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	69da      	ldr	r2, [r3, #28]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a1b      	ldr	r3, [r3, #32]
 8001c12:	431a      	orrs	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c18:	019b      	lsls	r3, r3, #6
 8001c1a:	431a      	orrs	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c20:	085b      	lsrs	r3, r3, #1
 8001c22:	3b01      	subs	r3, #1
 8001c24:	041b      	lsls	r3, r3, #16
 8001c26:	431a      	orrs	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c2c:	061b      	lsls	r3, r3, #24
 8001c2e:	491b      	ldr	r1, [pc, #108]	; (8001c9c <HAL_RCC_OscConfig+0x470>)
 8001c30:	4313      	orrs	r3, r2
 8001c32:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c34:	4b1b      	ldr	r3, [pc, #108]	; (8001ca4 <HAL_RCC_OscConfig+0x478>)
 8001c36:	2201      	movs	r2, #1
 8001c38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c3a:	f7ff fa2b 	bl	8001094 <HAL_GetTick>
 8001c3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c40:	e008      	b.n	8001c54 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c42:	f7ff fa27 	bl	8001094 <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d901      	bls.n	8001c54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e05c      	b.n	8001d0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c54:	4b11      	ldr	r3, [pc, #68]	; (8001c9c <HAL_RCC_OscConfig+0x470>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d0f0      	beq.n	8001c42 <HAL_RCC_OscConfig+0x416>
 8001c60:	e054      	b.n	8001d0c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c62:	4b10      	ldr	r3, [pc, #64]	; (8001ca4 <HAL_RCC_OscConfig+0x478>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c68:	f7ff fa14 	bl	8001094 <HAL_GetTick>
 8001c6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c6e:	e008      	b.n	8001c82 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c70:	f7ff fa10 	bl	8001094 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e045      	b.n	8001d0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c82:	4b06      	ldr	r3, [pc, #24]	; (8001c9c <HAL_RCC_OscConfig+0x470>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d1f0      	bne.n	8001c70 <HAL_RCC_OscConfig+0x444>
 8001c8e:	e03d      	b.n	8001d0c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	699b      	ldr	r3, [r3, #24]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d107      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e038      	b.n	8001d0e <HAL_RCC_OscConfig+0x4e2>
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	40007000 	.word	0x40007000
 8001ca4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ca8:	4b1b      	ldr	r3, [pc, #108]	; (8001d18 <HAL_RCC_OscConfig+0x4ec>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	699b      	ldr	r3, [r3, #24]
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d028      	beq.n	8001d08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d121      	bne.n	8001d08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d11a      	bne.n	8001d08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cd2:	68fa      	ldr	r2, [r7, #12]
 8001cd4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001cd8:	4013      	ands	r3, r2
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001cde:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d111      	bne.n	8001d08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cee:	085b      	lsrs	r3, r3, #1
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d107      	bne.n	8001d08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d001      	beq.n	8001d0c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e000      	b.n	8001d0e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3718      	adds	r7, #24
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	40023800 	.word	0x40023800

08001d1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d101      	bne.n	8001d30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e0cc      	b.n	8001eca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d30:	4b68      	ldr	r3, [pc, #416]	; (8001ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0307 	and.w	r3, r3, #7
 8001d38:	683a      	ldr	r2, [r7, #0]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d90c      	bls.n	8001d58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d3e:	4b65      	ldr	r3, [pc, #404]	; (8001ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d40:	683a      	ldr	r2, [r7, #0]
 8001d42:	b2d2      	uxtb	r2, r2
 8001d44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d46:	4b63      	ldr	r3, [pc, #396]	; (8001ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0307 	and.w	r3, r3, #7
 8001d4e:	683a      	ldr	r2, [r7, #0]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d001      	beq.n	8001d58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e0b8      	b.n	8001eca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0302 	and.w	r3, r3, #2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d020      	beq.n	8001da6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0304 	and.w	r3, r3, #4
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d005      	beq.n	8001d7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d70:	4b59      	ldr	r3, [pc, #356]	; (8001ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	4a58      	ldr	r2, [pc, #352]	; (8001ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0308 	and.w	r3, r3, #8
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d005      	beq.n	8001d94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d88:	4b53      	ldr	r3, [pc, #332]	; (8001ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	4a52      	ldr	r2, [pc, #328]	; (8001ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d94:	4b50      	ldr	r3, [pc, #320]	; (8001ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	494d      	ldr	r1, [pc, #308]	; (8001ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8001da2:	4313      	orrs	r3, r2
 8001da4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d044      	beq.n	8001e3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d107      	bne.n	8001dca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dba:	4b47      	ldr	r3, [pc, #284]	; (8001ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d119      	bne.n	8001dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e07f      	b.n	8001eca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d003      	beq.n	8001dda <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dd6:	2b03      	cmp	r3, #3
 8001dd8:	d107      	bne.n	8001dea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dda:	4b3f      	ldr	r3, [pc, #252]	; (8001ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d109      	bne.n	8001dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e06f      	b.n	8001eca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dea:	4b3b      	ldr	r3, [pc, #236]	; (8001ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d101      	bne.n	8001dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e067      	b.n	8001eca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dfa:	4b37      	ldr	r3, [pc, #220]	; (8001ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f023 0203 	bic.w	r2, r3, #3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	4934      	ldr	r1, [pc, #208]	; (8001ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e0c:	f7ff f942 	bl	8001094 <HAL_GetTick>
 8001e10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e12:	e00a      	b.n	8001e2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e14:	f7ff f93e 	bl	8001094 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e04f      	b.n	8001eca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e2a:	4b2b      	ldr	r3, [pc, #172]	; (8001ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f003 020c 	and.w	r2, r3, #12
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d1eb      	bne.n	8001e14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e3c:	4b25      	ldr	r3, [pc, #148]	; (8001ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0307 	and.w	r3, r3, #7
 8001e44:	683a      	ldr	r2, [r7, #0]
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d20c      	bcs.n	8001e64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e4a:	4b22      	ldr	r3, [pc, #136]	; (8001ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e4c:	683a      	ldr	r2, [r7, #0]
 8001e4e:	b2d2      	uxtb	r2, r2
 8001e50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e52:	4b20      	ldr	r3, [pc, #128]	; (8001ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0307 	and.w	r3, r3, #7
 8001e5a:	683a      	ldr	r2, [r7, #0]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d001      	beq.n	8001e64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e032      	b.n	8001eca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0304 	and.w	r3, r3, #4
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d008      	beq.n	8001e82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e70:	4b19      	ldr	r3, [pc, #100]	; (8001ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	4916      	ldr	r1, [pc, #88]	; (8001ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0308 	and.w	r3, r3, #8
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d009      	beq.n	8001ea2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e8e:	4b12      	ldr	r3, [pc, #72]	; (8001ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	691b      	ldr	r3, [r3, #16]
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	490e      	ldr	r1, [pc, #56]	; (8001ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ea2:	f000 f821 	bl	8001ee8 <HAL_RCC_GetSysClockFreq>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	4b0b      	ldr	r3, [pc, #44]	; (8001ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	091b      	lsrs	r3, r3, #4
 8001eae:	f003 030f 	and.w	r3, r3, #15
 8001eb2:	490a      	ldr	r1, [pc, #40]	; (8001edc <HAL_RCC_ClockConfig+0x1c0>)
 8001eb4:	5ccb      	ldrb	r3, [r1, r3]
 8001eb6:	fa22 f303 	lsr.w	r3, r2, r3
 8001eba:	4a09      	ldr	r2, [pc, #36]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ebc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ebe:	4b09      	ldr	r3, [pc, #36]	; (8001ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff f8a2 	bl	800100c <HAL_InitTick>

  return HAL_OK;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3710      	adds	r7, #16
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	40023c00 	.word	0x40023c00
 8001ed8:	40023800 	.word	0x40023800
 8001edc:	080079d8 	.word	0x080079d8
 8001ee0:	20000000 	.word	0x20000000
 8001ee4:	20000004 	.word	0x20000004

08001ee8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ee8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001eec:	b090      	sub	sp, #64	; 0x40
 8001eee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	637b      	str	r3, [r7, #52]	; 0x34
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ef8:	2300      	movs	r3, #0
 8001efa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001efc:	2300      	movs	r3, #0
 8001efe:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f00:	4b59      	ldr	r3, [pc, #356]	; (8002068 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f003 030c 	and.w	r3, r3, #12
 8001f08:	2b08      	cmp	r3, #8
 8001f0a:	d00d      	beq.n	8001f28 <HAL_RCC_GetSysClockFreq+0x40>
 8001f0c:	2b08      	cmp	r3, #8
 8001f0e:	f200 80a1 	bhi.w	8002054 <HAL_RCC_GetSysClockFreq+0x16c>
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d002      	beq.n	8001f1c <HAL_RCC_GetSysClockFreq+0x34>
 8001f16:	2b04      	cmp	r3, #4
 8001f18:	d003      	beq.n	8001f22 <HAL_RCC_GetSysClockFreq+0x3a>
 8001f1a:	e09b      	b.n	8002054 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f1c:	4b53      	ldr	r3, [pc, #332]	; (800206c <HAL_RCC_GetSysClockFreq+0x184>)
 8001f1e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001f20:	e09b      	b.n	800205a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f22:	4b53      	ldr	r3, [pc, #332]	; (8002070 <HAL_RCC_GetSysClockFreq+0x188>)
 8001f24:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001f26:	e098      	b.n	800205a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f28:	4b4f      	ldr	r3, [pc, #316]	; (8002068 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f30:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f32:	4b4d      	ldr	r3, [pc, #308]	; (8002068 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d028      	beq.n	8001f90 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f3e:	4b4a      	ldr	r3, [pc, #296]	; (8002068 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	099b      	lsrs	r3, r3, #6
 8001f44:	2200      	movs	r2, #0
 8001f46:	623b      	str	r3, [r7, #32]
 8001f48:	627a      	str	r2, [r7, #36]	; 0x24
 8001f4a:	6a3b      	ldr	r3, [r7, #32]
 8001f4c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001f50:	2100      	movs	r1, #0
 8001f52:	4b47      	ldr	r3, [pc, #284]	; (8002070 <HAL_RCC_GetSysClockFreq+0x188>)
 8001f54:	fb03 f201 	mul.w	r2, r3, r1
 8001f58:	2300      	movs	r3, #0
 8001f5a:	fb00 f303 	mul.w	r3, r0, r3
 8001f5e:	4413      	add	r3, r2
 8001f60:	4a43      	ldr	r2, [pc, #268]	; (8002070 <HAL_RCC_GetSysClockFreq+0x188>)
 8001f62:	fba0 1202 	umull	r1, r2, r0, r2
 8001f66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001f68:	460a      	mov	r2, r1
 8001f6a:	62ba      	str	r2, [r7, #40]	; 0x28
 8001f6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f6e:	4413      	add	r3, r2
 8001f70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f74:	2200      	movs	r2, #0
 8001f76:	61bb      	str	r3, [r7, #24]
 8001f78:	61fa      	str	r2, [r7, #28]
 8001f7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f7e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001f82:	f7fe f975 	bl	8000270 <__aeabi_uldivmod>
 8001f86:	4602      	mov	r2, r0
 8001f88:	460b      	mov	r3, r1
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f8e:	e053      	b.n	8002038 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f90:	4b35      	ldr	r3, [pc, #212]	; (8002068 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	099b      	lsrs	r3, r3, #6
 8001f96:	2200      	movs	r2, #0
 8001f98:	613b      	str	r3, [r7, #16]
 8001f9a:	617a      	str	r2, [r7, #20]
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001fa2:	f04f 0b00 	mov.w	fp, #0
 8001fa6:	4652      	mov	r2, sl
 8001fa8:	465b      	mov	r3, fp
 8001faa:	f04f 0000 	mov.w	r0, #0
 8001fae:	f04f 0100 	mov.w	r1, #0
 8001fb2:	0159      	lsls	r1, r3, #5
 8001fb4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fb8:	0150      	lsls	r0, r2, #5
 8001fba:	4602      	mov	r2, r0
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	ebb2 080a 	subs.w	r8, r2, sl
 8001fc2:	eb63 090b 	sbc.w	r9, r3, fp
 8001fc6:	f04f 0200 	mov.w	r2, #0
 8001fca:	f04f 0300 	mov.w	r3, #0
 8001fce:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001fd2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001fd6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001fda:	ebb2 0408 	subs.w	r4, r2, r8
 8001fde:	eb63 0509 	sbc.w	r5, r3, r9
 8001fe2:	f04f 0200 	mov.w	r2, #0
 8001fe6:	f04f 0300 	mov.w	r3, #0
 8001fea:	00eb      	lsls	r3, r5, #3
 8001fec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ff0:	00e2      	lsls	r2, r4, #3
 8001ff2:	4614      	mov	r4, r2
 8001ff4:	461d      	mov	r5, r3
 8001ff6:	eb14 030a 	adds.w	r3, r4, sl
 8001ffa:	603b      	str	r3, [r7, #0]
 8001ffc:	eb45 030b 	adc.w	r3, r5, fp
 8002000:	607b      	str	r3, [r7, #4]
 8002002:	f04f 0200 	mov.w	r2, #0
 8002006:	f04f 0300 	mov.w	r3, #0
 800200a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800200e:	4629      	mov	r1, r5
 8002010:	028b      	lsls	r3, r1, #10
 8002012:	4621      	mov	r1, r4
 8002014:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002018:	4621      	mov	r1, r4
 800201a:	028a      	lsls	r2, r1, #10
 800201c:	4610      	mov	r0, r2
 800201e:	4619      	mov	r1, r3
 8002020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002022:	2200      	movs	r2, #0
 8002024:	60bb      	str	r3, [r7, #8]
 8002026:	60fa      	str	r2, [r7, #12]
 8002028:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800202c:	f7fe f920 	bl	8000270 <__aeabi_uldivmod>
 8002030:	4602      	mov	r2, r0
 8002032:	460b      	mov	r3, r1
 8002034:	4613      	mov	r3, r2
 8002036:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002038:	4b0b      	ldr	r3, [pc, #44]	; (8002068 <HAL_RCC_GetSysClockFreq+0x180>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	0c1b      	lsrs	r3, r3, #16
 800203e:	f003 0303 	and.w	r3, r3, #3
 8002042:	3301      	adds	r3, #1
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002048:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800204a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800204c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002050:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002052:	e002      	b.n	800205a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002054:	4b05      	ldr	r3, [pc, #20]	; (800206c <HAL_RCC_GetSysClockFreq+0x184>)
 8002056:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002058:	bf00      	nop
    }
  }
  return sysclockfreq;
 800205a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800205c:	4618      	mov	r0, r3
 800205e:	3740      	adds	r7, #64	; 0x40
 8002060:	46bd      	mov	sp, r7
 8002062:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002066:	bf00      	nop
 8002068:	40023800 	.word	0x40023800
 800206c:	00f42400 	.word	0x00f42400
 8002070:	017d7840 	.word	0x017d7840

08002074 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002078:	4b03      	ldr	r3, [pc, #12]	; (8002088 <HAL_RCC_GetHCLKFreq+0x14>)
 800207a:	681b      	ldr	r3, [r3, #0]
}
 800207c:	4618      	mov	r0, r3
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	20000000 	.word	0x20000000

0800208c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002090:	f7ff fff0 	bl	8002074 <HAL_RCC_GetHCLKFreq>
 8002094:	4602      	mov	r2, r0
 8002096:	4b05      	ldr	r3, [pc, #20]	; (80020ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	0a9b      	lsrs	r3, r3, #10
 800209c:	f003 0307 	and.w	r3, r3, #7
 80020a0:	4903      	ldr	r1, [pc, #12]	; (80020b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020a2:	5ccb      	ldrb	r3, [r1, r3]
 80020a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	40023800 	.word	0x40023800
 80020b0:	080079e8 	.word	0x080079e8

080020b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80020b8:	f7ff ffdc 	bl	8002074 <HAL_RCC_GetHCLKFreq>
 80020bc:	4602      	mov	r2, r0
 80020be:	4b05      	ldr	r3, [pc, #20]	; (80020d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	0b5b      	lsrs	r3, r3, #13
 80020c4:	f003 0307 	and.w	r3, r3, #7
 80020c8:	4903      	ldr	r1, [pc, #12]	; (80020d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020ca:	5ccb      	ldrb	r3, [r1, r3]
 80020cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40023800 	.word	0x40023800
 80020d8:	080079e8 	.word	0x080079e8

080020dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d101      	bne.n	80020ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e041      	b.n	8002172 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d106      	bne.n	8002108 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f7fe fe28 	bl	8000d58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2202      	movs	r2, #2
 800210c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	3304      	adds	r3, #4
 8002118:	4619      	mov	r1, r3
 800211a:	4610      	mov	r0, r2
 800211c:	f000 fc0c 	bl	8002938 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2201      	movs	r2, #1
 800212c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2201      	movs	r2, #1
 8002164:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2201      	movs	r2, #1
 800216c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800217a:	b580      	push	{r7, lr}
 800217c:	b082      	sub	sp, #8
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d101      	bne.n	800218c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e041      	b.n	8002210 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002192:	b2db      	uxtb	r3, r3
 8002194:	2b00      	cmp	r3, #0
 8002196:	d106      	bne.n	80021a6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f000 f839 	bl	8002218 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2202      	movs	r2, #2
 80021aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	3304      	adds	r3, #4
 80021b6:	4619      	mov	r1, r3
 80021b8:	4610      	mov	r0, r2
 80021ba:	f000 fbbd 	bl	8002938 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2201      	movs	r2, #1
 80021c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2201      	movs	r2, #1
 80021ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2201      	movs	r2, #1
 80021d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2201      	movs	r2, #1
 80021da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2201      	movs	r2, #1
 80021e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2201      	movs	r2, #1
 80021ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2201      	movs	r2, #1
 80021f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2201      	movs	r2, #1
 80021fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2201      	movs	r2, #1
 8002202:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2201      	movs	r2, #1
 800220a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800220e:	2300      	movs	r3, #0
}
 8002210:	4618      	mov	r0, r3
 8002212:	3708      	adds	r7, #8
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d109      	bne.n	8002250 <HAL_TIM_PWM_Start+0x24>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002242:	b2db      	uxtb	r3, r3
 8002244:	2b01      	cmp	r3, #1
 8002246:	bf14      	ite	ne
 8002248:	2301      	movne	r3, #1
 800224a:	2300      	moveq	r3, #0
 800224c:	b2db      	uxtb	r3, r3
 800224e:	e022      	b.n	8002296 <HAL_TIM_PWM_Start+0x6a>
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	2b04      	cmp	r3, #4
 8002254:	d109      	bne.n	800226a <HAL_TIM_PWM_Start+0x3e>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800225c:	b2db      	uxtb	r3, r3
 800225e:	2b01      	cmp	r3, #1
 8002260:	bf14      	ite	ne
 8002262:	2301      	movne	r3, #1
 8002264:	2300      	moveq	r3, #0
 8002266:	b2db      	uxtb	r3, r3
 8002268:	e015      	b.n	8002296 <HAL_TIM_PWM_Start+0x6a>
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	2b08      	cmp	r3, #8
 800226e:	d109      	bne.n	8002284 <HAL_TIM_PWM_Start+0x58>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002276:	b2db      	uxtb	r3, r3
 8002278:	2b01      	cmp	r3, #1
 800227a:	bf14      	ite	ne
 800227c:	2301      	movne	r3, #1
 800227e:	2300      	moveq	r3, #0
 8002280:	b2db      	uxtb	r3, r3
 8002282:	e008      	b.n	8002296 <HAL_TIM_PWM_Start+0x6a>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800228a:	b2db      	uxtb	r3, r3
 800228c:	2b01      	cmp	r3, #1
 800228e:	bf14      	ite	ne
 8002290:	2301      	movne	r3, #1
 8002292:	2300      	moveq	r3, #0
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e07c      	b.n	8002398 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d104      	bne.n	80022ae <HAL_TIM_PWM_Start+0x82>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2202      	movs	r2, #2
 80022a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022ac:	e013      	b.n	80022d6 <HAL_TIM_PWM_Start+0xaa>
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	2b04      	cmp	r3, #4
 80022b2:	d104      	bne.n	80022be <HAL_TIM_PWM_Start+0x92>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2202      	movs	r2, #2
 80022b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022bc:	e00b      	b.n	80022d6 <HAL_TIM_PWM_Start+0xaa>
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	2b08      	cmp	r3, #8
 80022c2:	d104      	bne.n	80022ce <HAL_TIM_PWM_Start+0xa2>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2202      	movs	r2, #2
 80022c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022cc:	e003      	b.n	80022d6 <HAL_TIM_PWM_Start+0xaa>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2202      	movs	r2, #2
 80022d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2201      	movs	r2, #1
 80022dc:	6839      	ldr	r1, [r7, #0]
 80022de:	4618      	mov	r0, r3
 80022e0:	f000 fe14 	bl	8002f0c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a2d      	ldr	r2, [pc, #180]	; (80023a0 <HAL_TIM_PWM_Start+0x174>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d004      	beq.n	80022f8 <HAL_TIM_PWM_Start+0xcc>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a2c      	ldr	r2, [pc, #176]	; (80023a4 <HAL_TIM_PWM_Start+0x178>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d101      	bne.n	80022fc <HAL_TIM_PWM_Start+0xd0>
 80022f8:	2301      	movs	r3, #1
 80022fa:	e000      	b.n	80022fe <HAL_TIM_PWM_Start+0xd2>
 80022fc:	2300      	movs	r3, #0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d007      	beq.n	8002312 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002310:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a22      	ldr	r2, [pc, #136]	; (80023a0 <HAL_TIM_PWM_Start+0x174>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d022      	beq.n	8002362 <HAL_TIM_PWM_Start+0x136>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002324:	d01d      	beq.n	8002362 <HAL_TIM_PWM_Start+0x136>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a1f      	ldr	r2, [pc, #124]	; (80023a8 <HAL_TIM_PWM_Start+0x17c>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d018      	beq.n	8002362 <HAL_TIM_PWM_Start+0x136>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a1d      	ldr	r2, [pc, #116]	; (80023ac <HAL_TIM_PWM_Start+0x180>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d013      	beq.n	8002362 <HAL_TIM_PWM_Start+0x136>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a1c      	ldr	r2, [pc, #112]	; (80023b0 <HAL_TIM_PWM_Start+0x184>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d00e      	beq.n	8002362 <HAL_TIM_PWM_Start+0x136>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a16      	ldr	r2, [pc, #88]	; (80023a4 <HAL_TIM_PWM_Start+0x178>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d009      	beq.n	8002362 <HAL_TIM_PWM_Start+0x136>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a18      	ldr	r2, [pc, #96]	; (80023b4 <HAL_TIM_PWM_Start+0x188>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d004      	beq.n	8002362 <HAL_TIM_PWM_Start+0x136>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a16      	ldr	r2, [pc, #88]	; (80023b8 <HAL_TIM_PWM_Start+0x18c>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d111      	bne.n	8002386 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	f003 0307 	and.w	r3, r3, #7
 800236c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2b06      	cmp	r3, #6
 8002372:	d010      	beq.n	8002396 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f042 0201 	orr.w	r2, r2, #1
 8002382:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002384:	e007      	b.n	8002396 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f042 0201 	orr.w	r2, r2, #1
 8002394:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002396:	2300      	movs	r3, #0
}
 8002398:	4618      	mov	r0, r3
 800239a:	3710      	adds	r7, #16
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	40010000 	.word	0x40010000
 80023a4:	40010400 	.word	0x40010400
 80023a8:	40000400 	.word	0x40000400
 80023ac:	40000800 	.word	0x40000800
 80023b0:	40000c00 	.word	0x40000c00
 80023b4:	40014000 	.word	0x40014000
 80023b8:	40001800 	.word	0x40001800

080023bc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b086      	sub	sp, #24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d101      	bne.n	80023d0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e097      	b.n	8002500 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d106      	bne.n	80023ea <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f7fe fc51 	bl	8000c8c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2202      	movs	r2, #2
 80023ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	6812      	ldr	r2, [r2, #0]
 80023fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002400:	f023 0307 	bic.w	r3, r3, #7
 8002404:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	3304      	adds	r3, #4
 800240e:	4619      	mov	r1, r3
 8002410:	4610      	mov	r0, r2
 8002412:	f000 fa91 	bl	8002938 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	6a1b      	ldr	r3, [r3, #32]
 800242c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	697a      	ldr	r2, [r7, #20]
 8002434:	4313      	orrs	r3, r2
 8002436:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800243e:	f023 0303 	bic.w	r3, r3, #3
 8002442:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	689a      	ldr	r2, [r3, #8]
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	699b      	ldr	r3, [r3, #24]
 800244c:	021b      	lsls	r3, r3, #8
 800244e:	4313      	orrs	r3, r2
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	4313      	orrs	r3, r2
 8002454:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800245c:	f023 030c 	bic.w	r3, r3, #12
 8002460:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002468:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800246c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	68da      	ldr	r2, [r3, #12]
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	69db      	ldr	r3, [r3, #28]
 8002476:	021b      	lsls	r3, r3, #8
 8002478:	4313      	orrs	r3, r2
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	4313      	orrs	r3, r2
 800247e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	011a      	lsls	r2, r3, #4
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	6a1b      	ldr	r3, [r3, #32]
 800248a:	031b      	lsls	r3, r3, #12
 800248c:	4313      	orrs	r3, r2
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	4313      	orrs	r3, r2
 8002492:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800249a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80024a2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685a      	ldr	r2, [r3, #4]
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	695b      	ldr	r3, [r3, #20]
 80024ac:	011b      	lsls	r3, r3, #4
 80024ae:	4313      	orrs	r3, r2
 80024b0:	68fa      	ldr	r2, [r7, #12]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	697a      	ldr	r2, [r7, #20]
 80024bc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	68fa      	ldr	r2, [r7, #12]
 80024cc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2201      	movs	r2, #1
 80024d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2201      	movs	r2, #1
 80024da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2201      	movs	r2, #1
 80024e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2201      	movs	r2, #1
 80024ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2201      	movs	r2, #1
 80024f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2201      	movs	r2, #1
 80024fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024fe:	2300      	movs	r3, #0
}
 8002500:	4618      	mov	r0, r3
 8002502:	3718      	adds	r7, #24
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}

08002508 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002518:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002520:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002528:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002530:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d110      	bne.n	800255a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002538:	7bfb      	ldrb	r3, [r7, #15]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d102      	bne.n	8002544 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800253e:	7b7b      	ldrb	r3, [r7, #13]
 8002540:	2b01      	cmp	r3, #1
 8002542:	d001      	beq.n	8002548 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e069      	b.n	800261c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2202      	movs	r2, #2
 800254c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2202      	movs	r2, #2
 8002554:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002558:	e031      	b.n	80025be <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	2b04      	cmp	r3, #4
 800255e:	d110      	bne.n	8002582 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002560:	7bbb      	ldrb	r3, [r7, #14]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d102      	bne.n	800256c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002566:	7b3b      	ldrb	r3, [r7, #12]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d001      	beq.n	8002570 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e055      	b.n	800261c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2202      	movs	r2, #2
 8002574:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2202      	movs	r2, #2
 800257c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002580:	e01d      	b.n	80025be <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002582:	7bfb      	ldrb	r3, [r7, #15]
 8002584:	2b01      	cmp	r3, #1
 8002586:	d108      	bne.n	800259a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002588:	7bbb      	ldrb	r3, [r7, #14]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d105      	bne.n	800259a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800258e:	7b7b      	ldrb	r3, [r7, #13]
 8002590:	2b01      	cmp	r3, #1
 8002592:	d102      	bne.n	800259a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002594:	7b3b      	ldrb	r3, [r7, #12]
 8002596:	2b01      	cmp	r3, #1
 8002598:	d001      	beq.n	800259e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e03e      	b.n	800261c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2202      	movs	r2, #2
 80025a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2202      	movs	r2, #2
 80025aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2202      	movs	r2, #2
 80025b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2202      	movs	r2, #2
 80025ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d003      	beq.n	80025cc <HAL_TIM_Encoder_Start+0xc4>
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	2b04      	cmp	r3, #4
 80025c8:	d008      	beq.n	80025dc <HAL_TIM_Encoder_Start+0xd4>
 80025ca:	e00f      	b.n	80025ec <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2201      	movs	r2, #1
 80025d2:	2100      	movs	r1, #0
 80025d4:	4618      	mov	r0, r3
 80025d6:	f000 fc99 	bl	8002f0c <TIM_CCxChannelCmd>
      break;
 80025da:	e016      	b.n	800260a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2201      	movs	r2, #1
 80025e2:	2104      	movs	r1, #4
 80025e4:	4618      	mov	r0, r3
 80025e6:	f000 fc91 	bl	8002f0c <TIM_CCxChannelCmd>
      break;
 80025ea:	e00e      	b.n	800260a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2201      	movs	r2, #1
 80025f2:	2100      	movs	r1, #0
 80025f4:	4618      	mov	r0, r3
 80025f6:	f000 fc89 	bl	8002f0c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2201      	movs	r2, #1
 8002600:	2104      	movs	r1, #4
 8002602:	4618      	mov	r0, r3
 8002604:	f000 fc82 	bl	8002f0c <TIM_CCxChannelCmd>
      break;
 8002608:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f042 0201 	orr.w	r2, r2, #1
 8002618:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800261a:	2300      	movs	r3, #0
}
 800261c:	4618      	mov	r0, r3
 800261e:	3710      	adds	r7, #16
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b086      	sub	sp, #24
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002630:	2300      	movs	r3, #0
 8002632:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800263a:	2b01      	cmp	r3, #1
 800263c:	d101      	bne.n	8002642 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800263e:	2302      	movs	r3, #2
 8002640:	e0ae      	b.n	80027a0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2201      	movs	r2, #1
 8002646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2b0c      	cmp	r3, #12
 800264e:	f200 809f 	bhi.w	8002790 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002652:	a201      	add	r2, pc, #4	; (adr r2, 8002658 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002658:	0800268d 	.word	0x0800268d
 800265c:	08002791 	.word	0x08002791
 8002660:	08002791 	.word	0x08002791
 8002664:	08002791 	.word	0x08002791
 8002668:	080026cd 	.word	0x080026cd
 800266c:	08002791 	.word	0x08002791
 8002670:	08002791 	.word	0x08002791
 8002674:	08002791 	.word	0x08002791
 8002678:	0800270f 	.word	0x0800270f
 800267c:	08002791 	.word	0x08002791
 8002680:	08002791 	.word	0x08002791
 8002684:	08002791 	.word	0x08002791
 8002688:	0800274f 	.word	0x0800274f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	68b9      	ldr	r1, [r7, #8]
 8002692:	4618      	mov	r0, r3
 8002694:	f000 f9f0 	bl	8002a78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	699a      	ldr	r2, [r3, #24]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f042 0208 	orr.w	r2, r2, #8
 80026a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	699a      	ldr	r2, [r3, #24]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f022 0204 	bic.w	r2, r2, #4
 80026b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	6999      	ldr	r1, [r3, #24]
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	691a      	ldr	r2, [r3, #16]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	430a      	orrs	r2, r1
 80026c8:	619a      	str	r2, [r3, #24]
      break;
 80026ca:	e064      	b.n	8002796 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	68b9      	ldr	r1, [r7, #8]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f000 fa40 	bl	8002b58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	699a      	ldr	r2, [r3, #24]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	699a      	ldr	r2, [r3, #24]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6999      	ldr	r1, [r3, #24]
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	021a      	lsls	r2, r3, #8
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	430a      	orrs	r2, r1
 800270a:	619a      	str	r2, [r3, #24]
      break;
 800270c:	e043      	b.n	8002796 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68b9      	ldr	r1, [r7, #8]
 8002714:	4618      	mov	r0, r3
 8002716:	f000 fa95 	bl	8002c44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	69da      	ldr	r2, [r3, #28]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f042 0208 	orr.w	r2, r2, #8
 8002728:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	69da      	ldr	r2, [r3, #28]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f022 0204 	bic.w	r2, r2, #4
 8002738:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	69d9      	ldr	r1, [r3, #28]
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	691a      	ldr	r2, [r3, #16]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	430a      	orrs	r2, r1
 800274a:	61da      	str	r2, [r3, #28]
      break;
 800274c:	e023      	b.n	8002796 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	68b9      	ldr	r1, [r7, #8]
 8002754:	4618      	mov	r0, r3
 8002756:	f000 fae9 	bl	8002d2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	69da      	ldr	r2, [r3, #28]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002768:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	69da      	ldr	r2, [r3, #28]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002778:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	69d9      	ldr	r1, [r3, #28]
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	691b      	ldr	r3, [r3, #16]
 8002784:	021a      	lsls	r2, r3, #8
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	430a      	orrs	r2, r1
 800278c:	61da      	str	r2, [r3, #28]
      break;
 800278e:	e002      	b.n	8002796 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	75fb      	strb	r3, [r7, #23]
      break;
 8002794:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800279e:	7dfb      	ldrb	r3, [r7, #23]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3718      	adds	r7, #24
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027b2:	2300      	movs	r3, #0
 80027b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d101      	bne.n	80027c4 <HAL_TIM_ConfigClockSource+0x1c>
 80027c0:	2302      	movs	r3, #2
 80027c2:	e0b4      	b.n	800292e <HAL_TIM_ConfigClockSource+0x186>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2202      	movs	r2, #2
 80027d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80027e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68ba      	ldr	r2, [r7, #8]
 80027f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027fc:	d03e      	beq.n	800287c <HAL_TIM_ConfigClockSource+0xd4>
 80027fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002802:	f200 8087 	bhi.w	8002914 <HAL_TIM_ConfigClockSource+0x16c>
 8002806:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800280a:	f000 8086 	beq.w	800291a <HAL_TIM_ConfigClockSource+0x172>
 800280e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002812:	d87f      	bhi.n	8002914 <HAL_TIM_ConfigClockSource+0x16c>
 8002814:	2b70      	cmp	r3, #112	; 0x70
 8002816:	d01a      	beq.n	800284e <HAL_TIM_ConfigClockSource+0xa6>
 8002818:	2b70      	cmp	r3, #112	; 0x70
 800281a:	d87b      	bhi.n	8002914 <HAL_TIM_ConfigClockSource+0x16c>
 800281c:	2b60      	cmp	r3, #96	; 0x60
 800281e:	d050      	beq.n	80028c2 <HAL_TIM_ConfigClockSource+0x11a>
 8002820:	2b60      	cmp	r3, #96	; 0x60
 8002822:	d877      	bhi.n	8002914 <HAL_TIM_ConfigClockSource+0x16c>
 8002824:	2b50      	cmp	r3, #80	; 0x50
 8002826:	d03c      	beq.n	80028a2 <HAL_TIM_ConfigClockSource+0xfa>
 8002828:	2b50      	cmp	r3, #80	; 0x50
 800282a:	d873      	bhi.n	8002914 <HAL_TIM_ConfigClockSource+0x16c>
 800282c:	2b40      	cmp	r3, #64	; 0x40
 800282e:	d058      	beq.n	80028e2 <HAL_TIM_ConfigClockSource+0x13a>
 8002830:	2b40      	cmp	r3, #64	; 0x40
 8002832:	d86f      	bhi.n	8002914 <HAL_TIM_ConfigClockSource+0x16c>
 8002834:	2b30      	cmp	r3, #48	; 0x30
 8002836:	d064      	beq.n	8002902 <HAL_TIM_ConfigClockSource+0x15a>
 8002838:	2b30      	cmp	r3, #48	; 0x30
 800283a:	d86b      	bhi.n	8002914 <HAL_TIM_ConfigClockSource+0x16c>
 800283c:	2b20      	cmp	r3, #32
 800283e:	d060      	beq.n	8002902 <HAL_TIM_ConfigClockSource+0x15a>
 8002840:	2b20      	cmp	r3, #32
 8002842:	d867      	bhi.n	8002914 <HAL_TIM_ConfigClockSource+0x16c>
 8002844:	2b00      	cmp	r3, #0
 8002846:	d05c      	beq.n	8002902 <HAL_TIM_ConfigClockSource+0x15a>
 8002848:	2b10      	cmp	r3, #16
 800284a:	d05a      	beq.n	8002902 <HAL_TIM_ConfigClockSource+0x15a>
 800284c:	e062      	b.n	8002914 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6818      	ldr	r0, [r3, #0]
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	6899      	ldr	r1, [r3, #8]
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685a      	ldr	r2, [r3, #4]
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	f000 fb35 	bl	8002ecc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002870:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	68ba      	ldr	r2, [r7, #8]
 8002878:	609a      	str	r2, [r3, #8]
      break;
 800287a:	e04f      	b.n	800291c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6818      	ldr	r0, [r3, #0]
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	6899      	ldr	r1, [r3, #8]
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685a      	ldr	r2, [r3, #4]
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	f000 fb1e 	bl	8002ecc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	689a      	ldr	r2, [r3, #8]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800289e:	609a      	str	r2, [r3, #8]
      break;
 80028a0:	e03c      	b.n	800291c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6818      	ldr	r0, [r3, #0]
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	6859      	ldr	r1, [r3, #4]
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	461a      	mov	r2, r3
 80028b0:	f000 fa92 	bl	8002dd8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2150      	movs	r1, #80	; 0x50
 80028ba:	4618      	mov	r0, r3
 80028bc:	f000 faeb 	bl	8002e96 <TIM_ITRx_SetConfig>
      break;
 80028c0:	e02c      	b.n	800291c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6818      	ldr	r0, [r3, #0]
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	6859      	ldr	r1, [r3, #4]
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	461a      	mov	r2, r3
 80028d0:	f000 fab1 	bl	8002e36 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2160      	movs	r1, #96	; 0x60
 80028da:	4618      	mov	r0, r3
 80028dc:	f000 fadb 	bl	8002e96 <TIM_ITRx_SetConfig>
      break;
 80028e0:	e01c      	b.n	800291c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6818      	ldr	r0, [r3, #0]
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	6859      	ldr	r1, [r3, #4]
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	461a      	mov	r2, r3
 80028f0:	f000 fa72 	bl	8002dd8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2140      	movs	r1, #64	; 0x40
 80028fa:	4618      	mov	r0, r3
 80028fc:	f000 facb 	bl	8002e96 <TIM_ITRx_SetConfig>
      break;
 8002900:	e00c      	b.n	800291c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4619      	mov	r1, r3
 800290c:	4610      	mov	r0, r2
 800290e:	f000 fac2 	bl	8002e96 <TIM_ITRx_SetConfig>
      break;
 8002912:	e003      	b.n	800291c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	73fb      	strb	r3, [r7, #15]
      break;
 8002918:	e000      	b.n	800291c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800291a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800292c:	7bfb      	ldrb	r3, [r7, #15]
}
 800292e:	4618      	mov	r0, r3
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
	...

08002938 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4a40      	ldr	r2, [pc, #256]	; (8002a4c <TIM_Base_SetConfig+0x114>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d013      	beq.n	8002978 <TIM_Base_SetConfig+0x40>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002956:	d00f      	beq.n	8002978 <TIM_Base_SetConfig+0x40>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4a3d      	ldr	r2, [pc, #244]	; (8002a50 <TIM_Base_SetConfig+0x118>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d00b      	beq.n	8002978 <TIM_Base_SetConfig+0x40>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4a3c      	ldr	r2, [pc, #240]	; (8002a54 <TIM_Base_SetConfig+0x11c>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d007      	beq.n	8002978 <TIM_Base_SetConfig+0x40>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4a3b      	ldr	r2, [pc, #236]	; (8002a58 <TIM_Base_SetConfig+0x120>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d003      	beq.n	8002978 <TIM_Base_SetConfig+0x40>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	4a3a      	ldr	r2, [pc, #232]	; (8002a5c <TIM_Base_SetConfig+0x124>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d108      	bne.n	800298a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800297e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	4313      	orrs	r3, r2
 8002988:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a2f      	ldr	r2, [pc, #188]	; (8002a4c <TIM_Base_SetConfig+0x114>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d02b      	beq.n	80029ea <TIM_Base_SetConfig+0xb2>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002998:	d027      	beq.n	80029ea <TIM_Base_SetConfig+0xb2>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a2c      	ldr	r2, [pc, #176]	; (8002a50 <TIM_Base_SetConfig+0x118>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d023      	beq.n	80029ea <TIM_Base_SetConfig+0xb2>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a2b      	ldr	r2, [pc, #172]	; (8002a54 <TIM_Base_SetConfig+0x11c>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d01f      	beq.n	80029ea <TIM_Base_SetConfig+0xb2>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a2a      	ldr	r2, [pc, #168]	; (8002a58 <TIM_Base_SetConfig+0x120>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d01b      	beq.n	80029ea <TIM_Base_SetConfig+0xb2>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a29      	ldr	r2, [pc, #164]	; (8002a5c <TIM_Base_SetConfig+0x124>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d017      	beq.n	80029ea <TIM_Base_SetConfig+0xb2>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a28      	ldr	r2, [pc, #160]	; (8002a60 <TIM_Base_SetConfig+0x128>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d013      	beq.n	80029ea <TIM_Base_SetConfig+0xb2>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a27      	ldr	r2, [pc, #156]	; (8002a64 <TIM_Base_SetConfig+0x12c>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d00f      	beq.n	80029ea <TIM_Base_SetConfig+0xb2>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a26      	ldr	r2, [pc, #152]	; (8002a68 <TIM_Base_SetConfig+0x130>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d00b      	beq.n	80029ea <TIM_Base_SetConfig+0xb2>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a25      	ldr	r2, [pc, #148]	; (8002a6c <TIM_Base_SetConfig+0x134>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d007      	beq.n	80029ea <TIM_Base_SetConfig+0xb2>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a24      	ldr	r2, [pc, #144]	; (8002a70 <TIM_Base_SetConfig+0x138>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d003      	beq.n	80029ea <TIM_Base_SetConfig+0xb2>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a23      	ldr	r2, [pc, #140]	; (8002a74 <TIM_Base_SetConfig+0x13c>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d108      	bne.n	80029fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	68fa      	ldr	r2, [r7, #12]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	695b      	ldr	r3, [r3, #20]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	68fa      	ldr	r2, [r7, #12]
 8002a0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	689a      	ldr	r2, [r3, #8]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	4a0a      	ldr	r2, [pc, #40]	; (8002a4c <TIM_Base_SetConfig+0x114>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d003      	beq.n	8002a30 <TIM_Base_SetConfig+0xf8>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	4a0c      	ldr	r2, [pc, #48]	; (8002a5c <TIM_Base_SetConfig+0x124>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d103      	bne.n	8002a38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	691a      	ldr	r2, [r3, #16]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	615a      	str	r2, [r3, #20]
}
 8002a3e:	bf00      	nop
 8002a40:	3714      	adds	r7, #20
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	40010000 	.word	0x40010000
 8002a50:	40000400 	.word	0x40000400
 8002a54:	40000800 	.word	0x40000800
 8002a58:	40000c00 	.word	0x40000c00
 8002a5c:	40010400 	.word	0x40010400
 8002a60:	40014000 	.word	0x40014000
 8002a64:	40014400 	.word	0x40014400
 8002a68:	40014800 	.word	0x40014800
 8002a6c:	40001800 	.word	0x40001800
 8002a70:	40001c00 	.word	0x40001c00
 8002a74:	40002000 	.word	0x40002000

08002a78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b087      	sub	sp, #28
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a1b      	ldr	r3, [r3, #32]
 8002a86:	f023 0201 	bic.w	r2, r3, #1
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a1b      	ldr	r3, [r3, #32]
 8002a92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f023 0303 	bic.w	r3, r3, #3
 8002aae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	68fa      	ldr	r2, [r7, #12]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	f023 0302 	bic.w	r3, r3, #2
 8002ac0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	697a      	ldr	r2, [r7, #20]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4a20      	ldr	r2, [pc, #128]	; (8002b50 <TIM_OC1_SetConfig+0xd8>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d003      	beq.n	8002adc <TIM_OC1_SetConfig+0x64>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4a1f      	ldr	r2, [pc, #124]	; (8002b54 <TIM_OC1_SetConfig+0xdc>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d10c      	bne.n	8002af6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	f023 0308 	bic.w	r3, r3, #8
 8002ae2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	697a      	ldr	r2, [r7, #20]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	f023 0304 	bic.w	r3, r3, #4
 8002af4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a15      	ldr	r2, [pc, #84]	; (8002b50 <TIM_OC1_SetConfig+0xd8>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d003      	beq.n	8002b06 <TIM_OC1_SetConfig+0x8e>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a14      	ldr	r2, [pc, #80]	; (8002b54 <TIM_OC1_SetConfig+0xdc>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d111      	bne.n	8002b2a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	695b      	ldr	r3, [r3, #20]
 8002b1a:	693a      	ldr	r2, [r7, #16]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	699b      	ldr	r3, [r3, #24]
 8002b24:	693a      	ldr	r2, [r7, #16]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	693a      	ldr	r2, [r7, #16]
 8002b2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	685a      	ldr	r2, [r3, #4]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	697a      	ldr	r2, [r7, #20]
 8002b42:	621a      	str	r2, [r3, #32]
}
 8002b44:	bf00      	nop
 8002b46:	371c      	adds	r7, #28
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr
 8002b50:	40010000 	.word	0x40010000
 8002b54:	40010400 	.word	0x40010400

08002b58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b087      	sub	sp, #28
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a1b      	ldr	r3, [r3, #32]
 8002b66:	f023 0210 	bic.w	r2, r3, #16
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a1b      	ldr	r3, [r3, #32]
 8002b72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	699b      	ldr	r3, [r3, #24]
 8002b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	021b      	lsls	r3, r3, #8
 8002b96:	68fa      	ldr	r2, [r7, #12]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	f023 0320 	bic.w	r3, r3, #32
 8002ba2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	011b      	lsls	r3, r3, #4
 8002baa:	697a      	ldr	r2, [r7, #20]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	4a22      	ldr	r2, [pc, #136]	; (8002c3c <TIM_OC2_SetConfig+0xe4>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d003      	beq.n	8002bc0 <TIM_OC2_SetConfig+0x68>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	4a21      	ldr	r2, [pc, #132]	; (8002c40 <TIM_OC2_SetConfig+0xe8>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d10d      	bne.n	8002bdc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	011b      	lsls	r3, r3, #4
 8002bce:	697a      	ldr	r2, [r7, #20]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bda:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4a17      	ldr	r2, [pc, #92]	; (8002c3c <TIM_OC2_SetConfig+0xe4>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d003      	beq.n	8002bec <TIM_OC2_SetConfig+0x94>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4a16      	ldr	r2, [pc, #88]	; (8002c40 <TIM_OC2_SetConfig+0xe8>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d113      	bne.n	8002c14 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002bf2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002bfa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	695b      	ldr	r3, [r3, #20]
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	693a      	ldr	r2, [r7, #16]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	693a      	ldr	r2, [r7, #16]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	693a      	ldr	r2, [r7, #16]
 8002c18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	68fa      	ldr	r2, [r7, #12]
 8002c1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685a      	ldr	r2, [r3, #4]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	697a      	ldr	r2, [r7, #20]
 8002c2c:	621a      	str	r2, [r3, #32]
}
 8002c2e:	bf00      	nop
 8002c30:	371c      	adds	r7, #28
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	40010000 	.word	0x40010000
 8002c40:	40010400 	.word	0x40010400

08002c44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b087      	sub	sp, #28
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a1b      	ldr	r3, [r3, #32]
 8002c52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a1b      	ldr	r3, [r3, #32]
 8002c5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	69db      	ldr	r3, [r3, #28]
 8002c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f023 0303 	bic.w	r3, r3, #3
 8002c7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68fa      	ldr	r2, [r7, #12]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	021b      	lsls	r3, r3, #8
 8002c94:	697a      	ldr	r2, [r7, #20]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a21      	ldr	r2, [pc, #132]	; (8002d24 <TIM_OC3_SetConfig+0xe0>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d003      	beq.n	8002caa <TIM_OC3_SetConfig+0x66>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a20      	ldr	r2, [pc, #128]	; (8002d28 <TIM_OC3_SetConfig+0xe4>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d10d      	bne.n	8002cc6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002cb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	021b      	lsls	r3, r3, #8
 8002cb8:	697a      	ldr	r2, [r7, #20]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002cc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a16      	ldr	r2, [pc, #88]	; (8002d24 <TIM_OC3_SetConfig+0xe0>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d003      	beq.n	8002cd6 <TIM_OC3_SetConfig+0x92>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a15      	ldr	r2, [pc, #84]	; (8002d28 <TIM_OC3_SetConfig+0xe4>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d113      	bne.n	8002cfe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002cdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ce4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	011b      	lsls	r3, r3, #4
 8002cec:	693a      	ldr	r2, [r7, #16]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	699b      	ldr	r3, [r3, #24]
 8002cf6:	011b      	lsls	r3, r3, #4
 8002cf8:	693a      	ldr	r2, [r7, #16]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	693a      	ldr	r2, [r7, #16]
 8002d02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	68fa      	ldr	r2, [r7, #12]
 8002d08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685a      	ldr	r2, [r3, #4]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	697a      	ldr	r2, [r7, #20]
 8002d16:	621a      	str	r2, [r3, #32]
}
 8002d18:	bf00      	nop
 8002d1a:	371c      	adds	r7, #28
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr
 8002d24:	40010000 	.word	0x40010000
 8002d28:	40010400 	.word	0x40010400

08002d2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b087      	sub	sp, #28
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a1b      	ldr	r3, [r3, #32]
 8002d3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a1b      	ldr	r3, [r3, #32]
 8002d46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	69db      	ldr	r3, [r3, #28]
 8002d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	021b      	lsls	r3, r3, #8
 8002d6a:	68fa      	ldr	r2, [r7, #12]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	031b      	lsls	r3, r3, #12
 8002d7e:	693a      	ldr	r2, [r7, #16]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4a12      	ldr	r2, [pc, #72]	; (8002dd0 <TIM_OC4_SetConfig+0xa4>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d003      	beq.n	8002d94 <TIM_OC4_SetConfig+0x68>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4a11      	ldr	r2, [pc, #68]	; (8002dd4 <TIM_OC4_SetConfig+0xa8>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d109      	bne.n	8002da8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	695b      	ldr	r3, [r3, #20]
 8002da0:	019b      	lsls	r3, r3, #6
 8002da2:	697a      	ldr	r2, [r7, #20]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	697a      	ldr	r2, [r7, #20]
 8002dac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	68fa      	ldr	r2, [r7, #12]
 8002db2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685a      	ldr	r2, [r3, #4]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	621a      	str	r2, [r3, #32]
}
 8002dc2:	bf00      	nop
 8002dc4:	371c      	adds	r7, #28
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	40010000 	.word	0x40010000
 8002dd4:	40010400 	.word	0x40010400

08002dd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b087      	sub	sp, #28
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6a1b      	ldr	r3, [r3, #32]
 8002de8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6a1b      	ldr	r3, [r3, #32]
 8002dee:	f023 0201 	bic.w	r2, r3, #1
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	011b      	lsls	r3, r3, #4
 8002e08:	693a      	ldr	r2, [r7, #16]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	f023 030a 	bic.w	r3, r3, #10
 8002e14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e16:	697a      	ldr	r2, [r7, #20]
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	693a      	ldr	r2, [r7, #16]
 8002e22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	697a      	ldr	r2, [r7, #20]
 8002e28:	621a      	str	r2, [r3, #32]
}
 8002e2a:	bf00      	nop
 8002e2c:	371c      	adds	r7, #28
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr

08002e36 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e36:	b480      	push	{r7}
 8002e38:	b087      	sub	sp, #28
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	60f8      	str	r0, [r7, #12]
 8002e3e:	60b9      	str	r1, [r7, #8]
 8002e40:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6a1b      	ldr	r3, [r3, #32]
 8002e46:	f023 0210 	bic.w	r2, r3, #16
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	699b      	ldr	r3, [r3, #24]
 8002e52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6a1b      	ldr	r3, [r3, #32]
 8002e58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	031b      	lsls	r3, r3, #12
 8002e66:	697a      	ldr	r2, [r7, #20]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e72:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	011b      	lsls	r3, r3, #4
 8002e78:	693a      	ldr	r2, [r7, #16]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	697a      	ldr	r2, [r7, #20]
 8002e82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	693a      	ldr	r2, [r7, #16]
 8002e88:	621a      	str	r2, [r3, #32]
}
 8002e8a:	bf00      	nop
 8002e8c:	371c      	adds	r7, #28
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr

08002e96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e96:	b480      	push	{r7}
 8002e98:	b085      	sub	sp, #20
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
 8002e9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002eae:	683a      	ldr	r2, [r7, #0]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	f043 0307 	orr.w	r3, r3, #7
 8002eb8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	68fa      	ldr	r2, [r7, #12]
 8002ebe:	609a      	str	r2, [r3, #8]
}
 8002ec0:	bf00      	nop
 8002ec2:	3714      	adds	r7, #20
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b087      	sub	sp, #28
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	607a      	str	r2, [r7, #4]
 8002ed8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ee6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	021a      	lsls	r2, r3, #8
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	431a      	orrs	r2, r3
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	697a      	ldr	r2, [r7, #20]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	697a      	ldr	r2, [r7, #20]
 8002efe:	609a      	str	r2, [r3, #8]
}
 8002f00:	bf00      	nop
 8002f02:	371c      	adds	r7, #28
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b087      	sub	sp, #28
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	f003 031f 	and.w	r3, r3, #31
 8002f1e:	2201      	movs	r2, #1
 8002f20:	fa02 f303 	lsl.w	r3, r2, r3
 8002f24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6a1a      	ldr	r2, [r3, #32]
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	43db      	mvns	r3, r3
 8002f2e:	401a      	ands	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6a1a      	ldr	r2, [r3, #32]
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	f003 031f 	and.w	r3, r3, #31
 8002f3e:	6879      	ldr	r1, [r7, #4]
 8002f40:	fa01 f303 	lsl.w	r3, r1, r3
 8002f44:	431a      	orrs	r2, r3
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	621a      	str	r2, [r3, #32]
}
 8002f4a:	bf00      	nop
 8002f4c:	371c      	adds	r7, #28
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
	...

08002f58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b085      	sub	sp, #20
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d101      	bne.n	8002f70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	e05a      	b.n	8003026 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2202      	movs	r2, #2
 8002f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	68fa      	ldr	r2, [r7, #12]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68fa      	ldr	r2, [r7, #12]
 8002fa8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a21      	ldr	r2, [pc, #132]	; (8003034 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d022      	beq.n	8002ffa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fbc:	d01d      	beq.n	8002ffa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a1d      	ldr	r2, [pc, #116]	; (8003038 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d018      	beq.n	8002ffa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a1b      	ldr	r2, [pc, #108]	; (800303c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d013      	beq.n	8002ffa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a1a      	ldr	r2, [pc, #104]	; (8003040 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d00e      	beq.n	8002ffa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a18      	ldr	r2, [pc, #96]	; (8003044 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d009      	beq.n	8002ffa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a17      	ldr	r2, [pc, #92]	; (8003048 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d004      	beq.n	8002ffa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a15      	ldr	r2, [pc, #84]	; (800304c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d10c      	bne.n	8003014 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003000:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	68ba      	ldr	r2, [r7, #8]
 8003008:	4313      	orrs	r3, r2
 800300a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	68ba      	ldr	r2, [r7, #8]
 8003012:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3714      	adds	r7, #20
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	40010000 	.word	0x40010000
 8003038:	40000400 	.word	0x40000400
 800303c:	40000800 	.word	0x40000800
 8003040:	40000c00 	.word	0x40000c00
 8003044:	40010400 	.word	0x40010400
 8003048:	40014000 	.word	0x40014000
 800304c:	40001800 	.word	0x40001800

08003050 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003050:	b480      	push	{r7}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800305a:	2300      	movs	r3, #0
 800305c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003064:	2b01      	cmp	r3, #1
 8003066:	d101      	bne.n	800306c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003068:	2302      	movs	r3, #2
 800306a:	e03d      	b.n	80030e8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	4313      	orrs	r3, r2
 8003080:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	4313      	orrs	r3, r2
 800308e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	4313      	orrs	r3, r2
 800309c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	691b      	ldr	r3, [r3, #16]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	695b      	ldr	r3, [r3, #20]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	69db      	ldr	r3, [r3, #28]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68fa      	ldr	r2, [r7, #12]
 80030dc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030e6:	2300      	movs	r3, #0
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3714      	adds	r7, #20
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d101      	bne.n	8003106 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e03f      	b.n	8003186 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b00      	cmp	r3, #0
 8003110:	d106      	bne.n	8003120 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f7fd fe64 	bl	8000de8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2224      	movs	r2, #36	; 0x24
 8003124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	68da      	ldr	r2, [r3, #12]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003136:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f000 fce9 	bl	8003b10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	691a      	ldr	r2, [r3, #16]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800314c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	695a      	ldr	r2, [r3, #20]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800315c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68da      	ldr	r2, [r3, #12]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800316c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2220      	movs	r2, #32
 8003178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2220      	movs	r2, #32
 8003180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800318e:	b580      	push	{r7, lr}
 8003190:	b084      	sub	sp, #16
 8003192:	af00      	add	r7, sp, #0
 8003194:	60f8      	str	r0, [r7, #12]
 8003196:	60b9      	str	r1, [r7, #8]
 8003198:	4613      	mov	r3, r2
 800319a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	2b20      	cmp	r3, #32
 80031a6:	d11d      	bne.n	80031e4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d002      	beq.n	80031b4 <HAL_UART_Receive_IT+0x26>
 80031ae:	88fb      	ldrh	r3, [r7, #6]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d101      	bne.n	80031b8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e016      	b.n	80031e6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d101      	bne.n	80031c6 <HAL_UART_Receive_IT+0x38>
 80031c2:	2302      	movs	r3, #2
 80031c4:	e00f      	b.n	80031e6 <HAL_UART_Receive_IT+0x58>
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2201      	movs	r2, #1
 80031ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2200      	movs	r2, #0
 80031d2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80031d4:	88fb      	ldrh	r3, [r7, #6]
 80031d6:	461a      	mov	r2, r3
 80031d8:	68b9      	ldr	r1, [r7, #8]
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f000 fac0 	bl	8003760 <UART_Start_Receive_IT>
 80031e0:	4603      	mov	r3, r0
 80031e2:	e000      	b.n	80031e6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80031e4:	2302      	movs	r3, #2
  }
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3710      	adds	r7, #16
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
	...

080031f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b0ba      	sub	sp, #232	; 0xe8
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003216:	2300      	movs	r3, #0
 8003218:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800321c:	2300      	movs	r3, #0
 800321e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003226:	f003 030f 	and.w	r3, r3, #15
 800322a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800322e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003232:	2b00      	cmp	r3, #0
 8003234:	d10f      	bne.n	8003256 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003236:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800323a:	f003 0320 	and.w	r3, r3, #32
 800323e:	2b00      	cmp	r3, #0
 8003240:	d009      	beq.n	8003256 <HAL_UART_IRQHandler+0x66>
 8003242:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003246:	f003 0320 	and.w	r3, r3, #32
 800324a:	2b00      	cmp	r3, #0
 800324c:	d003      	beq.n	8003256 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 fba3 	bl	800399a <UART_Receive_IT>
      return;
 8003254:	e256      	b.n	8003704 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003256:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800325a:	2b00      	cmp	r3, #0
 800325c:	f000 80de 	beq.w	800341c <HAL_UART_IRQHandler+0x22c>
 8003260:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003264:	f003 0301 	and.w	r3, r3, #1
 8003268:	2b00      	cmp	r3, #0
 800326a:	d106      	bne.n	800327a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800326c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003270:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003274:	2b00      	cmp	r3, #0
 8003276:	f000 80d1 	beq.w	800341c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800327a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00b      	beq.n	800329e <HAL_UART_IRQHandler+0xae>
 8003286:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800328a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800328e:	2b00      	cmp	r3, #0
 8003290:	d005      	beq.n	800329e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003296:	f043 0201 	orr.w	r2, r3, #1
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800329e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032a2:	f003 0304 	and.w	r3, r3, #4
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00b      	beq.n	80032c2 <HAL_UART_IRQHandler+0xd2>
 80032aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d005      	beq.n	80032c2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ba:	f043 0202 	orr.w	r2, r3, #2
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00b      	beq.n	80032e6 <HAL_UART_IRQHandler+0xf6>
 80032ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032d2:	f003 0301 	and.w	r3, r3, #1
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d005      	beq.n	80032e6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032de:	f043 0204 	orr.w	r2, r3, #4
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80032e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032ea:	f003 0308 	and.w	r3, r3, #8
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d011      	beq.n	8003316 <HAL_UART_IRQHandler+0x126>
 80032f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032f6:	f003 0320 	and.w	r3, r3, #32
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d105      	bne.n	800330a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80032fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003302:	f003 0301 	and.w	r3, r3, #1
 8003306:	2b00      	cmp	r3, #0
 8003308:	d005      	beq.n	8003316 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330e:	f043 0208 	orr.w	r2, r3, #8
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331a:	2b00      	cmp	r3, #0
 800331c:	f000 81ed 	beq.w	80036fa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003320:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003324:	f003 0320 	and.w	r3, r3, #32
 8003328:	2b00      	cmp	r3, #0
 800332a:	d008      	beq.n	800333e <HAL_UART_IRQHandler+0x14e>
 800332c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003330:	f003 0320 	and.w	r3, r3, #32
 8003334:	2b00      	cmp	r3, #0
 8003336:	d002      	beq.n	800333e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f000 fb2e 	bl	800399a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	695b      	ldr	r3, [r3, #20]
 8003344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003348:	2b40      	cmp	r3, #64	; 0x40
 800334a:	bf0c      	ite	eq
 800334c:	2301      	moveq	r3, #1
 800334e:	2300      	movne	r3, #0
 8003350:	b2db      	uxtb	r3, r3
 8003352:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335a:	f003 0308 	and.w	r3, r3, #8
 800335e:	2b00      	cmp	r3, #0
 8003360:	d103      	bne.n	800336a <HAL_UART_IRQHandler+0x17a>
 8003362:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003366:	2b00      	cmp	r3, #0
 8003368:	d04f      	beq.n	800340a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f000 fa36 	bl	80037dc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800337a:	2b40      	cmp	r3, #64	; 0x40
 800337c:	d141      	bne.n	8003402 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	3314      	adds	r3, #20
 8003384:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003388:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800338c:	e853 3f00 	ldrex	r3, [r3]
 8003390:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003394:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003398:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800339c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	3314      	adds	r3, #20
 80033a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80033aa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80033ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80033b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80033ba:	e841 2300 	strex	r3, r2, [r1]
 80033be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80033c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1d9      	bne.n	800337e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d013      	beq.n	80033fa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d6:	4a7d      	ldr	r2, [pc, #500]	; (80035cc <HAL_UART_IRQHandler+0x3dc>)
 80033d8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033de:	4618      	mov	r0, r3
 80033e0:	f7fe f809 	bl	80013f6 <HAL_DMA_Abort_IT>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d016      	beq.n	8003418 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80033f4:	4610      	mov	r0, r2
 80033f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033f8:	e00e      	b.n	8003418 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 f99a 	bl	8003734 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003400:	e00a      	b.n	8003418 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 f996 	bl	8003734 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003408:	e006      	b.n	8003418 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 f992 	bl	8003734 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003416:	e170      	b.n	80036fa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003418:	bf00      	nop
    return;
 800341a:	e16e      	b.n	80036fa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003420:	2b01      	cmp	r3, #1
 8003422:	f040 814a 	bne.w	80036ba <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800342a:	f003 0310 	and.w	r3, r3, #16
 800342e:	2b00      	cmp	r3, #0
 8003430:	f000 8143 	beq.w	80036ba <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003434:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003438:	f003 0310 	and.w	r3, r3, #16
 800343c:	2b00      	cmp	r3, #0
 800343e:	f000 813c 	beq.w	80036ba <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003442:	2300      	movs	r3, #0
 8003444:	60bb      	str	r3, [r7, #8]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	60bb      	str	r3, [r7, #8]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	60bb      	str	r3, [r7, #8]
 8003456:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	695b      	ldr	r3, [r3, #20]
 800345e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003462:	2b40      	cmp	r3, #64	; 0x40
 8003464:	f040 80b4 	bne.w	80035d0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003474:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003478:	2b00      	cmp	r3, #0
 800347a:	f000 8140 	beq.w	80036fe <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003482:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003486:	429a      	cmp	r2, r3
 8003488:	f080 8139 	bcs.w	80036fe <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003492:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003498:	69db      	ldr	r3, [r3, #28]
 800349a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800349e:	f000 8088 	beq.w	80035b2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	330c      	adds	r3, #12
 80034a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80034b0:	e853 3f00 	ldrex	r3, [r3]
 80034b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80034b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80034bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	330c      	adds	r3, #12
 80034ca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80034ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80034d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80034da:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80034de:	e841 2300 	strex	r3, r2, [r1]
 80034e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80034e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1d9      	bne.n	80034a2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	3314      	adds	r3, #20
 80034f4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034f8:	e853 3f00 	ldrex	r3, [r3]
 80034fc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80034fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003500:	f023 0301 	bic.w	r3, r3, #1
 8003504:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	3314      	adds	r3, #20
 800350e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003512:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003516:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003518:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800351a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800351e:	e841 2300 	strex	r3, r2, [r1]
 8003522:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003524:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003526:	2b00      	cmp	r3, #0
 8003528:	d1e1      	bne.n	80034ee <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	3314      	adds	r3, #20
 8003530:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003532:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003534:	e853 3f00 	ldrex	r3, [r3]
 8003538:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800353a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800353c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003540:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	3314      	adds	r3, #20
 800354a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800354e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003550:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003552:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003554:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003556:	e841 2300 	strex	r3, r2, [r1]
 800355a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800355c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800355e:	2b00      	cmp	r3, #0
 8003560:	d1e3      	bne.n	800352a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2220      	movs	r2, #32
 8003566:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	330c      	adds	r3, #12
 8003576:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003578:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800357a:	e853 3f00 	ldrex	r3, [r3]
 800357e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003580:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003582:	f023 0310 	bic.w	r3, r3, #16
 8003586:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	330c      	adds	r3, #12
 8003590:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003594:	65ba      	str	r2, [r7, #88]	; 0x58
 8003596:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003598:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800359a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800359c:	e841 2300 	strex	r3, r2, [r1]
 80035a0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80035a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d1e3      	bne.n	8003570 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7fd feb2 	bl	8001316 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	b29b      	uxth	r3, r3
 80035c0:	4619      	mov	r1, r3
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 f8c0 	bl	8003748 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80035c8:	e099      	b.n	80036fe <HAL_UART_IRQHandler+0x50e>
 80035ca:	bf00      	nop
 80035cc:	080038a3 	.word	0x080038a3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035d8:	b29b      	uxth	r3, r3
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	f000 808b 	beq.w	8003702 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80035ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	f000 8086 	beq.w	8003702 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	330c      	adds	r3, #12
 80035fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003600:	e853 3f00 	ldrex	r3, [r3]
 8003604:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003608:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800360c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	330c      	adds	r3, #12
 8003616:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800361a:	647a      	str	r2, [r7, #68]	; 0x44
 800361c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800361e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003620:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003622:	e841 2300 	strex	r3, r2, [r1]
 8003626:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003628:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1e3      	bne.n	80035f6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	3314      	adds	r3, #20
 8003634:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003638:	e853 3f00 	ldrex	r3, [r3]
 800363c:	623b      	str	r3, [r7, #32]
   return(result);
 800363e:	6a3b      	ldr	r3, [r7, #32]
 8003640:	f023 0301 	bic.w	r3, r3, #1
 8003644:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	3314      	adds	r3, #20
 800364e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003652:	633a      	str	r2, [r7, #48]	; 0x30
 8003654:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003656:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003658:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800365a:	e841 2300 	strex	r3, r2, [r1]
 800365e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1e3      	bne.n	800362e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2220      	movs	r2, #32
 800366a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	330c      	adds	r3, #12
 800367a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	e853 3f00 	ldrex	r3, [r3]
 8003682:	60fb      	str	r3, [r7, #12]
   return(result);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f023 0310 	bic.w	r3, r3, #16
 800368a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	330c      	adds	r3, #12
 8003694:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003698:	61fa      	str	r2, [r7, #28]
 800369a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800369c:	69b9      	ldr	r1, [r7, #24]
 800369e:	69fa      	ldr	r2, [r7, #28]
 80036a0:	e841 2300 	strex	r3, r2, [r1]
 80036a4:	617b      	str	r3, [r7, #20]
   return(result);
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1e3      	bne.n	8003674 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80036ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80036b0:	4619      	mov	r1, r3
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f000 f848 	bl	8003748 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80036b8:	e023      	b.n	8003702 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80036ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d009      	beq.n	80036da <HAL_UART_IRQHandler+0x4ea>
 80036c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d003      	beq.n	80036da <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 f8f9 	bl	80038ca <UART_Transmit_IT>
    return;
 80036d8:	e014      	b.n	8003704 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80036da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00e      	beq.n	8003704 <HAL_UART_IRQHandler+0x514>
 80036e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d008      	beq.n	8003704 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 f939 	bl	800396a <UART_EndTransmit_IT>
    return;
 80036f8:	e004      	b.n	8003704 <HAL_UART_IRQHandler+0x514>
    return;
 80036fa:	bf00      	nop
 80036fc:	e002      	b.n	8003704 <HAL_UART_IRQHandler+0x514>
      return;
 80036fe:	bf00      	nop
 8003700:	e000      	b.n	8003704 <HAL_UART_IRQHandler+0x514>
      return;
 8003702:	bf00      	nop
  }
}
 8003704:	37e8      	adds	r7, #232	; 0xe8
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop

0800370c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003728:	bf00      	nop
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800373c:	bf00      	nop
 800373e:	370c      	adds	r7, #12
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	460b      	mov	r3, r1
 8003752:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003754:	bf00      	nop
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003760:	b480      	push	{r7}
 8003762:	b085      	sub	sp, #20
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	4613      	mov	r3, r2
 800376c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	68ba      	ldr	r2, [r7, #8]
 8003772:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	88fa      	ldrh	r2, [r7, #6]
 8003778:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	88fa      	ldrh	r2, [r7, #6]
 800377e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2222      	movs	r2, #34	; 0x22
 800378a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d007      	beq.n	80037ae <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	68da      	ldr	r2, [r3, #12]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037ac:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	695a      	ldr	r2, [r3, #20]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f042 0201 	orr.w	r2, r2, #1
 80037bc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68da      	ldr	r2, [r3, #12]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f042 0220 	orr.w	r2, r2, #32
 80037cc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3714      	adds	r7, #20
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037dc:	b480      	push	{r7}
 80037de:	b095      	sub	sp, #84	; 0x54
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	330c      	adds	r3, #12
 80037ea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037ee:	e853 3f00 	ldrex	r3, [r3]
 80037f2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80037f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80037fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	330c      	adds	r3, #12
 8003802:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003804:	643a      	str	r2, [r7, #64]	; 0x40
 8003806:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003808:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800380a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800380c:	e841 2300 	strex	r3, r2, [r1]
 8003810:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003814:	2b00      	cmp	r3, #0
 8003816:	d1e5      	bne.n	80037e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	3314      	adds	r3, #20
 800381e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003820:	6a3b      	ldr	r3, [r7, #32]
 8003822:	e853 3f00 	ldrex	r3, [r3]
 8003826:	61fb      	str	r3, [r7, #28]
   return(result);
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	f023 0301 	bic.w	r3, r3, #1
 800382e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	3314      	adds	r3, #20
 8003836:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003838:	62fa      	str	r2, [r7, #44]	; 0x2c
 800383a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800383c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800383e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003840:	e841 2300 	strex	r3, r2, [r1]
 8003844:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003848:	2b00      	cmp	r3, #0
 800384a:	d1e5      	bne.n	8003818 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003850:	2b01      	cmp	r3, #1
 8003852:	d119      	bne.n	8003888 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	330c      	adds	r3, #12
 800385a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	e853 3f00 	ldrex	r3, [r3]
 8003862:	60bb      	str	r3, [r7, #8]
   return(result);
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	f023 0310 	bic.w	r3, r3, #16
 800386a:	647b      	str	r3, [r7, #68]	; 0x44
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	330c      	adds	r3, #12
 8003872:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003874:	61ba      	str	r2, [r7, #24]
 8003876:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003878:	6979      	ldr	r1, [r7, #20]
 800387a:	69ba      	ldr	r2, [r7, #24]
 800387c:	e841 2300 	strex	r3, r2, [r1]
 8003880:	613b      	str	r3, [r7, #16]
   return(result);
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d1e5      	bne.n	8003854 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2220      	movs	r2, #32
 800388c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003896:	bf00      	nop
 8003898:	3754      	adds	r7, #84	; 0x54
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr

080038a2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80038a2:	b580      	push	{r7, lr}
 80038a4:	b084      	sub	sp, #16
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2200      	movs	r2, #0
 80038b4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2200      	movs	r2, #0
 80038ba:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80038bc:	68f8      	ldr	r0, [r7, #12]
 80038be:	f7ff ff39 	bl	8003734 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038c2:	bf00      	nop
 80038c4:	3710      	adds	r7, #16
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80038ca:	b480      	push	{r7}
 80038cc:	b085      	sub	sp, #20
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b21      	cmp	r3, #33	; 0x21
 80038dc:	d13e      	bne.n	800395c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038e6:	d114      	bne.n	8003912 <UART_Transmit_IT+0x48>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d110      	bne.n	8003912 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a1b      	ldr	r3, [r3, #32]
 80038f4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	881b      	ldrh	r3, [r3, #0]
 80038fa:	461a      	mov	r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003904:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a1b      	ldr	r3, [r3, #32]
 800390a:	1c9a      	adds	r2, r3, #2
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	621a      	str	r2, [r3, #32]
 8003910:	e008      	b.n	8003924 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a1b      	ldr	r3, [r3, #32]
 8003916:	1c59      	adds	r1, r3, #1
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	6211      	str	r1, [r2, #32]
 800391c:	781a      	ldrb	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003928:	b29b      	uxth	r3, r3
 800392a:	3b01      	subs	r3, #1
 800392c:	b29b      	uxth	r3, r3
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	4619      	mov	r1, r3
 8003932:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003934:	2b00      	cmp	r3, #0
 8003936:	d10f      	bne.n	8003958 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	68da      	ldr	r2, [r3, #12]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003946:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68da      	ldr	r2, [r3, #12]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003956:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003958:	2300      	movs	r3, #0
 800395a:	e000      	b.n	800395e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800395c:	2302      	movs	r3, #2
  }
}
 800395e:	4618      	mov	r0, r3
 8003960:	3714      	adds	r7, #20
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr

0800396a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800396a:	b580      	push	{r7, lr}
 800396c:	b082      	sub	sp, #8
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	68da      	ldr	r2, [r3, #12]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003980:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2220      	movs	r2, #32
 8003986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f7ff febe 	bl	800370c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3708      	adds	r7, #8
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}

0800399a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800399a:	b580      	push	{r7, lr}
 800399c:	b08c      	sub	sp, #48	; 0x30
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b22      	cmp	r3, #34	; 0x22
 80039ac:	f040 80ab 	bne.w	8003b06 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039b8:	d117      	bne.n	80039ea <UART_Receive_IT+0x50>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d113      	bne.n	80039ea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80039c2:	2300      	movs	r3, #0
 80039c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ca:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039d8:	b29a      	uxth	r2, r3
 80039da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039dc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e2:	1c9a      	adds	r2, r3, #2
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	629a      	str	r2, [r3, #40]	; 0x28
 80039e8:	e026      	b.n	8003a38 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80039f0:	2300      	movs	r3, #0
 80039f2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039fc:	d007      	beq.n	8003a0e <UART_Receive_IT+0x74>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d10a      	bne.n	8003a1c <UART_Receive_IT+0x82>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d106      	bne.n	8003a1c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	b2da      	uxtb	r2, r3
 8003a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a18:	701a      	strb	r2, [r3, #0]
 8003a1a:	e008      	b.n	8003a2e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a28:	b2da      	uxtb	r2, r3
 8003a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a2c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a32:	1c5a      	adds	r2, r3, #1
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	4619      	mov	r1, r3
 8003a46:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d15a      	bne.n	8003b02 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68da      	ldr	r2, [r3, #12]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f022 0220 	bic.w	r2, r2, #32
 8003a5a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68da      	ldr	r2, [r3, #12]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a6a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	695a      	ldr	r2, [r3, #20]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f022 0201 	bic.w	r2, r2, #1
 8003a7a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2220      	movs	r2, #32
 8003a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d135      	bne.n	8003af8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	330c      	adds	r3, #12
 8003a98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	e853 3f00 	ldrex	r3, [r3]
 8003aa0:	613b      	str	r3, [r7, #16]
   return(result);
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	f023 0310 	bic.w	r3, r3, #16
 8003aa8:	627b      	str	r3, [r7, #36]	; 0x24
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	330c      	adds	r3, #12
 8003ab0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ab2:	623a      	str	r2, [r7, #32]
 8003ab4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab6:	69f9      	ldr	r1, [r7, #28]
 8003ab8:	6a3a      	ldr	r2, [r7, #32]
 8003aba:	e841 2300 	strex	r3, r2, [r1]
 8003abe:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1e5      	bne.n	8003a92 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0310 	and.w	r3, r3, #16
 8003ad0:	2b10      	cmp	r3, #16
 8003ad2:	d10a      	bne.n	8003aea <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	60fb      	str	r3, [r7, #12]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	60fb      	str	r3, [r7, #12]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	60fb      	str	r3, [r7, #12]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003aee:	4619      	mov	r1, r3
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f7ff fe29 	bl	8003748 <HAL_UARTEx_RxEventCallback>
 8003af6:	e002      	b.n	8003afe <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f7ff fe11 	bl	8003720 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003afe:	2300      	movs	r3, #0
 8003b00:	e002      	b.n	8003b08 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003b02:	2300      	movs	r3, #0
 8003b04:	e000      	b.n	8003b08 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003b06:	2302      	movs	r3, #2
  }
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3730      	adds	r7, #48	; 0x30
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b14:	b0c0      	sub	sp, #256	; 0x100
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b2c:	68d9      	ldr	r1, [r3, #12]
 8003b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	ea40 0301 	orr.w	r3, r0, r1
 8003b38:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b3e:	689a      	ldr	r2, [r3, #8]
 8003b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	431a      	orrs	r2, r3
 8003b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	431a      	orrs	r2, r3
 8003b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b54:	69db      	ldr	r3, [r3, #28]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003b68:	f021 010c 	bic.w	r1, r1, #12
 8003b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003b76:	430b      	orrs	r3, r1
 8003b78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	695b      	ldr	r3, [r3, #20]
 8003b82:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b8a:	6999      	ldr	r1, [r3, #24]
 8003b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	ea40 0301 	orr.w	r3, r0, r1
 8003b96:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	4b8f      	ldr	r3, [pc, #572]	; (8003ddc <UART_SetConfig+0x2cc>)
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d005      	beq.n	8003bb0 <UART_SetConfig+0xa0>
 8003ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	4b8d      	ldr	r3, [pc, #564]	; (8003de0 <UART_SetConfig+0x2d0>)
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d104      	bne.n	8003bba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003bb0:	f7fe fa80 	bl	80020b4 <HAL_RCC_GetPCLK2Freq>
 8003bb4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003bb8:	e003      	b.n	8003bc2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003bba:	f7fe fa67 	bl	800208c <HAL_RCC_GetPCLK1Freq>
 8003bbe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bc6:	69db      	ldr	r3, [r3, #28]
 8003bc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bcc:	f040 810c 	bne.w	8003de8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003bd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003bda:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003bde:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003be2:	4622      	mov	r2, r4
 8003be4:	462b      	mov	r3, r5
 8003be6:	1891      	adds	r1, r2, r2
 8003be8:	65b9      	str	r1, [r7, #88]	; 0x58
 8003bea:	415b      	adcs	r3, r3
 8003bec:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003bee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003bf2:	4621      	mov	r1, r4
 8003bf4:	eb12 0801 	adds.w	r8, r2, r1
 8003bf8:	4629      	mov	r1, r5
 8003bfa:	eb43 0901 	adc.w	r9, r3, r1
 8003bfe:	f04f 0200 	mov.w	r2, #0
 8003c02:	f04f 0300 	mov.w	r3, #0
 8003c06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c12:	4690      	mov	r8, r2
 8003c14:	4699      	mov	r9, r3
 8003c16:	4623      	mov	r3, r4
 8003c18:	eb18 0303 	adds.w	r3, r8, r3
 8003c1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003c20:	462b      	mov	r3, r5
 8003c22:	eb49 0303 	adc.w	r3, r9, r3
 8003c26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003c2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003c36:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003c3a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003c3e:	460b      	mov	r3, r1
 8003c40:	18db      	adds	r3, r3, r3
 8003c42:	653b      	str	r3, [r7, #80]	; 0x50
 8003c44:	4613      	mov	r3, r2
 8003c46:	eb42 0303 	adc.w	r3, r2, r3
 8003c4a:	657b      	str	r3, [r7, #84]	; 0x54
 8003c4c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003c50:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003c54:	f7fc fb0c 	bl	8000270 <__aeabi_uldivmod>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	460b      	mov	r3, r1
 8003c5c:	4b61      	ldr	r3, [pc, #388]	; (8003de4 <UART_SetConfig+0x2d4>)
 8003c5e:	fba3 2302 	umull	r2, r3, r3, r2
 8003c62:	095b      	lsrs	r3, r3, #5
 8003c64:	011c      	lsls	r4, r3, #4
 8003c66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c70:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003c74:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003c78:	4642      	mov	r2, r8
 8003c7a:	464b      	mov	r3, r9
 8003c7c:	1891      	adds	r1, r2, r2
 8003c7e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003c80:	415b      	adcs	r3, r3
 8003c82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c84:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003c88:	4641      	mov	r1, r8
 8003c8a:	eb12 0a01 	adds.w	sl, r2, r1
 8003c8e:	4649      	mov	r1, r9
 8003c90:	eb43 0b01 	adc.w	fp, r3, r1
 8003c94:	f04f 0200 	mov.w	r2, #0
 8003c98:	f04f 0300 	mov.w	r3, #0
 8003c9c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ca0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ca4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ca8:	4692      	mov	sl, r2
 8003caa:	469b      	mov	fp, r3
 8003cac:	4643      	mov	r3, r8
 8003cae:	eb1a 0303 	adds.w	r3, sl, r3
 8003cb2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003cb6:	464b      	mov	r3, r9
 8003cb8:	eb4b 0303 	adc.w	r3, fp, r3
 8003cbc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ccc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003cd0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	18db      	adds	r3, r3, r3
 8003cd8:	643b      	str	r3, [r7, #64]	; 0x40
 8003cda:	4613      	mov	r3, r2
 8003cdc:	eb42 0303 	adc.w	r3, r2, r3
 8003ce0:	647b      	str	r3, [r7, #68]	; 0x44
 8003ce2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003ce6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003cea:	f7fc fac1 	bl	8000270 <__aeabi_uldivmod>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	460b      	mov	r3, r1
 8003cf2:	4611      	mov	r1, r2
 8003cf4:	4b3b      	ldr	r3, [pc, #236]	; (8003de4 <UART_SetConfig+0x2d4>)
 8003cf6:	fba3 2301 	umull	r2, r3, r3, r1
 8003cfa:	095b      	lsrs	r3, r3, #5
 8003cfc:	2264      	movs	r2, #100	; 0x64
 8003cfe:	fb02 f303 	mul.w	r3, r2, r3
 8003d02:	1acb      	subs	r3, r1, r3
 8003d04:	00db      	lsls	r3, r3, #3
 8003d06:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003d0a:	4b36      	ldr	r3, [pc, #216]	; (8003de4 <UART_SetConfig+0x2d4>)
 8003d0c:	fba3 2302 	umull	r2, r3, r3, r2
 8003d10:	095b      	lsrs	r3, r3, #5
 8003d12:	005b      	lsls	r3, r3, #1
 8003d14:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003d18:	441c      	add	r4, r3
 8003d1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d24:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003d28:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003d2c:	4642      	mov	r2, r8
 8003d2e:	464b      	mov	r3, r9
 8003d30:	1891      	adds	r1, r2, r2
 8003d32:	63b9      	str	r1, [r7, #56]	; 0x38
 8003d34:	415b      	adcs	r3, r3
 8003d36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d38:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003d3c:	4641      	mov	r1, r8
 8003d3e:	1851      	adds	r1, r2, r1
 8003d40:	6339      	str	r1, [r7, #48]	; 0x30
 8003d42:	4649      	mov	r1, r9
 8003d44:	414b      	adcs	r3, r1
 8003d46:	637b      	str	r3, [r7, #52]	; 0x34
 8003d48:	f04f 0200 	mov.w	r2, #0
 8003d4c:	f04f 0300 	mov.w	r3, #0
 8003d50:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003d54:	4659      	mov	r1, fp
 8003d56:	00cb      	lsls	r3, r1, #3
 8003d58:	4651      	mov	r1, sl
 8003d5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d5e:	4651      	mov	r1, sl
 8003d60:	00ca      	lsls	r2, r1, #3
 8003d62:	4610      	mov	r0, r2
 8003d64:	4619      	mov	r1, r3
 8003d66:	4603      	mov	r3, r0
 8003d68:	4642      	mov	r2, r8
 8003d6a:	189b      	adds	r3, r3, r2
 8003d6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d70:	464b      	mov	r3, r9
 8003d72:	460a      	mov	r2, r1
 8003d74:	eb42 0303 	adc.w	r3, r2, r3
 8003d78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003d88:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003d8c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003d90:	460b      	mov	r3, r1
 8003d92:	18db      	adds	r3, r3, r3
 8003d94:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d96:	4613      	mov	r3, r2
 8003d98:	eb42 0303 	adc.w	r3, r2, r3
 8003d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003da2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003da6:	f7fc fa63 	bl	8000270 <__aeabi_uldivmod>
 8003daa:	4602      	mov	r2, r0
 8003dac:	460b      	mov	r3, r1
 8003dae:	4b0d      	ldr	r3, [pc, #52]	; (8003de4 <UART_SetConfig+0x2d4>)
 8003db0:	fba3 1302 	umull	r1, r3, r3, r2
 8003db4:	095b      	lsrs	r3, r3, #5
 8003db6:	2164      	movs	r1, #100	; 0x64
 8003db8:	fb01 f303 	mul.w	r3, r1, r3
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	00db      	lsls	r3, r3, #3
 8003dc0:	3332      	adds	r3, #50	; 0x32
 8003dc2:	4a08      	ldr	r2, [pc, #32]	; (8003de4 <UART_SetConfig+0x2d4>)
 8003dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc8:	095b      	lsrs	r3, r3, #5
 8003dca:	f003 0207 	and.w	r2, r3, #7
 8003dce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4422      	add	r2, r4
 8003dd6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003dd8:	e105      	b.n	8003fe6 <UART_SetConfig+0x4d6>
 8003dda:	bf00      	nop
 8003ddc:	40011000 	.word	0x40011000
 8003de0:	40011400 	.word	0x40011400
 8003de4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003de8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003dec:	2200      	movs	r2, #0
 8003dee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003df2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003df6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003dfa:	4642      	mov	r2, r8
 8003dfc:	464b      	mov	r3, r9
 8003dfe:	1891      	adds	r1, r2, r2
 8003e00:	6239      	str	r1, [r7, #32]
 8003e02:	415b      	adcs	r3, r3
 8003e04:	627b      	str	r3, [r7, #36]	; 0x24
 8003e06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e0a:	4641      	mov	r1, r8
 8003e0c:	1854      	adds	r4, r2, r1
 8003e0e:	4649      	mov	r1, r9
 8003e10:	eb43 0501 	adc.w	r5, r3, r1
 8003e14:	f04f 0200 	mov.w	r2, #0
 8003e18:	f04f 0300 	mov.w	r3, #0
 8003e1c:	00eb      	lsls	r3, r5, #3
 8003e1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e22:	00e2      	lsls	r2, r4, #3
 8003e24:	4614      	mov	r4, r2
 8003e26:	461d      	mov	r5, r3
 8003e28:	4643      	mov	r3, r8
 8003e2a:	18e3      	adds	r3, r4, r3
 8003e2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003e30:	464b      	mov	r3, r9
 8003e32:	eb45 0303 	adc.w	r3, r5, r3
 8003e36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003e3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003e46:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003e4a:	f04f 0200 	mov.w	r2, #0
 8003e4e:	f04f 0300 	mov.w	r3, #0
 8003e52:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003e56:	4629      	mov	r1, r5
 8003e58:	008b      	lsls	r3, r1, #2
 8003e5a:	4621      	mov	r1, r4
 8003e5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e60:	4621      	mov	r1, r4
 8003e62:	008a      	lsls	r2, r1, #2
 8003e64:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003e68:	f7fc fa02 	bl	8000270 <__aeabi_uldivmod>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	460b      	mov	r3, r1
 8003e70:	4b60      	ldr	r3, [pc, #384]	; (8003ff4 <UART_SetConfig+0x4e4>)
 8003e72:	fba3 2302 	umull	r2, r3, r3, r2
 8003e76:	095b      	lsrs	r3, r3, #5
 8003e78:	011c      	lsls	r4, r3, #4
 8003e7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003e84:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003e88:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003e8c:	4642      	mov	r2, r8
 8003e8e:	464b      	mov	r3, r9
 8003e90:	1891      	adds	r1, r2, r2
 8003e92:	61b9      	str	r1, [r7, #24]
 8003e94:	415b      	adcs	r3, r3
 8003e96:	61fb      	str	r3, [r7, #28]
 8003e98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e9c:	4641      	mov	r1, r8
 8003e9e:	1851      	adds	r1, r2, r1
 8003ea0:	6139      	str	r1, [r7, #16]
 8003ea2:	4649      	mov	r1, r9
 8003ea4:	414b      	adcs	r3, r1
 8003ea6:	617b      	str	r3, [r7, #20]
 8003ea8:	f04f 0200 	mov.w	r2, #0
 8003eac:	f04f 0300 	mov.w	r3, #0
 8003eb0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003eb4:	4659      	mov	r1, fp
 8003eb6:	00cb      	lsls	r3, r1, #3
 8003eb8:	4651      	mov	r1, sl
 8003eba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ebe:	4651      	mov	r1, sl
 8003ec0:	00ca      	lsls	r2, r1, #3
 8003ec2:	4610      	mov	r0, r2
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	4642      	mov	r2, r8
 8003eca:	189b      	adds	r3, r3, r2
 8003ecc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ed0:	464b      	mov	r3, r9
 8003ed2:	460a      	mov	r2, r1
 8003ed4:	eb42 0303 	adc.w	r3, r2, r3
 8003ed8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ee6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003ee8:	f04f 0200 	mov.w	r2, #0
 8003eec:	f04f 0300 	mov.w	r3, #0
 8003ef0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003ef4:	4649      	mov	r1, r9
 8003ef6:	008b      	lsls	r3, r1, #2
 8003ef8:	4641      	mov	r1, r8
 8003efa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003efe:	4641      	mov	r1, r8
 8003f00:	008a      	lsls	r2, r1, #2
 8003f02:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003f06:	f7fc f9b3 	bl	8000270 <__aeabi_uldivmod>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	460b      	mov	r3, r1
 8003f0e:	4b39      	ldr	r3, [pc, #228]	; (8003ff4 <UART_SetConfig+0x4e4>)
 8003f10:	fba3 1302 	umull	r1, r3, r3, r2
 8003f14:	095b      	lsrs	r3, r3, #5
 8003f16:	2164      	movs	r1, #100	; 0x64
 8003f18:	fb01 f303 	mul.w	r3, r1, r3
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	011b      	lsls	r3, r3, #4
 8003f20:	3332      	adds	r3, #50	; 0x32
 8003f22:	4a34      	ldr	r2, [pc, #208]	; (8003ff4 <UART_SetConfig+0x4e4>)
 8003f24:	fba2 2303 	umull	r2, r3, r2, r3
 8003f28:	095b      	lsrs	r3, r3, #5
 8003f2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f2e:	441c      	add	r4, r3
 8003f30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f34:	2200      	movs	r2, #0
 8003f36:	673b      	str	r3, [r7, #112]	; 0x70
 8003f38:	677a      	str	r2, [r7, #116]	; 0x74
 8003f3a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003f3e:	4642      	mov	r2, r8
 8003f40:	464b      	mov	r3, r9
 8003f42:	1891      	adds	r1, r2, r2
 8003f44:	60b9      	str	r1, [r7, #8]
 8003f46:	415b      	adcs	r3, r3
 8003f48:	60fb      	str	r3, [r7, #12]
 8003f4a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f4e:	4641      	mov	r1, r8
 8003f50:	1851      	adds	r1, r2, r1
 8003f52:	6039      	str	r1, [r7, #0]
 8003f54:	4649      	mov	r1, r9
 8003f56:	414b      	adcs	r3, r1
 8003f58:	607b      	str	r3, [r7, #4]
 8003f5a:	f04f 0200 	mov.w	r2, #0
 8003f5e:	f04f 0300 	mov.w	r3, #0
 8003f62:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003f66:	4659      	mov	r1, fp
 8003f68:	00cb      	lsls	r3, r1, #3
 8003f6a:	4651      	mov	r1, sl
 8003f6c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f70:	4651      	mov	r1, sl
 8003f72:	00ca      	lsls	r2, r1, #3
 8003f74:	4610      	mov	r0, r2
 8003f76:	4619      	mov	r1, r3
 8003f78:	4603      	mov	r3, r0
 8003f7a:	4642      	mov	r2, r8
 8003f7c:	189b      	adds	r3, r3, r2
 8003f7e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f80:	464b      	mov	r3, r9
 8003f82:	460a      	mov	r2, r1
 8003f84:	eb42 0303 	adc.w	r3, r2, r3
 8003f88:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	663b      	str	r3, [r7, #96]	; 0x60
 8003f94:	667a      	str	r2, [r7, #100]	; 0x64
 8003f96:	f04f 0200 	mov.w	r2, #0
 8003f9a:	f04f 0300 	mov.w	r3, #0
 8003f9e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003fa2:	4649      	mov	r1, r9
 8003fa4:	008b      	lsls	r3, r1, #2
 8003fa6:	4641      	mov	r1, r8
 8003fa8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fac:	4641      	mov	r1, r8
 8003fae:	008a      	lsls	r2, r1, #2
 8003fb0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003fb4:	f7fc f95c 	bl	8000270 <__aeabi_uldivmod>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	460b      	mov	r3, r1
 8003fbc:	4b0d      	ldr	r3, [pc, #52]	; (8003ff4 <UART_SetConfig+0x4e4>)
 8003fbe:	fba3 1302 	umull	r1, r3, r3, r2
 8003fc2:	095b      	lsrs	r3, r3, #5
 8003fc4:	2164      	movs	r1, #100	; 0x64
 8003fc6:	fb01 f303 	mul.w	r3, r1, r3
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	011b      	lsls	r3, r3, #4
 8003fce:	3332      	adds	r3, #50	; 0x32
 8003fd0:	4a08      	ldr	r2, [pc, #32]	; (8003ff4 <UART_SetConfig+0x4e4>)
 8003fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd6:	095b      	lsrs	r3, r3, #5
 8003fd8:	f003 020f 	and.w	r2, r3, #15
 8003fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4422      	add	r2, r4
 8003fe4:	609a      	str	r2, [r3, #8]
}
 8003fe6:	bf00      	nop
 8003fe8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003fec:	46bd      	mov	sp, r7
 8003fee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ff2:	bf00      	nop
 8003ff4:	51eb851f 	.word	0x51eb851f

08003ff8 <__NVIC_SetPriority>:
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	4603      	mov	r3, r0
 8004000:	6039      	str	r1, [r7, #0]
 8004002:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004008:	2b00      	cmp	r3, #0
 800400a:	db0a      	blt.n	8004022 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	b2da      	uxtb	r2, r3
 8004010:	490c      	ldr	r1, [pc, #48]	; (8004044 <__NVIC_SetPriority+0x4c>)
 8004012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004016:	0112      	lsls	r2, r2, #4
 8004018:	b2d2      	uxtb	r2, r2
 800401a:	440b      	add	r3, r1
 800401c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004020:	e00a      	b.n	8004038 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	b2da      	uxtb	r2, r3
 8004026:	4908      	ldr	r1, [pc, #32]	; (8004048 <__NVIC_SetPriority+0x50>)
 8004028:	79fb      	ldrb	r3, [r7, #7]
 800402a:	f003 030f 	and.w	r3, r3, #15
 800402e:	3b04      	subs	r3, #4
 8004030:	0112      	lsls	r2, r2, #4
 8004032:	b2d2      	uxtb	r2, r2
 8004034:	440b      	add	r3, r1
 8004036:	761a      	strb	r2, [r3, #24]
}
 8004038:	bf00      	nop
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr
 8004044:	e000e100 	.word	0xe000e100
 8004048:	e000ed00 	.word	0xe000ed00

0800404c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800404c:	b580      	push	{r7, lr}
 800404e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004050:	2100      	movs	r1, #0
 8004052:	f06f 0004 	mvn.w	r0, #4
 8004056:	f7ff ffcf 	bl	8003ff8 <__NVIC_SetPriority>
#endif
}
 800405a:	bf00      	nop
 800405c:	bd80      	pop	{r7, pc}
	...

08004060 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004066:	f3ef 8305 	mrs	r3, IPSR
 800406a:	603b      	str	r3, [r7, #0]
  return(result);
 800406c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800406e:	2b00      	cmp	r3, #0
 8004070:	d003      	beq.n	800407a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004072:	f06f 0305 	mvn.w	r3, #5
 8004076:	607b      	str	r3, [r7, #4]
 8004078:	e00c      	b.n	8004094 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800407a:	4b0a      	ldr	r3, [pc, #40]	; (80040a4 <osKernelInitialize+0x44>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d105      	bne.n	800408e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004082:	4b08      	ldr	r3, [pc, #32]	; (80040a4 <osKernelInitialize+0x44>)
 8004084:	2201      	movs	r2, #1
 8004086:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004088:	2300      	movs	r3, #0
 800408a:	607b      	str	r3, [r7, #4]
 800408c:	e002      	b.n	8004094 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800408e:	f04f 33ff 	mov.w	r3, #4294967295
 8004092:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004094:	687b      	ldr	r3, [r7, #4]
}
 8004096:	4618      	mov	r0, r3
 8004098:	370c      	adds	r7, #12
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	20000190 	.word	0x20000190

080040a8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040ae:	f3ef 8305 	mrs	r3, IPSR
 80040b2:	603b      	str	r3, [r7, #0]
  return(result);
 80040b4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d003      	beq.n	80040c2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80040ba:	f06f 0305 	mvn.w	r3, #5
 80040be:	607b      	str	r3, [r7, #4]
 80040c0:	e010      	b.n	80040e4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80040c2:	4b0b      	ldr	r3, [pc, #44]	; (80040f0 <osKernelStart+0x48>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d109      	bne.n	80040de <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80040ca:	f7ff ffbf 	bl	800404c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80040ce:	4b08      	ldr	r3, [pc, #32]	; (80040f0 <osKernelStart+0x48>)
 80040d0:	2202      	movs	r2, #2
 80040d2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80040d4:	f001 f866 	bl	80051a4 <vTaskStartScheduler>
      stat = osOK;
 80040d8:	2300      	movs	r3, #0
 80040da:	607b      	str	r3, [r7, #4]
 80040dc:	e002      	b.n	80040e4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80040de:	f04f 33ff 	mov.w	r3, #4294967295
 80040e2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80040e4:	687b      	ldr	r3, [r7, #4]
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3708      	adds	r7, #8
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	20000190 	.word	0x20000190

080040f4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b08e      	sub	sp, #56	; 0x38
 80040f8:	af04      	add	r7, sp, #16
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004100:	2300      	movs	r3, #0
 8004102:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004104:	f3ef 8305 	mrs	r3, IPSR
 8004108:	617b      	str	r3, [r7, #20]
  return(result);
 800410a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800410c:	2b00      	cmp	r3, #0
 800410e:	d17e      	bne.n	800420e <osThreadNew+0x11a>
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d07b      	beq.n	800420e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004116:	2380      	movs	r3, #128	; 0x80
 8004118:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800411a:	2318      	movs	r3, #24
 800411c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800411e:	2300      	movs	r3, #0
 8004120:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004122:	f04f 33ff 	mov.w	r3, #4294967295
 8004126:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d045      	beq.n	80041ba <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d002      	beq.n	800413c <osThreadNew+0x48>
        name = attr->name;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	699b      	ldr	r3, [r3, #24]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d002      	beq.n	800414a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	699b      	ldr	r3, [r3, #24]
 8004148:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d008      	beq.n	8004162 <osThreadNew+0x6e>
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	2b38      	cmp	r3, #56	; 0x38
 8004154:	d805      	bhi.n	8004162 <osThreadNew+0x6e>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f003 0301 	and.w	r3, r3, #1
 800415e:	2b00      	cmp	r3, #0
 8004160:	d001      	beq.n	8004166 <osThreadNew+0x72>
        return (NULL);
 8004162:	2300      	movs	r3, #0
 8004164:	e054      	b.n	8004210 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d003      	beq.n	8004176 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	089b      	lsrs	r3, r3, #2
 8004174:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00e      	beq.n	800419c <osThreadNew+0xa8>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	2b5b      	cmp	r3, #91	; 0x5b
 8004184:	d90a      	bls.n	800419c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800418a:	2b00      	cmp	r3, #0
 800418c:	d006      	beq.n	800419c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	695b      	ldr	r3, [r3, #20]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d002      	beq.n	800419c <osThreadNew+0xa8>
        mem = 1;
 8004196:	2301      	movs	r3, #1
 8004198:	61bb      	str	r3, [r7, #24]
 800419a:	e010      	b.n	80041be <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d10c      	bne.n	80041be <osThreadNew+0xca>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d108      	bne.n	80041be <osThreadNew+0xca>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d104      	bne.n	80041be <osThreadNew+0xca>
          mem = 0;
 80041b4:	2300      	movs	r3, #0
 80041b6:	61bb      	str	r3, [r7, #24]
 80041b8:	e001      	b.n	80041be <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80041ba:	2300      	movs	r3, #0
 80041bc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d110      	bne.n	80041e6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80041cc:	9202      	str	r2, [sp, #8]
 80041ce:	9301      	str	r3, [sp, #4]
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	9300      	str	r3, [sp, #0]
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	6a3a      	ldr	r2, [r7, #32]
 80041d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80041da:	68f8      	ldr	r0, [r7, #12]
 80041dc:	f000 fe0c 	bl	8004df8 <xTaskCreateStatic>
 80041e0:	4603      	mov	r3, r0
 80041e2:	613b      	str	r3, [r7, #16]
 80041e4:	e013      	b.n	800420e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d110      	bne.n	800420e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80041ec:	6a3b      	ldr	r3, [r7, #32]
 80041ee:	b29a      	uxth	r2, r3
 80041f0:	f107 0310 	add.w	r3, r7, #16
 80041f4:	9301      	str	r3, [sp, #4]
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	9300      	str	r3, [sp, #0]
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80041fe:	68f8      	ldr	r0, [r7, #12]
 8004200:	f000 fe57 	bl	8004eb2 <xTaskCreate>
 8004204:	4603      	mov	r3, r0
 8004206:	2b01      	cmp	r3, #1
 8004208:	d001      	beq.n	800420e <osThreadNew+0x11a>
            hTask = NULL;
 800420a:	2300      	movs	r3, #0
 800420c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800420e:	693b      	ldr	r3, [r7, #16]
}
 8004210:	4618      	mov	r0, r3
 8004212:	3728      	adds	r7, #40	; 0x28
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004220:	f3ef 8305 	mrs	r3, IPSR
 8004224:	60bb      	str	r3, [r7, #8]
  return(result);
 8004226:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004228:	2b00      	cmp	r3, #0
 800422a:	d003      	beq.n	8004234 <osDelay+0x1c>
    stat = osErrorISR;
 800422c:	f06f 0305 	mvn.w	r3, #5
 8004230:	60fb      	str	r3, [r7, #12]
 8004232:	e007      	b.n	8004244 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004234:	2300      	movs	r3, #0
 8004236:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d002      	beq.n	8004244 <osDelay+0x2c>
      vTaskDelay(ticks);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 ff7c 	bl	800513c <vTaskDelay>
    }
  }

  return (stat);
 8004244:	68fb      	ldr	r3, [r7, #12]
}
 8004246:	4618      	mov	r0, r3
 8004248:	3710      	adds	r7, #16
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
	...

08004250 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004250:	b480      	push	{r7}
 8004252:	b085      	sub	sp, #20
 8004254:	af00      	add	r7, sp, #0
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	60b9      	str	r1, [r7, #8]
 800425a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	4a07      	ldr	r2, [pc, #28]	; (800427c <vApplicationGetIdleTaskMemory+0x2c>)
 8004260:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	4a06      	ldr	r2, [pc, #24]	; (8004280 <vApplicationGetIdleTaskMemory+0x30>)
 8004266:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2280      	movs	r2, #128	; 0x80
 800426c:	601a      	str	r2, [r3, #0]
}
 800426e:	bf00      	nop
 8004270:	3714      	adds	r7, #20
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	20000194 	.word	0x20000194
 8004280:	200001f0 	.word	0x200001f0

08004284 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004284:	b480      	push	{r7}
 8004286:	b085      	sub	sp, #20
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	4a07      	ldr	r2, [pc, #28]	; (80042b0 <vApplicationGetTimerTaskMemory+0x2c>)
 8004294:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	4a06      	ldr	r2, [pc, #24]	; (80042b4 <vApplicationGetTimerTaskMemory+0x30>)
 800429a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80042a2:	601a      	str	r2, [r3, #0]
}
 80042a4:	bf00      	nop
 80042a6:	3714      	adds	r7, #20
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr
 80042b0:	200003f0 	.word	0x200003f0
 80042b4:	2000044c 	.word	0x2000044c

080042b8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f103 0208 	add.w	r2, r3, #8
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f04f 32ff 	mov.w	r2, #4294967295
 80042d0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f103 0208 	add.w	r2, r3, #8
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f103 0208 	add.w	r2, r3, #8
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80042ec:	bf00      	nop
 80042ee:	370c      	adds	r7, #12
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004306:	bf00      	nop
 8004308:	370c      	adds	r7, #12
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr

08004312 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004312:	b480      	push	{r7}
 8004314:	b085      	sub	sp, #20
 8004316:	af00      	add	r7, sp, #0
 8004318:	6078      	str	r0, [r7, #4]
 800431a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	68fa      	ldr	r2, [r7, #12]
 8004326:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	689a      	ldr	r2, [r3, #8]
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	683a      	ldr	r2, [r7, #0]
 8004336:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	683a      	ldr	r2, [r7, #0]
 800433c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	1c5a      	adds	r2, r3, #1
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	601a      	str	r2, [r3, #0]
}
 800434e:	bf00      	nop
 8004350:	3714      	adds	r7, #20
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr

0800435a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800435a:	b480      	push	{r7}
 800435c:	b085      	sub	sp, #20
 800435e:	af00      	add	r7, sp, #0
 8004360:	6078      	str	r0, [r7, #4]
 8004362:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004370:	d103      	bne.n	800437a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	60fb      	str	r3, [r7, #12]
 8004378:	e00c      	b.n	8004394 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	3308      	adds	r3, #8
 800437e:	60fb      	str	r3, [r7, #12]
 8004380:	e002      	b.n	8004388 <vListInsert+0x2e>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	60fb      	str	r3, [r7, #12]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68ba      	ldr	r2, [r7, #8]
 8004390:	429a      	cmp	r2, r3
 8004392:	d2f6      	bcs.n	8004382 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	685a      	ldr	r2, [r3, #4]
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	683a      	ldr	r2, [r7, #0]
 80043a2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	68fa      	ldr	r2, [r7, #12]
 80043a8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	683a      	ldr	r2, [r7, #0]
 80043ae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	1c5a      	adds	r2, r3, #1
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	601a      	str	r2, [r3, #0]
}
 80043c0:	bf00      	nop
 80043c2:	3714      	adds	r7, #20
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80043cc:	b480      	push	{r7}
 80043ce:	b085      	sub	sp, #20
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	691b      	ldr	r3, [r3, #16]
 80043d8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	6892      	ldr	r2, [r2, #8]
 80043e2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	6852      	ldr	r2, [r2, #4]
 80043ec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d103      	bne.n	8004400 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	689a      	ldr	r2, [r3, #8]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	1e5a      	subs	r2, r3, #1
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
}
 8004414:	4618      	mov	r0, r3
 8004416:	3714      	adds	r7, #20
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d10a      	bne.n	800444a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004438:	f383 8811 	msr	BASEPRI, r3
 800443c:	f3bf 8f6f 	isb	sy
 8004440:	f3bf 8f4f 	dsb	sy
 8004444:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004446:	bf00      	nop
 8004448:	e7fe      	b.n	8004448 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800444a:	f002 f84b 	bl	80064e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004456:	68f9      	ldr	r1, [r7, #12]
 8004458:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800445a:	fb01 f303 	mul.w	r3, r1, r3
 800445e:	441a      	add	r2, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2200      	movs	r2, #0
 8004468:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800447a:	3b01      	subs	r3, #1
 800447c:	68f9      	ldr	r1, [r7, #12]
 800447e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004480:	fb01 f303 	mul.w	r3, r1, r3
 8004484:	441a      	add	r2, r3
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	22ff      	movs	r2, #255	; 0xff
 800448e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	22ff      	movs	r2, #255	; 0xff
 8004496:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d114      	bne.n	80044ca <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d01a      	beq.n	80044de <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	3310      	adds	r3, #16
 80044ac:	4618      	mov	r0, r3
 80044ae:	f001 f903 	bl	80056b8 <xTaskRemoveFromEventList>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d012      	beq.n	80044de <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80044b8:	4b0c      	ldr	r3, [pc, #48]	; (80044ec <xQueueGenericReset+0xcc>)
 80044ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044be:	601a      	str	r2, [r3, #0]
 80044c0:	f3bf 8f4f 	dsb	sy
 80044c4:	f3bf 8f6f 	isb	sy
 80044c8:	e009      	b.n	80044de <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	3310      	adds	r3, #16
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7ff fef2 	bl	80042b8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	3324      	adds	r3, #36	; 0x24
 80044d8:	4618      	mov	r0, r3
 80044da:	f7ff feed 	bl	80042b8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80044de:	f002 f831 	bl	8006544 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80044e2:	2301      	movs	r3, #1
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3710      	adds	r7, #16
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}
 80044ec:	e000ed04 	.word	0xe000ed04

080044f0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b08e      	sub	sp, #56	; 0x38
 80044f4:	af02      	add	r7, sp, #8
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	60b9      	str	r1, [r7, #8]
 80044fa:	607a      	str	r2, [r7, #4]
 80044fc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d10a      	bne.n	800451a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004508:	f383 8811 	msr	BASEPRI, r3
 800450c:	f3bf 8f6f 	isb	sy
 8004510:	f3bf 8f4f 	dsb	sy
 8004514:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004516:	bf00      	nop
 8004518:	e7fe      	b.n	8004518 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d10a      	bne.n	8004536 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004524:	f383 8811 	msr	BASEPRI, r3
 8004528:	f3bf 8f6f 	isb	sy
 800452c:	f3bf 8f4f 	dsb	sy
 8004530:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004532:	bf00      	nop
 8004534:	e7fe      	b.n	8004534 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d002      	beq.n	8004542 <xQueueGenericCreateStatic+0x52>
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d001      	beq.n	8004546 <xQueueGenericCreateStatic+0x56>
 8004542:	2301      	movs	r3, #1
 8004544:	e000      	b.n	8004548 <xQueueGenericCreateStatic+0x58>
 8004546:	2300      	movs	r3, #0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d10a      	bne.n	8004562 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800454c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004550:	f383 8811 	msr	BASEPRI, r3
 8004554:	f3bf 8f6f 	isb	sy
 8004558:	f3bf 8f4f 	dsb	sy
 800455c:	623b      	str	r3, [r7, #32]
}
 800455e:	bf00      	nop
 8004560:	e7fe      	b.n	8004560 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d102      	bne.n	800456e <xQueueGenericCreateStatic+0x7e>
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d101      	bne.n	8004572 <xQueueGenericCreateStatic+0x82>
 800456e:	2301      	movs	r3, #1
 8004570:	e000      	b.n	8004574 <xQueueGenericCreateStatic+0x84>
 8004572:	2300      	movs	r3, #0
 8004574:	2b00      	cmp	r3, #0
 8004576:	d10a      	bne.n	800458e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800457c:	f383 8811 	msr	BASEPRI, r3
 8004580:	f3bf 8f6f 	isb	sy
 8004584:	f3bf 8f4f 	dsb	sy
 8004588:	61fb      	str	r3, [r7, #28]
}
 800458a:	bf00      	nop
 800458c:	e7fe      	b.n	800458c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800458e:	2350      	movs	r3, #80	; 0x50
 8004590:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	2b50      	cmp	r3, #80	; 0x50
 8004596:	d00a      	beq.n	80045ae <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800459c:	f383 8811 	msr	BASEPRI, r3
 80045a0:	f3bf 8f6f 	isb	sy
 80045a4:	f3bf 8f4f 	dsb	sy
 80045a8:	61bb      	str	r3, [r7, #24]
}
 80045aa:	bf00      	nop
 80045ac:	e7fe      	b.n	80045ac <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80045ae:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80045b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00d      	beq.n	80045d6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80045ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045bc:	2201      	movs	r2, #1
 80045be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80045c2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80045c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c8:	9300      	str	r3, [sp, #0]
 80045ca:	4613      	mov	r3, r2
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	68b9      	ldr	r1, [r7, #8]
 80045d0:	68f8      	ldr	r0, [r7, #12]
 80045d2:	f000 f805 	bl	80045e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80045d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80045d8:	4618      	mov	r0, r3
 80045da:	3730      	adds	r7, #48	; 0x30
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	60b9      	str	r1, [r7, #8]
 80045ea:	607a      	str	r2, [r7, #4]
 80045ec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d103      	bne.n	80045fc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	69ba      	ldr	r2, [r7, #24]
 80045f8:	601a      	str	r2, [r3, #0]
 80045fa:	e002      	b.n	8004602 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	68fa      	ldr	r2, [r7, #12]
 8004606:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004608:	69bb      	ldr	r3, [r7, #24]
 800460a:	68ba      	ldr	r2, [r7, #8]
 800460c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800460e:	2101      	movs	r1, #1
 8004610:	69b8      	ldr	r0, [r7, #24]
 8004612:	f7ff ff05 	bl	8004420 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	78fa      	ldrb	r2, [r7, #3]
 800461a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800461e:	bf00      	nop
 8004620:	3710      	adds	r7, #16
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
	...

08004628 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b08e      	sub	sp, #56	; 0x38
 800462c:	af00      	add	r7, sp, #0
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	607a      	str	r2, [r7, #4]
 8004634:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004636:	2300      	movs	r3, #0
 8004638:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800463e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004640:	2b00      	cmp	r3, #0
 8004642:	d10a      	bne.n	800465a <xQueueGenericSend+0x32>
	__asm volatile
 8004644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004648:	f383 8811 	msr	BASEPRI, r3
 800464c:	f3bf 8f6f 	isb	sy
 8004650:	f3bf 8f4f 	dsb	sy
 8004654:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004656:	bf00      	nop
 8004658:	e7fe      	b.n	8004658 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d103      	bne.n	8004668 <xQueueGenericSend+0x40>
 8004660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004664:	2b00      	cmp	r3, #0
 8004666:	d101      	bne.n	800466c <xQueueGenericSend+0x44>
 8004668:	2301      	movs	r3, #1
 800466a:	e000      	b.n	800466e <xQueueGenericSend+0x46>
 800466c:	2300      	movs	r3, #0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d10a      	bne.n	8004688 <xQueueGenericSend+0x60>
	__asm volatile
 8004672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004676:	f383 8811 	msr	BASEPRI, r3
 800467a:	f3bf 8f6f 	isb	sy
 800467e:	f3bf 8f4f 	dsb	sy
 8004682:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004684:	bf00      	nop
 8004686:	e7fe      	b.n	8004686 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	2b02      	cmp	r3, #2
 800468c:	d103      	bne.n	8004696 <xQueueGenericSend+0x6e>
 800468e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004692:	2b01      	cmp	r3, #1
 8004694:	d101      	bne.n	800469a <xQueueGenericSend+0x72>
 8004696:	2301      	movs	r3, #1
 8004698:	e000      	b.n	800469c <xQueueGenericSend+0x74>
 800469a:	2300      	movs	r3, #0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d10a      	bne.n	80046b6 <xQueueGenericSend+0x8e>
	__asm volatile
 80046a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a4:	f383 8811 	msr	BASEPRI, r3
 80046a8:	f3bf 8f6f 	isb	sy
 80046ac:	f3bf 8f4f 	dsb	sy
 80046b0:	623b      	str	r3, [r7, #32]
}
 80046b2:	bf00      	nop
 80046b4:	e7fe      	b.n	80046b4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80046b6:	f001 f9bd 	bl	8005a34 <xTaskGetSchedulerState>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d102      	bne.n	80046c6 <xQueueGenericSend+0x9e>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d101      	bne.n	80046ca <xQueueGenericSend+0xa2>
 80046c6:	2301      	movs	r3, #1
 80046c8:	e000      	b.n	80046cc <xQueueGenericSend+0xa4>
 80046ca:	2300      	movs	r3, #0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d10a      	bne.n	80046e6 <xQueueGenericSend+0xbe>
	__asm volatile
 80046d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d4:	f383 8811 	msr	BASEPRI, r3
 80046d8:	f3bf 8f6f 	isb	sy
 80046dc:	f3bf 8f4f 	dsb	sy
 80046e0:	61fb      	str	r3, [r7, #28]
}
 80046e2:	bf00      	nop
 80046e4:	e7fe      	b.n	80046e4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80046e6:	f001 fefd 	bl	80064e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80046ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d302      	bcc.n	80046fc <xQueueGenericSend+0xd4>
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d129      	bne.n	8004750 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80046fc:	683a      	ldr	r2, [r7, #0]
 80046fe:	68b9      	ldr	r1, [r7, #8]
 8004700:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004702:	f000 fa0b 	bl	8004b1c <prvCopyDataToQueue>
 8004706:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800470a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470c:	2b00      	cmp	r3, #0
 800470e:	d010      	beq.n	8004732 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004712:	3324      	adds	r3, #36	; 0x24
 8004714:	4618      	mov	r0, r3
 8004716:	f000 ffcf 	bl	80056b8 <xTaskRemoveFromEventList>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d013      	beq.n	8004748 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004720:	4b3f      	ldr	r3, [pc, #252]	; (8004820 <xQueueGenericSend+0x1f8>)
 8004722:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004726:	601a      	str	r2, [r3, #0]
 8004728:	f3bf 8f4f 	dsb	sy
 800472c:	f3bf 8f6f 	isb	sy
 8004730:	e00a      	b.n	8004748 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004734:	2b00      	cmp	r3, #0
 8004736:	d007      	beq.n	8004748 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004738:	4b39      	ldr	r3, [pc, #228]	; (8004820 <xQueueGenericSend+0x1f8>)
 800473a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800473e:	601a      	str	r2, [r3, #0]
 8004740:	f3bf 8f4f 	dsb	sy
 8004744:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004748:	f001 fefc 	bl	8006544 <vPortExitCritical>
				return pdPASS;
 800474c:	2301      	movs	r3, #1
 800474e:	e063      	b.n	8004818 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d103      	bne.n	800475e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004756:	f001 fef5 	bl	8006544 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800475a:	2300      	movs	r3, #0
 800475c:	e05c      	b.n	8004818 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800475e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004760:	2b00      	cmp	r3, #0
 8004762:	d106      	bne.n	8004772 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004764:	f107 0314 	add.w	r3, r7, #20
 8004768:	4618      	mov	r0, r3
 800476a:	f001 f809 	bl	8005780 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800476e:	2301      	movs	r3, #1
 8004770:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004772:	f001 fee7 	bl	8006544 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004776:	f000 fd7b 	bl	8005270 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800477a:	f001 feb3 	bl	80064e4 <vPortEnterCritical>
 800477e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004780:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004784:	b25b      	sxtb	r3, r3
 8004786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800478a:	d103      	bne.n	8004794 <xQueueGenericSend+0x16c>
 800478c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800478e:	2200      	movs	r2, #0
 8004790:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004796:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800479a:	b25b      	sxtb	r3, r3
 800479c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047a0:	d103      	bne.n	80047aa <xQueueGenericSend+0x182>
 80047a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047aa:	f001 fecb 	bl	8006544 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80047ae:	1d3a      	adds	r2, r7, #4
 80047b0:	f107 0314 	add.w	r3, r7, #20
 80047b4:	4611      	mov	r1, r2
 80047b6:	4618      	mov	r0, r3
 80047b8:	f000 fff8 	bl	80057ac <xTaskCheckForTimeOut>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d124      	bne.n	800480c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80047c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047c4:	f000 faa2 	bl	8004d0c <prvIsQueueFull>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d018      	beq.n	8004800 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80047ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d0:	3310      	adds	r3, #16
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	4611      	mov	r1, r2
 80047d6:	4618      	mov	r0, r3
 80047d8:	f000 ff1e 	bl	8005618 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80047dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047de:	f000 fa2d 	bl	8004c3c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80047e2:	f000 fd53 	bl	800528c <xTaskResumeAll>
 80047e6:	4603      	mov	r3, r0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	f47f af7c 	bne.w	80046e6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80047ee:	4b0c      	ldr	r3, [pc, #48]	; (8004820 <xQueueGenericSend+0x1f8>)
 80047f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047f4:	601a      	str	r2, [r3, #0]
 80047f6:	f3bf 8f4f 	dsb	sy
 80047fa:	f3bf 8f6f 	isb	sy
 80047fe:	e772      	b.n	80046e6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004800:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004802:	f000 fa1b 	bl	8004c3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004806:	f000 fd41 	bl	800528c <xTaskResumeAll>
 800480a:	e76c      	b.n	80046e6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800480c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800480e:	f000 fa15 	bl	8004c3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004812:	f000 fd3b 	bl	800528c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004816:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004818:	4618      	mov	r0, r3
 800481a:	3738      	adds	r7, #56	; 0x38
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}
 8004820:	e000ed04 	.word	0xe000ed04

08004824 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b090      	sub	sp, #64	; 0x40
 8004828:	af00      	add	r7, sp, #0
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	60b9      	str	r1, [r7, #8]
 800482e:	607a      	str	r2, [r7, #4]
 8004830:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004838:	2b00      	cmp	r3, #0
 800483a:	d10a      	bne.n	8004852 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800483c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004840:	f383 8811 	msr	BASEPRI, r3
 8004844:	f3bf 8f6f 	isb	sy
 8004848:	f3bf 8f4f 	dsb	sy
 800484c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800484e:	bf00      	nop
 8004850:	e7fe      	b.n	8004850 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d103      	bne.n	8004860 <xQueueGenericSendFromISR+0x3c>
 8004858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800485a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485c:	2b00      	cmp	r3, #0
 800485e:	d101      	bne.n	8004864 <xQueueGenericSendFromISR+0x40>
 8004860:	2301      	movs	r3, #1
 8004862:	e000      	b.n	8004866 <xQueueGenericSendFromISR+0x42>
 8004864:	2300      	movs	r3, #0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d10a      	bne.n	8004880 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800486a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800486e:	f383 8811 	msr	BASEPRI, r3
 8004872:	f3bf 8f6f 	isb	sy
 8004876:	f3bf 8f4f 	dsb	sy
 800487a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800487c:	bf00      	nop
 800487e:	e7fe      	b.n	800487e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	2b02      	cmp	r3, #2
 8004884:	d103      	bne.n	800488e <xQueueGenericSendFromISR+0x6a>
 8004886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800488a:	2b01      	cmp	r3, #1
 800488c:	d101      	bne.n	8004892 <xQueueGenericSendFromISR+0x6e>
 800488e:	2301      	movs	r3, #1
 8004890:	e000      	b.n	8004894 <xQueueGenericSendFromISR+0x70>
 8004892:	2300      	movs	r3, #0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d10a      	bne.n	80048ae <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800489c:	f383 8811 	msr	BASEPRI, r3
 80048a0:	f3bf 8f6f 	isb	sy
 80048a4:	f3bf 8f4f 	dsb	sy
 80048a8:	623b      	str	r3, [r7, #32]
}
 80048aa:	bf00      	nop
 80048ac:	e7fe      	b.n	80048ac <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80048ae:	f001 fefb 	bl	80066a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80048b2:	f3ef 8211 	mrs	r2, BASEPRI
 80048b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ba:	f383 8811 	msr	BASEPRI, r3
 80048be:	f3bf 8f6f 	isb	sy
 80048c2:	f3bf 8f4f 	dsb	sy
 80048c6:	61fa      	str	r2, [r7, #28]
 80048c8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80048ca:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80048cc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80048ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d302      	bcc.n	80048e0 <xQueueGenericSendFromISR+0xbc>
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	2b02      	cmp	r3, #2
 80048de:	d12f      	bne.n	8004940 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80048e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80048ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ee:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80048f0:	683a      	ldr	r2, [r7, #0]
 80048f2:	68b9      	ldr	r1, [r7, #8]
 80048f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80048f6:	f000 f911 	bl	8004b1c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80048fa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80048fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004902:	d112      	bne.n	800492a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004908:	2b00      	cmp	r3, #0
 800490a:	d016      	beq.n	800493a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800490c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800490e:	3324      	adds	r3, #36	; 0x24
 8004910:	4618      	mov	r0, r3
 8004912:	f000 fed1 	bl	80056b8 <xTaskRemoveFromEventList>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d00e      	beq.n	800493a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00b      	beq.n	800493a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2201      	movs	r2, #1
 8004926:	601a      	str	r2, [r3, #0]
 8004928:	e007      	b.n	800493a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800492a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800492e:	3301      	adds	r3, #1
 8004930:	b2db      	uxtb	r3, r3
 8004932:	b25a      	sxtb	r2, r3
 8004934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004936:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800493a:	2301      	movs	r3, #1
 800493c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800493e:	e001      	b.n	8004944 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004940:	2300      	movs	r3, #0
 8004942:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004946:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800494e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004952:	4618      	mov	r0, r3
 8004954:	3740      	adds	r7, #64	; 0x40
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
	...

0800495c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b08c      	sub	sp, #48	; 0x30
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004968:	2300      	movs	r3, #0
 800496a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004972:	2b00      	cmp	r3, #0
 8004974:	d10a      	bne.n	800498c <xQueueReceive+0x30>
	__asm volatile
 8004976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800497a:	f383 8811 	msr	BASEPRI, r3
 800497e:	f3bf 8f6f 	isb	sy
 8004982:	f3bf 8f4f 	dsb	sy
 8004986:	623b      	str	r3, [r7, #32]
}
 8004988:	bf00      	nop
 800498a:	e7fe      	b.n	800498a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d103      	bne.n	800499a <xQueueReceive+0x3e>
 8004992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004996:	2b00      	cmp	r3, #0
 8004998:	d101      	bne.n	800499e <xQueueReceive+0x42>
 800499a:	2301      	movs	r3, #1
 800499c:	e000      	b.n	80049a0 <xQueueReceive+0x44>
 800499e:	2300      	movs	r3, #0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d10a      	bne.n	80049ba <xQueueReceive+0x5e>
	__asm volatile
 80049a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a8:	f383 8811 	msr	BASEPRI, r3
 80049ac:	f3bf 8f6f 	isb	sy
 80049b0:	f3bf 8f4f 	dsb	sy
 80049b4:	61fb      	str	r3, [r7, #28]
}
 80049b6:	bf00      	nop
 80049b8:	e7fe      	b.n	80049b8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80049ba:	f001 f83b 	bl	8005a34 <xTaskGetSchedulerState>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d102      	bne.n	80049ca <xQueueReceive+0x6e>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d101      	bne.n	80049ce <xQueueReceive+0x72>
 80049ca:	2301      	movs	r3, #1
 80049cc:	e000      	b.n	80049d0 <xQueueReceive+0x74>
 80049ce:	2300      	movs	r3, #0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d10a      	bne.n	80049ea <xQueueReceive+0x8e>
	__asm volatile
 80049d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d8:	f383 8811 	msr	BASEPRI, r3
 80049dc:	f3bf 8f6f 	isb	sy
 80049e0:	f3bf 8f4f 	dsb	sy
 80049e4:	61bb      	str	r3, [r7, #24]
}
 80049e6:	bf00      	nop
 80049e8:	e7fe      	b.n	80049e8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80049ea:	f001 fd7b 	bl	80064e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80049ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80049f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d01f      	beq.n	8004a3a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80049fa:	68b9      	ldr	r1, [r7, #8]
 80049fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049fe:	f000 f8f7 	bl	8004bf0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a04:	1e5a      	subs	r2, r3, #1
 8004a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a08:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d00f      	beq.n	8004a32 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a14:	3310      	adds	r3, #16
 8004a16:	4618      	mov	r0, r3
 8004a18:	f000 fe4e 	bl	80056b8 <xTaskRemoveFromEventList>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d007      	beq.n	8004a32 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004a22:	4b3d      	ldr	r3, [pc, #244]	; (8004b18 <xQueueReceive+0x1bc>)
 8004a24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a28:	601a      	str	r2, [r3, #0]
 8004a2a:	f3bf 8f4f 	dsb	sy
 8004a2e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004a32:	f001 fd87 	bl	8006544 <vPortExitCritical>
				return pdPASS;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e069      	b.n	8004b0e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d103      	bne.n	8004a48 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004a40:	f001 fd80 	bl	8006544 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004a44:	2300      	movs	r3, #0
 8004a46:	e062      	b.n	8004b0e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d106      	bne.n	8004a5c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a4e:	f107 0310 	add.w	r3, r7, #16
 8004a52:	4618      	mov	r0, r3
 8004a54:	f000 fe94 	bl	8005780 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004a5c:	f001 fd72 	bl	8006544 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004a60:	f000 fc06 	bl	8005270 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004a64:	f001 fd3e 	bl	80064e4 <vPortEnterCritical>
 8004a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a6e:	b25b      	sxtb	r3, r3
 8004a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a74:	d103      	bne.n	8004a7e <xQueueReceive+0x122>
 8004a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a84:	b25b      	sxtb	r3, r3
 8004a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a8a:	d103      	bne.n	8004a94 <xQueueReceive+0x138>
 8004a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a94:	f001 fd56 	bl	8006544 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a98:	1d3a      	adds	r2, r7, #4
 8004a9a:	f107 0310 	add.w	r3, r7, #16
 8004a9e:	4611      	mov	r1, r2
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f000 fe83 	bl	80057ac <xTaskCheckForTimeOut>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d123      	bne.n	8004af4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004aac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004aae:	f000 f917 	bl	8004ce0 <prvIsQueueEmpty>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d017      	beq.n	8004ae8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aba:	3324      	adds	r3, #36	; 0x24
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	4611      	mov	r1, r2
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f000 fda9 	bl	8005618 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004ac6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ac8:	f000 f8b8 	bl	8004c3c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004acc:	f000 fbde 	bl	800528c <xTaskResumeAll>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d189      	bne.n	80049ea <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004ad6:	4b10      	ldr	r3, [pc, #64]	; (8004b18 <xQueueReceive+0x1bc>)
 8004ad8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004adc:	601a      	str	r2, [r3, #0]
 8004ade:	f3bf 8f4f 	dsb	sy
 8004ae2:	f3bf 8f6f 	isb	sy
 8004ae6:	e780      	b.n	80049ea <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004ae8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004aea:	f000 f8a7 	bl	8004c3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004aee:	f000 fbcd 	bl	800528c <xTaskResumeAll>
 8004af2:	e77a      	b.n	80049ea <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004af4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004af6:	f000 f8a1 	bl	8004c3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004afa:	f000 fbc7 	bl	800528c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004afe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b00:	f000 f8ee 	bl	8004ce0 <prvIsQueueEmpty>
 8004b04:	4603      	mov	r3, r0
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	f43f af6f 	beq.w	80049ea <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004b0c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3730      	adds	r7, #48	; 0x30
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	e000ed04 	.word	0xe000ed04

08004b1c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b086      	sub	sp, #24
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b30:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d10d      	bne.n	8004b56 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d14d      	bne.n	8004bde <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	4618      	mov	r0, r3
 8004b48:	f000 ff92 	bl	8005a70 <xTaskPriorityDisinherit>
 8004b4c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	609a      	str	r2, [r3, #8]
 8004b54:	e043      	b.n	8004bde <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d119      	bne.n	8004b90 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6858      	ldr	r0, [r3, #4]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b64:	461a      	mov	r2, r3
 8004b66:	68b9      	ldr	r1, [r7, #8]
 8004b68:	f002 fa24 	bl	8006fb4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	685a      	ldr	r2, [r3, #4]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b74:	441a      	add	r2, r3
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	685a      	ldr	r2, [r3, #4]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d32b      	bcc.n	8004bde <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	605a      	str	r2, [r3, #4]
 8004b8e:	e026      	b.n	8004bde <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	68d8      	ldr	r0, [r3, #12]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b98:	461a      	mov	r2, r3
 8004b9a:	68b9      	ldr	r1, [r7, #8]
 8004b9c:	f002 fa0a 	bl	8006fb4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	68da      	ldr	r2, [r3, #12]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba8:	425b      	negs	r3, r3
 8004baa:	441a      	add	r2, r3
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	68da      	ldr	r2, [r3, #12]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d207      	bcs.n	8004bcc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	689a      	ldr	r2, [r3, #8]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc4:	425b      	negs	r3, r3
 8004bc6:	441a      	add	r2, r3
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2b02      	cmp	r3, #2
 8004bd0:	d105      	bne.n	8004bde <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d002      	beq.n	8004bde <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	3b01      	subs	r3, #1
 8004bdc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	1c5a      	adds	r2, r3, #1
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004be6:	697b      	ldr	r3, [r7, #20]
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3718      	adds	r7, #24
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b082      	sub	sp, #8
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d018      	beq.n	8004c34 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	68da      	ldr	r2, [r3, #12]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0a:	441a      	add	r2, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	68da      	ldr	r2, [r3, #12]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d303      	bcc.n	8004c24 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	68d9      	ldr	r1, [r3, #12]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	6838      	ldr	r0, [r7, #0]
 8004c30:	f002 f9c0 	bl	8006fb4 <memcpy>
	}
}
 8004c34:	bf00      	nop
 8004c36:	3708      	adds	r7, #8
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004c44:	f001 fc4e 	bl	80064e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c4e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004c50:	e011      	b.n	8004c76 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d012      	beq.n	8004c80 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	3324      	adds	r3, #36	; 0x24
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f000 fd2a 	bl	80056b8 <xTaskRemoveFromEventList>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d001      	beq.n	8004c6e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004c6a:	f000 fe01 	bl	8005870 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004c6e:	7bfb      	ldrb	r3, [r7, #15]
 8004c70:	3b01      	subs	r3, #1
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	dce9      	bgt.n	8004c52 <prvUnlockQueue+0x16>
 8004c7e:	e000      	b.n	8004c82 <prvUnlockQueue+0x46>
					break;
 8004c80:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	22ff      	movs	r2, #255	; 0xff
 8004c86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004c8a:	f001 fc5b 	bl	8006544 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004c8e:	f001 fc29 	bl	80064e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c98:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004c9a:	e011      	b.n	8004cc0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	691b      	ldr	r3, [r3, #16]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d012      	beq.n	8004cca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	3310      	adds	r3, #16
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f000 fd05 	bl	80056b8 <xTaskRemoveFromEventList>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d001      	beq.n	8004cb8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004cb4:	f000 fddc 	bl	8005870 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004cb8:	7bbb      	ldrb	r3, [r7, #14]
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004cc0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	dce9      	bgt.n	8004c9c <prvUnlockQueue+0x60>
 8004cc8:	e000      	b.n	8004ccc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004cca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	22ff      	movs	r2, #255	; 0xff
 8004cd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004cd4:	f001 fc36 	bl	8006544 <vPortExitCritical>
}
 8004cd8:	bf00      	nop
 8004cda:	3710      	adds	r7, #16
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b084      	sub	sp, #16
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004ce8:	f001 fbfc 	bl	80064e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d102      	bne.n	8004cfa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	60fb      	str	r3, [r7, #12]
 8004cf8:	e001      	b.n	8004cfe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004cfe:	f001 fc21 	bl	8006544 <vPortExitCritical>

	return xReturn;
 8004d02:	68fb      	ldr	r3, [r7, #12]
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3710      	adds	r7, #16
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004d14:	f001 fbe6 	bl	80064e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d102      	bne.n	8004d2a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004d24:	2301      	movs	r3, #1
 8004d26:	60fb      	str	r3, [r7, #12]
 8004d28:	e001      	b.n	8004d2e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004d2e:	f001 fc09 	bl	8006544 <vPortExitCritical>

	return xReturn;
 8004d32:	68fb      	ldr	r3, [r7, #12]
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3710      	adds	r7, #16
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b085      	sub	sp, #20
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004d46:	2300      	movs	r3, #0
 8004d48:	60fb      	str	r3, [r7, #12]
 8004d4a:	e014      	b.n	8004d76 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004d4c:	4a0f      	ldr	r2, [pc, #60]	; (8004d8c <vQueueAddToRegistry+0x50>)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d10b      	bne.n	8004d70 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004d58:	490c      	ldr	r1, [pc, #48]	; (8004d8c <vQueueAddToRegistry+0x50>)
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	683a      	ldr	r2, [r7, #0]
 8004d5e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004d62:	4a0a      	ldr	r2, [pc, #40]	; (8004d8c <vQueueAddToRegistry+0x50>)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	00db      	lsls	r3, r3, #3
 8004d68:	4413      	add	r3, r2
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004d6e:	e006      	b.n	8004d7e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	3301      	adds	r3, #1
 8004d74:	60fb      	str	r3, [r7, #12]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2b07      	cmp	r3, #7
 8004d7a:	d9e7      	bls.n	8004d4c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004d7c:	bf00      	nop
 8004d7e:	bf00      	nop
 8004d80:	3714      	adds	r7, #20
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr
 8004d8a:	bf00      	nop
 8004d8c:	2000084c 	.word	0x2000084c

08004d90 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b086      	sub	sp, #24
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	60b9      	str	r1, [r7, #8]
 8004d9a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004da0:	f001 fba0 	bl	80064e4 <vPortEnterCritical>
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004daa:	b25b      	sxtb	r3, r3
 8004dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004db0:	d103      	bne.n	8004dba <vQueueWaitForMessageRestricted+0x2a>
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004dc0:	b25b      	sxtb	r3, r3
 8004dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dc6:	d103      	bne.n	8004dd0 <vQueueWaitForMessageRestricted+0x40>
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004dd0:	f001 fbb8 	bl	8006544 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d106      	bne.n	8004dea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	3324      	adds	r3, #36	; 0x24
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	68b9      	ldr	r1, [r7, #8]
 8004de4:	4618      	mov	r0, r3
 8004de6:	f000 fc3b 	bl	8005660 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004dea:	6978      	ldr	r0, [r7, #20]
 8004dec:	f7ff ff26 	bl	8004c3c <prvUnlockQueue>
	}
 8004df0:	bf00      	nop
 8004df2:	3718      	adds	r7, #24
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b08e      	sub	sp, #56	; 0x38
 8004dfc:	af04      	add	r7, sp, #16
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	607a      	str	r2, [r7, #4]
 8004e04:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d10a      	bne.n	8004e22 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e10:	f383 8811 	msr	BASEPRI, r3
 8004e14:	f3bf 8f6f 	isb	sy
 8004e18:	f3bf 8f4f 	dsb	sy
 8004e1c:	623b      	str	r3, [r7, #32]
}
 8004e1e:	bf00      	nop
 8004e20:	e7fe      	b.n	8004e20 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d10a      	bne.n	8004e3e <xTaskCreateStatic+0x46>
	__asm volatile
 8004e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e2c:	f383 8811 	msr	BASEPRI, r3
 8004e30:	f3bf 8f6f 	isb	sy
 8004e34:	f3bf 8f4f 	dsb	sy
 8004e38:	61fb      	str	r3, [r7, #28]
}
 8004e3a:	bf00      	nop
 8004e3c:	e7fe      	b.n	8004e3c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004e3e:	235c      	movs	r3, #92	; 0x5c
 8004e40:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	2b5c      	cmp	r3, #92	; 0x5c
 8004e46:	d00a      	beq.n	8004e5e <xTaskCreateStatic+0x66>
	__asm volatile
 8004e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e4c:	f383 8811 	msr	BASEPRI, r3
 8004e50:	f3bf 8f6f 	isb	sy
 8004e54:	f3bf 8f4f 	dsb	sy
 8004e58:	61bb      	str	r3, [r7, #24]
}
 8004e5a:	bf00      	nop
 8004e5c:	e7fe      	b.n	8004e5c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004e5e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d01e      	beq.n	8004ea4 <xTaskCreateStatic+0xac>
 8004e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d01b      	beq.n	8004ea4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e6e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e74:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e78:	2202      	movs	r2, #2
 8004e7a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004e7e:	2300      	movs	r3, #0
 8004e80:	9303      	str	r3, [sp, #12]
 8004e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e84:	9302      	str	r3, [sp, #8]
 8004e86:	f107 0314 	add.w	r3, r7, #20
 8004e8a:	9301      	str	r3, [sp, #4]
 8004e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e8e:	9300      	str	r3, [sp, #0]
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	68b9      	ldr	r1, [r7, #8]
 8004e96:	68f8      	ldr	r0, [r7, #12]
 8004e98:	f000 f850 	bl	8004f3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004e9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e9e:	f000 f8dd 	bl	800505c <prvAddNewTaskToReadyList>
 8004ea2:	e001      	b.n	8004ea8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004ea8:	697b      	ldr	r3, [r7, #20]
	}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3728      	adds	r7, #40	; 0x28
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}

08004eb2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004eb2:	b580      	push	{r7, lr}
 8004eb4:	b08c      	sub	sp, #48	; 0x30
 8004eb6:	af04      	add	r7, sp, #16
 8004eb8:	60f8      	str	r0, [r7, #12]
 8004eba:	60b9      	str	r1, [r7, #8]
 8004ebc:	603b      	str	r3, [r7, #0]
 8004ebe:	4613      	mov	r3, r2
 8004ec0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004ec2:	88fb      	ldrh	r3, [r7, #6]
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f001 fc2e 	bl	8006728 <pvPortMalloc>
 8004ecc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d00e      	beq.n	8004ef2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004ed4:	205c      	movs	r0, #92	; 0x5c
 8004ed6:	f001 fc27 	bl	8006728 <pvPortMalloc>
 8004eda:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d003      	beq.n	8004eea <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	697a      	ldr	r2, [r7, #20]
 8004ee6:	631a      	str	r2, [r3, #48]	; 0x30
 8004ee8:	e005      	b.n	8004ef6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004eea:	6978      	ldr	r0, [r7, #20]
 8004eec:	f001 fce8 	bl	80068c0 <vPortFree>
 8004ef0:	e001      	b.n	8004ef6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d017      	beq.n	8004f2c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004efc:	69fb      	ldr	r3, [r7, #28]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004f04:	88fa      	ldrh	r2, [r7, #6]
 8004f06:	2300      	movs	r3, #0
 8004f08:	9303      	str	r3, [sp, #12]
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	9302      	str	r3, [sp, #8]
 8004f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f10:	9301      	str	r3, [sp, #4]
 8004f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f14:	9300      	str	r3, [sp, #0]
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	68b9      	ldr	r1, [r7, #8]
 8004f1a:	68f8      	ldr	r0, [r7, #12]
 8004f1c:	f000 f80e 	bl	8004f3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f20:	69f8      	ldr	r0, [r7, #28]
 8004f22:	f000 f89b 	bl	800505c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004f26:	2301      	movs	r3, #1
 8004f28:	61bb      	str	r3, [r7, #24]
 8004f2a:	e002      	b.n	8004f32 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004f2c:	f04f 33ff 	mov.w	r3, #4294967295
 8004f30:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004f32:	69bb      	ldr	r3, [r7, #24]
	}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3720      	adds	r7, #32
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b088      	sub	sp, #32
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	60b9      	str	r1, [r7, #8]
 8004f46:	607a      	str	r2, [r7, #4]
 8004f48:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f4c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	461a      	mov	r2, r3
 8004f54:	21a5      	movs	r1, #165	; 0xa5
 8004f56:	f002 f83b 	bl	8006fd0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004f64:	3b01      	subs	r3, #1
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	4413      	add	r3, r2
 8004f6a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004f6c:	69bb      	ldr	r3, [r7, #24]
 8004f6e:	f023 0307 	bic.w	r3, r3, #7
 8004f72:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004f74:	69bb      	ldr	r3, [r7, #24]
 8004f76:	f003 0307 	and.w	r3, r3, #7
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d00a      	beq.n	8004f94 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f82:	f383 8811 	msr	BASEPRI, r3
 8004f86:	f3bf 8f6f 	isb	sy
 8004f8a:	f3bf 8f4f 	dsb	sy
 8004f8e:	617b      	str	r3, [r7, #20]
}
 8004f90:	bf00      	nop
 8004f92:	e7fe      	b.n	8004f92 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d01f      	beq.n	8004fda <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	61fb      	str	r3, [r7, #28]
 8004f9e:	e012      	b.n	8004fc6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004fa0:	68ba      	ldr	r2, [r7, #8]
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	4413      	add	r3, r2
 8004fa6:	7819      	ldrb	r1, [r3, #0]
 8004fa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	4413      	add	r3, r2
 8004fae:	3334      	adds	r3, #52	; 0x34
 8004fb0:	460a      	mov	r2, r1
 8004fb2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004fb4:	68ba      	ldr	r2, [r7, #8]
 8004fb6:	69fb      	ldr	r3, [r7, #28]
 8004fb8:	4413      	add	r3, r2
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d006      	beq.n	8004fce <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	3301      	adds	r3, #1
 8004fc4:	61fb      	str	r3, [r7, #28]
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	2b0f      	cmp	r3, #15
 8004fca:	d9e9      	bls.n	8004fa0 <prvInitialiseNewTask+0x64>
 8004fcc:	e000      	b.n	8004fd0 <prvInitialiseNewTask+0x94>
			{
				break;
 8004fce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004fd8:	e003      	b.n	8004fe2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe4:	2b37      	cmp	r3, #55	; 0x37
 8004fe6:	d901      	bls.n	8004fec <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004fe8:	2337      	movs	r3, #55	; 0x37
 8004fea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ff0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ff6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005000:	3304      	adds	r3, #4
 8005002:	4618      	mov	r0, r3
 8005004:	f7ff f978 	bl	80042f8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800500a:	3318      	adds	r3, #24
 800500c:	4618      	mov	r0, r3
 800500e:	f7ff f973 	bl	80042f8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005014:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005016:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800501a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800501e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005020:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005024:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005026:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800502a:	2200      	movs	r2, #0
 800502c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800502e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005030:	2200      	movs	r2, #0
 8005032:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005036:	683a      	ldr	r2, [r7, #0]
 8005038:	68f9      	ldr	r1, [r7, #12]
 800503a:	69b8      	ldr	r0, [r7, #24]
 800503c:	f001 f928 	bl	8006290 <pxPortInitialiseStack>
 8005040:	4602      	mov	r2, r0
 8005042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005044:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005048:	2b00      	cmp	r3, #0
 800504a:	d002      	beq.n	8005052 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800504c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800504e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005050:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005052:	bf00      	nop
 8005054:	3720      	adds	r7, #32
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
	...

0800505c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b082      	sub	sp, #8
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005064:	f001 fa3e 	bl	80064e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005068:	4b2d      	ldr	r3, [pc, #180]	; (8005120 <prvAddNewTaskToReadyList+0xc4>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	3301      	adds	r3, #1
 800506e:	4a2c      	ldr	r2, [pc, #176]	; (8005120 <prvAddNewTaskToReadyList+0xc4>)
 8005070:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005072:	4b2c      	ldr	r3, [pc, #176]	; (8005124 <prvAddNewTaskToReadyList+0xc8>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d109      	bne.n	800508e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800507a:	4a2a      	ldr	r2, [pc, #168]	; (8005124 <prvAddNewTaskToReadyList+0xc8>)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005080:	4b27      	ldr	r3, [pc, #156]	; (8005120 <prvAddNewTaskToReadyList+0xc4>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	2b01      	cmp	r3, #1
 8005086:	d110      	bne.n	80050aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005088:	f000 fc16 	bl	80058b8 <prvInitialiseTaskLists>
 800508c:	e00d      	b.n	80050aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800508e:	4b26      	ldr	r3, [pc, #152]	; (8005128 <prvAddNewTaskToReadyList+0xcc>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d109      	bne.n	80050aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005096:	4b23      	ldr	r3, [pc, #140]	; (8005124 <prvAddNewTaskToReadyList+0xc8>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d802      	bhi.n	80050aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80050a4:	4a1f      	ldr	r2, [pc, #124]	; (8005124 <prvAddNewTaskToReadyList+0xc8>)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80050aa:	4b20      	ldr	r3, [pc, #128]	; (800512c <prvAddNewTaskToReadyList+0xd0>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	3301      	adds	r3, #1
 80050b0:	4a1e      	ldr	r2, [pc, #120]	; (800512c <prvAddNewTaskToReadyList+0xd0>)
 80050b2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80050b4:	4b1d      	ldr	r3, [pc, #116]	; (800512c <prvAddNewTaskToReadyList+0xd0>)
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050c0:	4b1b      	ldr	r3, [pc, #108]	; (8005130 <prvAddNewTaskToReadyList+0xd4>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d903      	bls.n	80050d0 <prvAddNewTaskToReadyList+0x74>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050cc:	4a18      	ldr	r2, [pc, #96]	; (8005130 <prvAddNewTaskToReadyList+0xd4>)
 80050ce:	6013      	str	r3, [r2, #0]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050d4:	4613      	mov	r3, r2
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	4413      	add	r3, r2
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	4a15      	ldr	r2, [pc, #84]	; (8005134 <prvAddNewTaskToReadyList+0xd8>)
 80050de:	441a      	add	r2, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	3304      	adds	r3, #4
 80050e4:	4619      	mov	r1, r3
 80050e6:	4610      	mov	r0, r2
 80050e8:	f7ff f913 	bl	8004312 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80050ec:	f001 fa2a 	bl	8006544 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80050f0:	4b0d      	ldr	r3, [pc, #52]	; (8005128 <prvAddNewTaskToReadyList+0xcc>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d00e      	beq.n	8005116 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80050f8:	4b0a      	ldr	r3, [pc, #40]	; (8005124 <prvAddNewTaskToReadyList+0xc8>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005102:	429a      	cmp	r2, r3
 8005104:	d207      	bcs.n	8005116 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005106:	4b0c      	ldr	r3, [pc, #48]	; (8005138 <prvAddNewTaskToReadyList+0xdc>)
 8005108:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800510c:	601a      	str	r2, [r3, #0]
 800510e:	f3bf 8f4f 	dsb	sy
 8005112:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005116:	bf00      	nop
 8005118:	3708      	adds	r7, #8
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
 800511e:	bf00      	nop
 8005120:	20000d60 	.word	0x20000d60
 8005124:	2000088c 	.word	0x2000088c
 8005128:	20000d6c 	.word	0x20000d6c
 800512c:	20000d7c 	.word	0x20000d7c
 8005130:	20000d68 	.word	0x20000d68
 8005134:	20000890 	.word	0x20000890
 8005138:	e000ed04 	.word	0xe000ed04

0800513c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800513c:	b580      	push	{r7, lr}
 800513e:	b084      	sub	sp, #16
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005144:	2300      	movs	r3, #0
 8005146:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d017      	beq.n	800517e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800514e:	4b13      	ldr	r3, [pc, #76]	; (800519c <vTaskDelay+0x60>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d00a      	beq.n	800516c <vTaskDelay+0x30>
	__asm volatile
 8005156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800515a:	f383 8811 	msr	BASEPRI, r3
 800515e:	f3bf 8f6f 	isb	sy
 8005162:	f3bf 8f4f 	dsb	sy
 8005166:	60bb      	str	r3, [r7, #8]
}
 8005168:	bf00      	nop
 800516a:	e7fe      	b.n	800516a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800516c:	f000 f880 	bl	8005270 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005170:	2100      	movs	r1, #0
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 fcea 	bl	8005b4c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005178:	f000 f888 	bl	800528c <xTaskResumeAll>
 800517c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d107      	bne.n	8005194 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005184:	4b06      	ldr	r3, [pc, #24]	; (80051a0 <vTaskDelay+0x64>)
 8005186:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800518a:	601a      	str	r2, [r3, #0]
 800518c:	f3bf 8f4f 	dsb	sy
 8005190:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005194:	bf00      	nop
 8005196:	3710      	adds	r7, #16
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}
 800519c:	20000d88 	.word	0x20000d88
 80051a0:	e000ed04 	.word	0xe000ed04

080051a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b08a      	sub	sp, #40	; 0x28
 80051a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80051aa:	2300      	movs	r3, #0
 80051ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80051ae:	2300      	movs	r3, #0
 80051b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80051b2:	463a      	mov	r2, r7
 80051b4:	1d39      	adds	r1, r7, #4
 80051b6:	f107 0308 	add.w	r3, r7, #8
 80051ba:	4618      	mov	r0, r3
 80051bc:	f7ff f848 	bl	8004250 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80051c0:	6839      	ldr	r1, [r7, #0]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	68ba      	ldr	r2, [r7, #8]
 80051c6:	9202      	str	r2, [sp, #8]
 80051c8:	9301      	str	r3, [sp, #4]
 80051ca:	2300      	movs	r3, #0
 80051cc:	9300      	str	r3, [sp, #0]
 80051ce:	2300      	movs	r3, #0
 80051d0:	460a      	mov	r2, r1
 80051d2:	4921      	ldr	r1, [pc, #132]	; (8005258 <vTaskStartScheduler+0xb4>)
 80051d4:	4821      	ldr	r0, [pc, #132]	; (800525c <vTaskStartScheduler+0xb8>)
 80051d6:	f7ff fe0f 	bl	8004df8 <xTaskCreateStatic>
 80051da:	4603      	mov	r3, r0
 80051dc:	4a20      	ldr	r2, [pc, #128]	; (8005260 <vTaskStartScheduler+0xbc>)
 80051de:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80051e0:	4b1f      	ldr	r3, [pc, #124]	; (8005260 <vTaskStartScheduler+0xbc>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d002      	beq.n	80051ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80051e8:	2301      	movs	r3, #1
 80051ea:	617b      	str	r3, [r7, #20]
 80051ec:	e001      	b.n	80051f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80051ee:	2300      	movs	r3, #0
 80051f0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d102      	bne.n	80051fe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80051f8:	f000 fcfc 	bl	8005bf4 <xTimerCreateTimerTask>
 80051fc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	2b01      	cmp	r3, #1
 8005202:	d116      	bne.n	8005232 <vTaskStartScheduler+0x8e>
	__asm volatile
 8005204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005208:	f383 8811 	msr	BASEPRI, r3
 800520c:	f3bf 8f6f 	isb	sy
 8005210:	f3bf 8f4f 	dsb	sy
 8005214:	613b      	str	r3, [r7, #16]
}
 8005216:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005218:	4b12      	ldr	r3, [pc, #72]	; (8005264 <vTaskStartScheduler+0xc0>)
 800521a:	f04f 32ff 	mov.w	r2, #4294967295
 800521e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005220:	4b11      	ldr	r3, [pc, #68]	; (8005268 <vTaskStartScheduler+0xc4>)
 8005222:	2201      	movs	r2, #1
 8005224:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005226:	4b11      	ldr	r3, [pc, #68]	; (800526c <vTaskStartScheduler+0xc8>)
 8005228:	2200      	movs	r2, #0
 800522a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800522c:	f001 f8b8 	bl	80063a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005230:	e00e      	b.n	8005250 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005238:	d10a      	bne.n	8005250 <vTaskStartScheduler+0xac>
	__asm volatile
 800523a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800523e:	f383 8811 	msr	BASEPRI, r3
 8005242:	f3bf 8f6f 	isb	sy
 8005246:	f3bf 8f4f 	dsb	sy
 800524a:	60fb      	str	r3, [r7, #12]
}
 800524c:	bf00      	nop
 800524e:	e7fe      	b.n	800524e <vTaskStartScheduler+0xaa>
}
 8005250:	bf00      	nop
 8005252:	3718      	adds	r7, #24
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}
 8005258:	08007930 	.word	0x08007930
 800525c:	08005889 	.word	0x08005889
 8005260:	20000d84 	.word	0x20000d84
 8005264:	20000d80 	.word	0x20000d80
 8005268:	20000d6c 	.word	0x20000d6c
 800526c:	20000d64 	.word	0x20000d64

08005270 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005270:	b480      	push	{r7}
 8005272:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005274:	4b04      	ldr	r3, [pc, #16]	; (8005288 <vTaskSuspendAll+0x18>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	3301      	adds	r3, #1
 800527a:	4a03      	ldr	r2, [pc, #12]	; (8005288 <vTaskSuspendAll+0x18>)
 800527c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800527e:	bf00      	nop
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr
 8005288:	20000d88 	.word	0x20000d88

0800528c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005292:	2300      	movs	r3, #0
 8005294:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005296:	2300      	movs	r3, #0
 8005298:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800529a:	4b42      	ldr	r3, [pc, #264]	; (80053a4 <xTaskResumeAll+0x118>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d10a      	bne.n	80052b8 <xTaskResumeAll+0x2c>
	__asm volatile
 80052a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a6:	f383 8811 	msr	BASEPRI, r3
 80052aa:	f3bf 8f6f 	isb	sy
 80052ae:	f3bf 8f4f 	dsb	sy
 80052b2:	603b      	str	r3, [r7, #0]
}
 80052b4:	bf00      	nop
 80052b6:	e7fe      	b.n	80052b6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80052b8:	f001 f914 	bl	80064e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80052bc:	4b39      	ldr	r3, [pc, #228]	; (80053a4 <xTaskResumeAll+0x118>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	3b01      	subs	r3, #1
 80052c2:	4a38      	ldr	r2, [pc, #224]	; (80053a4 <xTaskResumeAll+0x118>)
 80052c4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052c6:	4b37      	ldr	r3, [pc, #220]	; (80053a4 <xTaskResumeAll+0x118>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d162      	bne.n	8005394 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80052ce:	4b36      	ldr	r3, [pc, #216]	; (80053a8 <xTaskResumeAll+0x11c>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d05e      	beq.n	8005394 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80052d6:	e02f      	b.n	8005338 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052d8:	4b34      	ldr	r3, [pc, #208]	; (80053ac <xTaskResumeAll+0x120>)
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	3318      	adds	r3, #24
 80052e4:	4618      	mov	r0, r3
 80052e6:	f7ff f871 	bl	80043cc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	3304      	adds	r3, #4
 80052ee:	4618      	mov	r0, r3
 80052f0:	f7ff f86c 	bl	80043cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052f8:	4b2d      	ldr	r3, [pc, #180]	; (80053b0 <xTaskResumeAll+0x124>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d903      	bls.n	8005308 <xTaskResumeAll+0x7c>
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005304:	4a2a      	ldr	r2, [pc, #168]	; (80053b0 <xTaskResumeAll+0x124>)
 8005306:	6013      	str	r3, [r2, #0]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800530c:	4613      	mov	r3, r2
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	4413      	add	r3, r2
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	4a27      	ldr	r2, [pc, #156]	; (80053b4 <xTaskResumeAll+0x128>)
 8005316:	441a      	add	r2, r3
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	3304      	adds	r3, #4
 800531c:	4619      	mov	r1, r3
 800531e:	4610      	mov	r0, r2
 8005320:	f7fe fff7 	bl	8004312 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005328:	4b23      	ldr	r3, [pc, #140]	; (80053b8 <xTaskResumeAll+0x12c>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800532e:	429a      	cmp	r2, r3
 8005330:	d302      	bcc.n	8005338 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005332:	4b22      	ldr	r3, [pc, #136]	; (80053bc <xTaskResumeAll+0x130>)
 8005334:	2201      	movs	r2, #1
 8005336:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005338:	4b1c      	ldr	r3, [pc, #112]	; (80053ac <xTaskResumeAll+0x120>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d1cb      	bne.n	80052d8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d001      	beq.n	800534a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005346:	f000 fb55 	bl	80059f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800534a:	4b1d      	ldr	r3, [pc, #116]	; (80053c0 <xTaskResumeAll+0x134>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d010      	beq.n	8005378 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005356:	f000 f847 	bl	80053e8 <xTaskIncrementTick>
 800535a:	4603      	mov	r3, r0
 800535c:	2b00      	cmp	r3, #0
 800535e:	d002      	beq.n	8005366 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005360:	4b16      	ldr	r3, [pc, #88]	; (80053bc <xTaskResumeAll+0x130>)
 8005362:	2201      	movs	r2, #1
 8005364:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	3b01      	subs	r3, #1
 800536a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d1f1      	bne.n	8005356 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005372:	4b13      	ldr	r3, [pc, #76]	; (80053c0 <xTaskResumeAll+0x134>)
 8005374:	2200      	movs	r2, #0
 8005376:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005378:	4b10      	ldr	r3, [pc, #64]	; (80053bc <xTaskResumeAll+0x130>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d009      	beq.n	8005394 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005380:	2301      	movs	r3, #1
 8005382:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005384:	4b0f      	ldr	r3, [pc, #60]	; (80053c4 <xTaskResumeAll+0x138>)
 8005386:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800538a:	601a      	str	r2, [r3, #0]
 800538c:	f3bf 8f4f 	dsb	sy
 8005390:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005394:	f001 f8d6 	bl	8006544 <vPortExitCritical>

	return xAlreadyYielded;
 8005398:	68bb      	ldr	r3, [r7, #8]
}
 800539a:	4618      	mov	r0, r3
 800539c:	3710      	adds	r7, #16
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop
 80053a4:	20000d88 	.word	0x20000d88
 80053a8:	20000d60 	.word	0x20000d60
 80053ac:	20000d20 	.word	0x20000d20
 80053b0:	20000d68 	.word	0x20000d68
 80053b4:	20000890 	.word	0x20000890
 80053b8:	2000088c 	.word	0x2000088c
 80053bc:	20000d74 	.word	0x20000d74
 80053c0:	20000d70 	.word	0x20000d70
 80053c4:	e000ed04 	.word	0xe000ed04

080053c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80053ce:	4b05      	ldr	r3, [pc, #20]	; (80053e4 <xTaskGetTickCount+0x1c>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80053d4:	687b      	ldr	r3, [r7, #4]
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	370c      	adds	r7, #12
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr
 80053e2:	bf00      	nop
 80053e4:	20000d64 	.word	0x20000d64

080053e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b086      	sub	sp, #24
 80053ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80053ee:	2300      	movs	r3, #0
 80053f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053f2:	4b4f      	ldr	r3, [pc, #316]	; (8005530 <xTaskIncrementTick+0x148>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	f040 808f 	bne.w	800551a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80053fc:	4b4d      	ldr	r3, [pc, #308]	; (8005534 <xTaskIncrementTick+0x14c>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	3301      	adds	r3, #1
 8005402:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005404:	4a4b      	ldr	r2, [pc, #300]	; (8005534 <xTaskIncrementTick+0x14c>)
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d120      	bne.n	8005452 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005410:	4b49      	ldr	r3, [pc, #292]	; (8005538 <xTaskIncrementTick+0x150>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d00a      	beq.n	8005430 <xTaskIncrementTick+0x48>
	__asm volatile
 800541a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800541e:	f383 8811 	msr	BASEPRI, r3
 8005422:	f3bf 8f6f 	isb	sy
 8005426:	f3bf 8f4f 	dsb	sy
 800542a:	603b      	str	r3, [r7, #0]
}
 800542c:	bf00      	nop
 800542e:	e7fe      	b.n	800542e <xTaskIncrementTick+0x46>
 8005430:	4b41      	ldr	r3, [pc, #260]	; (8005538 <xTaskIncrementTick+0x150>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	60fb      	str	r3, [r7, #12]
 8005436:	4b41      	ldr	r3, [pc, #260]	; (800553c <xTaskIncrementTick+0x154>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a3f      	ldr	r2, [pc, #252]	; (8005538 <xTaskIncrementTick+0x150>)
 800543c:	6013      	str	r3, [r2, #0]
 800543e:	4a3f      	ldr	r2, [pc, #252]	; (800553c <xTaskIncrementTick+0x154>)
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6013      	str	r3, [r2, #0]
 8005444:	4b3e      	ldr	r3, [pc, #248]	; (8005540 <xTaskIncrementTick+0x158>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	3301      	adds	r3, #1
 800544a:	4a3d      	ldr	r2, [pc, #244]	; (8005540 <xTaskIncrementTick+0x158>)
 800544c:	6013      	str	r3, [r2, #0]
 800544e:	f000 fad1 	bl	80059f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005452:	4b3c      	ldr	r3, [pc, #240]	; (8005544 <xTaskIncrementTick+0x15c>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	693a      	ldr	r2, [r7, #16]
 8005458:	429a      	cmp	r2, r3
 800545a:	d349      	bcc.n	80054f0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800545c:	4b36      	ldr	r3, [pc, #216]	; (8005538 <xTaskIncrementTick+0x150>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d104      	bne.n	8005470 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005466:	4b37      	ldr	r3, [pc, #220]	; (8005544 <xTaskIncrementTick+0x15c>)
 8005468:	f04f 32ff 	mov.w	r2, #4294967295
 800546c:	601a      	str	r2, [r3, #0]
					break;
 800546e:	e03f      	b.n	80054f0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005470:	4b31      	ldr	r3, [pc, #196]	; (8005538 <xTaskIncrementTick+0x150>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005480:	693a      	ldr	r2, [r7, #16]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	429a      	cmp	r2, r3
 8005486:	d203      	bcs.n	8005490 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005488:	4a2e      	ldr	r2, [pc, #184]	; (8005544 <xTaskIncrementTick+0x15c>)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800548e:	e02f      	b.n	80054f0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	3304      	adds	r3, #4
 8005494:	4618      	mov	r0, r3
 8005496:	f7fe ff99 	bl	80043cc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d004      	beq.n	80054ac <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	3318      	adds	r3, #24
 80054a6:	4618      	mov	r0, r3
 80054a8:	f7fe ff90 	bl	80043cc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054b0:	4b25      	ldr	r3, [pc, #148]	; (8005548 <xTaskIncrementTick+0x160>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d903      	bls.n	80054c0 <xTaskIncrementTick+0xd8>
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054bc:	4a22      	ldr	r2, [pc, #136]	; (8005548 <xTaskIncrementTick+0x160>)
 80054be:	6013      	str	r3, [r2, #0]
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054c4:	4613      	mov	r3, r2
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	4413      	add	r3, r2
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	4a1f      	ldr	r2, [pc, #124]	; (800554c <xTaskIncrementTick+0x164>)
 80054ce:	441a      	add	r2, r3
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	3304      	adds	r3, #4
 80054d4:	4619      	mov	r1, r3
 80054d6:	4610      	mov	r0, r2
 80054d8:	f7fe ff1b 	bl	8004312 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054e0:	4b1b      	ldr	r3, [pc, #108]	; (8005550 <xTaskIncrementTick+0x168>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d3b8      	bcc.n	800545c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80054ea:	2301      	movs	r3, #1
 80054ec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80054ee:	e7b5      	b.n	800545c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80054f0:	4b17      	ldr	r3, [pc, #92]	; (8005550 <xTaskIncrementTick+0x168>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054f6:	4915      	ldr	r1, [pc, #84]	; (800554c <xTaskIncrementTick+0x164>)
 80054f8:	4613      	mov	r3, r2
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	4413      	add	r3, r2
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	440b      	add	r3, r1
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	2b01      	cmp	r3, #1
 8005506:	d901      	bls.n	800550c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005508:	2301      	movs	r3, #1
 800550a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800550c:	4b11      	ldr	r3, [pc, #68]	; (8005554 <xTaskIncrementTick+0x16c>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d007      	beq.n	8005524 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005514:	2301      	movs	r3, #1
 8005516:	617b      	str	r3, [r7, #20]
 8005518:	e004      	b.n	8005524 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800551a:	4b0f      	ldr	r3, [pc, #60]	; (8005558 <xTaskIncrementTick+0x170>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	3301      	adds	r3, #1
 8005520:	4a0d      	ldr	r2, [pc, #52]	; (8005558 <xTaskIncrementTick+0x170>)
 8005522:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005524:	697b      	ldr	r3, [r7, #20]
}
 8005526:	4618      	mov	r0, r3
 8005528:	3718      	adds	r7, #24
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	20000d88 	.word	0x20000d88
 8005534:	20000d64 	.word	0x20000d64
 8005538:	20000d18 	.word	0x20000d18
 800553c:	20000d1c 	.word	0x20000d1c
 8005540:	20000d78 	.word	0x20000d78
 8005544:	20000d80 	.word	0x20000d80
 8005548:	20000d68 	.word	0x20000d68
 800554c:	20000890 	.word	0x20000890
 8005550:	2000088c 	.word	0x2000088c
 8005554:	20000d74 	.word	0x20000d74
 8005558:	20000d70 	.word	0x20000d70

0800555c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800555c:	b480      	push	{r7}
 800555e:	b085      	sub	sp, #20
 8005560:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005562:	4b28      	ldr	r3, [pc, #160]	; (8005604 <vTaskSwitchContext+0xa8>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d003      	beq.n	8005572 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800556a:	4b27      	ldr	r3, [pc, #156]	; (8005608 <vTaskSwitchContext+0xac>)
 800556c:	2201      	movs	r2, #1
 800556e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005570:	e041      	b.n	80055f6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005572:	4b25      	ldr	r3, [pc, #148]	; (8005608 <vTaskSwitchContext+0xac>)
 8005574:	2200      	movs	r2, #0
 8005576:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005578:	4b24      	ldr	r3, [pc, #144]	; (800560c <vTaskSwitchContext+0xb0>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	60fb      	str	r3, [r7, #12]
 800557e:	e010      	b.n	80055a2 <vTaskSwitchContext+0x46>
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d10a      	bne.n	800559c <vTaskSwitchContext+0x40>
	__asm volatile
 8005586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800558a:	f383 8811 	msr	BASEPRI, r3
 800558e:	f3bf 8f6f 	isb	sy
 8005592:	f3bf 8f4f 	dsb	sy
 8005596:	607b      	str	r3, [r7, #4]
}
 8005598:	bf00      	nop
 800559a:	e7fe      	b.n	800559a <vTaskSwitchContext+0x3e>
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	3b01      	subs	r3, #1
 80055a0:	60fb      	str	r3, [r7, #12]
 80055a2:	491b      	ldr	r1, [pc, #108]	; (8005610 <vTaskSwitchContext+0xb4>)
 80055a4:	68fa      	ldr	r2, [r7, #12]
 80055a6:	4613      	mov	r3, r2
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	4413      	add	r3, r2
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	440b      	add	r3, r1
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d0e4      	beq.n	8005580 <vTaskSwitchContext+0x24>
 80055b6:	68fa      	ldr	r2, [r7, #12]
 80055b8:	4613      	mov	r3, r2
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	4413      	add	r3, r2
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	4a13      	ldr	r2, [pc, #76]	; (8005610 <vTaskSwitchContext+0xb4>)
 80055c2:	4413      	add	r3, r2
 80055c4:	60bb      	str	r3, [r7, #8]
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	685a      	ldr	r2, [r3, #4]
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	605a      	str	r2, [r3, #4]
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	685a      	ldr	r2, [r3, #4]
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	3308      	adds	r3, #8
 80055d8:	429a      	cmp	r2, r3
 80055da:	d104      	bne.n	80055e6 <vTaskSwitchContext+0x8a>
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	685a      	ldr	r2, [r3, #4]
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	605a      	str	r2, [r3, #4]
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	4a09      	ldr	r2, [pc, #36]	; (8005614 <vTaskSwitchContext+0xb8>)
 80055ee:	6013      	str	r3, [r2, #0]
 80055f0:	4a06      	ldr	r2, [pc, #24]	; (800560c <vTaskSwitchContext+0xb0>)
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	6013      	str	r3, [r2, #0]
}
 80055f6:	bf00      	nop
 80055f8:	3714      	adds	r7, #20
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr
 8005602:	bf00      	nop
 8005604:	20000d88 	.word	0x20000d88
 8005608:	20000d74 	.word	0x20000d74
 800560c:	20000d68 	.word	0x20000d68
 8005610:	20000890 	.word	0x20000890
 8005614:	2000088c 	.word	0x2000088c

08005618 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b084      	sub	sp, #16
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d10a      	bne.n	800563e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800562c:	f383 8811 	msr	BASEPRI, r3
 8005630:	f3bf 8f6f 	isb	sy
 8005634:	f3bf 8f4f 	dsb	sy
 8005638:	60fb      	str	r3, [r7, #12]
}
 800563a:	bf00      	nop
 800563c:	e7fe      	b.n	800563c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800563e:	4b07      	ldr	r3, [pc, #28]	; (800565c <vTaskPlaceOnEventList+0x44>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	3318      	adds	r3, #24
 8005644:	4619      	mov	r1, r3
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f7fe fe87 	bl	800435a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800564c:	2101      	movs	r1, #1
 800564e:	6838      	ldr	r0, [r7, #0]
 8005650:	f000 fa7c 	bl	8005b4c <prvAddCurrentTaskToDelayedList>
}
 8005654:	bf00      	nop
 8005656:	3710      	adds	r7, #16
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}
 800565c:	2000088c 	.word	0x2000088c

08005660 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005660:	b580      	push	{r7, lr}
 8005662:	b086      	sub	sp, #24
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d10a      	bne.n	8005688 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005676:	f383 8811 	msr	BASEPRI, r3
 800567a:	f3bf 8f6f 	isb	sy
 800567e:	f3bf 8f4f 	dsb	sy
 8005682:	617b      	str	r3, [r7, #20]
}
 8005684:	bf00      	nop
 8005686:	e7fe      	b.n	8005686 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005688:	4b0a      	ldr	r3, [pc, #40]	; (80056b4 <vTaskPlaceOnEventListRestricted+0x54>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	3318      	adds	r3, #24
 800568e:	4619      	mov	r1, r3
 8005690:	68f8      	ldr	r0, [r7, #12]
 8005692:	f7fe fe3e 	bl	8004312 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d002      	beq.n	80056a2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800569c:	f04f 33ff 	mov.w	r3, #4294967295
 80056a0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80056a2:	6879      	ldr	r1, [r7, #4]
 80056a4:	68b8      	ldr	r0, [r7, #8]
 80056a6:	f000 fa51 	bl	8005b4c <prvAddCurrentTaskToDelayedList>
	}
 80056aa:	bf00      	nop
 80056ac:	3718      	adds	r7, #24
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	2000088c 	.word	0x2000088c

080056b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b086      	sub	sp, #24
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d10a      	bne.n	80056e4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80056ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d2:	f383 8811 	msr	BASEPRI, r3
 80056d6:	f3bf 8f6f 	isb	sy
 80056da:	f3bf 8f4f 	dsb	sy
 80056de:	60fb      	str	r3, [r7, #12]
}
 80056e0:	bf00      	nop
 80056e2:	e7fe      	b.n	80056e2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	3318      	adds	r3, #24
 80056e8:	4618      	mov	r0, r3
 80056ea:	f7fe fe6f 	bl	80043cc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056ee:	4b1e      	ldr	r3, [pc, #120]	; (8005768 <xTaskRemoveFromEventList+0xb0>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d11d      	bne.n	8005732 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	3304      	adds	r3, #4
 80056fa:	4618      	mov	r0, r3
 80056fc:	f7fe fe66 	bl	80043cc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005704:	4b19      	ldr	r3, [pc, #100]	; (800576c <xTaskRemoveFromEventList+0xb4>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	429a      	cmp	r2, r3
 800570a:	d903      	bls.n	8005714 <xTaskRemoveFromEventList+0x5c>
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005710:	4a16      	ldr	r2, [pc, #88]	; (800576c <xTaskRemoveFromEventList+0xb4>)
 8005712:	6013      	str	r3, [r2, #0]
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005718:	4613      	mov	r3, r2
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	4413      	add	r3, r2
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	4a13      	ldr	r2, [pc, #76]	; (8005770 <xTaskRemoveFromEventList+0xb8>)
 8005722:	441a      	add	r2, r3
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	3304      	adds	r3, #4
 8005728:	4619      	mov	r1, r3
 800572a:	4610      	mov	r0, r2
 800572c:	f7fe fdf1 	bl	8004312 <vListInsertEnd>
 8005730:	e005      	b.n	800573e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	3318      	adds	r3, #24
 8005736:	4619      	mov	r1, r3
 8005738:	480e      	ldr	r0, [pc, #56]	; (8005774 <xTaskRemoveFromEventList+0xbc>)
 800573a:	f7fe fdea 	bl	8004312 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005742:	4b0d      	ldr	r3, [pc, #52]	; (8005778 <xTaskRemoveFromEventList+0xc0>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005748:	429a      	cmp	r2, r3
 800574a:	d905      	bls.n	8005758 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800574c:	2301      	movs	r3, #1
 800574e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005750:	4b0a      	ldr	r3, [pc, #40]	; (800577c <xTaskRemoveFromEventList+0xc4>)
 8005752:	2201      	movs	r2, #1
 8005754:	601a      	str	r2, [r3, #0]
 8005756:	e001      	b.n	800575c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005758:	2300      	movs	r3, #0
 800575a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800575c:	697b      	ldr	r3, [r7, #20]
}
 800575e:	4618      	mov	r0, r3
 8005760:	3718      	adds	r7, #24
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop
 8005768:	20000d88 	.word	0x20000d88
 800576c:	20000d68 	.word	0x20000d68
 8005770:	20000890 	.word	0x20000890
 8005774:	20000d20 	.word	0x20000d20
 8005778:	2000088c 	.word	0x2000088c
 800577c:	20000d74 	.word	0x20000d74

08005780 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005780:	b480      	push	{r7}
 8005782:	b083      	sub	sp, #12
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005788:	4b06      	ldr	r3, [pc, #24]	; (80057a4 <vTaskInternalSetTimeOutState+0x24>)
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005790:	4b05      	ldr	r3, [pc, #20]	; (80057a8 <vTaskInternalSetTimeOutState+0x28>)
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	605a      	str	r2, [r3, #4]
}
 8005798:	bf00      	nop
 800579a:	370c      	adds	r7, #12
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr
 80057a4:	20000d78 	.word	0x20000d78
 80057a8:	20000d64 	.word	0x20000d64

080057ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b088      	sub	sp, #32
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d10a      	bne.n	80057d2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80057bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c0:	f383 8811 	msr	BASEPRI, r3
 80057c4:	f3bf 8f6f 	isb	sy
 80057c8:	f3bf 8f4f 	dsb	sy
 80057cc:	613b      	str	r3, [r7, #16]
}
 80057ce:	bf00      	nop
 80057d0:	e7fe      	b.n	80057d0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d10a      	bne.n	80057ee <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80057d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057dc:	f383 8811 	msr	BASEPRI, r3
 80057e0:	f3bf 8f6f 	isb	sy
 80057e4:	f3bf 8f4f 	dsb	sy
 80057e8:	60fb      	str	r3, [r7, #12]
}
 80057ea:	bf00      	nop
 80057ec:	e7fe      	b.n	80057ec <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80057ee:	f000 fe79 	bl	80064e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80057f2:	4b1d      	ldr	r3, [pc, #116]	; (8005868 <xTaskCheckForTimeOut+0xbc>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	69ba      	ldr	r2, [r7, #24]
 80057fe:	1ad3      	subs	r3, r2, r3
 8005800:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800580a:	d102      	bne.n	8005812 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800580c:	2300      	movs	r3, #0
 800580e:	61fb      	str	r3, [r7, #28]
 8005810:	e023      	b.n	800585a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	4b15      	ldr	r3, [pc, #84]	; (800586c <xTaskCheckForTimeOut+0xc0>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	429a      	cmp	r2, r3
 800581c:	d007      	beq.n	800582e <xTaskCheckForTimeOut+0x82>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	69ba      	ldr	r2, [r7, #24]
 8005824:	429a      	cmp	r2, r3
 8005826:	d302      	bcc.n	800582e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005828:	2301      	movs	r3, #1
 800582a:	61fb      	str	r3, [r7, #28]
 800582c:	e015      	b.n	800585a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	697a      	ldr	r2, [r7, #20]
 8005834:	429a      	cmp	r2, r3
 8005836:	d20b      	bcs.n	8005850 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	1ad2      	subs	r2, r2, r3
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f7ff ff9b 	bl	8005780 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800584a:	2300      	movs	r3, #0
 800584c:	61fb      	str	r3, [r7, #28]
 800584e:	e004      	b.n	800585a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	2200      	movs	r2, #0
 8005854:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005856:	2301      	movs	r3, #1
 8005858:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800585a:	f000 fe73 	bl	8006544 <vPortExitCritical>

	return xReturn;
 800585e:	69fb      	ldr	r3, [r7, #28]
}
 8005860:	4618      	mov	r0, r3
 8005862:	3720      	adds	r7, #32
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}
 8005868:	20000d64 	.word	0x20000d64
 800586c:	20000d78 	.word	0x20000d78

08005870 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005870:	b480      	push	{r7}
 8005872:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005874:	4b03      	ldr	r3, [pc, #12]	; (8005884 <vTaskMissedYield+0x14>)
 8005876:	2201      	movs	r2, #1
 8005878:	601a      	str	r2, [r3, #0]
}
 800587a:	bf00      	nop
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr
 8005884:	20000d74 	.word	0x20000d74

08005888 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b082      	sub	sp, #8
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005890:	f000 f852 	bl	8005938 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005894:	4b06      	ldr	r3, [pc, #24]	; (80058b0 <prvIdleTask+0x28>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	2b01      	cmp	r3, #1
 800589a:	d9f9      	bls.n	8005890 <prvIdleTask+0x8>
			{
				taskYIELD();
 800589c:	4b05      	ldr	r3, [pc, #20]	; (80058b4 <prvIdleTask+0x2c>)
 800589e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058a2:	601a      	str	r2, [r3, #0]
 80058a4:	f3bf 8f4f 	dsb	sy
 80058a8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80058ac:	e7f0      	b.n	8005890 <prvIdleTask+0x8>
 80058ae:	bf00      	nop
 80058b0:	20000890 	.word	0x20000890
 80058b4:	e000ed04 	.word	0xe000ed04

080058b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b082      	sub	sp, #8
 80058bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80058be:	2300      	movs	r3, #0
 80058c0:	607b      	str	r3, [r7, #4]
 80058c2:	e00c      	b.n	80058de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	4613      	mov	r3, r2
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	4413      	add	r3, r2
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	4a12      	ldr	r2, [pc, #72]	; (8005918 <prvInitialiseTaskLists+0x60>)
 80058d0:	4413      	add	r3, r2
 80058d2:	4618      	mov	r0, r3
 80058d4:	f7fe fcf0 	bl	80042b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	3301      	adds	r3, #1
 80058dc:	607b      	str	r3, [r7, #4]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2b37      	cmp	r3, #55	; 0x37
 80058e2:	d9ef      	bls.n	80058c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80058e4:	480d      	ldr	r0, [pc, #52]	; (800591c <prvInitialiseTaskLists+0x64>)
 80058e6:	f7fe fce7 	bl	80042b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80058ea:	480d      	ldr	r0, [pc, #52]	; (8005920 <prvInitialiseTaskLists+0x68>)
 80058ec:	f7fe fce4 	bl	80042b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80058f0:	480c      	ldr	r0, [pc, #48]	; (8005924 <prvInitialiseTaskLists+0x6c>)
 80058f2:	f7fe fce1 	bl	80042b8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80058f6:	480c      	ldr	r0, [pc, #48]	; (8005928 <prvInitialiseTaskLists+0x70>)
 80058f8:	f7fe fcde 	bl	80042b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80058fc:	480b      	ldr	r0, [pc, #44]	; (800592c <prvInitialiseTaskLists+0x74>)
 80058fe:	f7fe fcdb 	bl	80042b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005902:	4b0b      	ldr	r3, [pc, #44]	; (8005930 <prvInitialiseTaskLists+0x78>)
 8005904:	4a05      	ldr	r2, [pc, #20]	; (800591c <prvInitialiseTaskLists+0x64>)
 8005906:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005908:	4b0a      	ldr	r3, [pc, #40]	; (8005934 <prvInitialiseTaskLists+0x7c>)
 800590a:	4a05      	ldr	r2, [pc, #20]	; (8005920 <prvInitialiseTaskLists+0x68>)
 800590c:	601a      	str	r2, [r3, #0]
}
 800590e:	bf00      	nop
 8005910:	3708      	adds	r7, #8
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
 8005916:	bf00      	nop
 8005918:	20000890 	.word	0x20000890
 800591c:	20000cf0 	.word	0x20000cf0
 8005920:	20000d04 	.word	0x20000d04
 8005924:	20000d20 	.word	0x20000d20
 8005928:	20000d34 	.word	0x20000d34
 800592c:	20000d4c 	.word	0x20000d4c
 8005930:	20000d18 	.word	0x20000d18
 8005934:	20000d1c 	.word	0x20000d1c

08005938 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b082      	sub	sp, #8
 800593c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800593e:	e019      	b.n	8005974 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005940:	f000 fdd0 	bl	80064e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005944:	4b10      	ldr	r3, [pc, #64]	; (8005988 <prvCheckTasksWaitingTermination+0x50>)
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	3304      	adds	r3, #4
 8005950:	4618      	mov	r0, r3
 8005952:	f7fe fd3b 	bl	80043cc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005956:	4b0d      	ldr	r3, [pc, #52]	; (800598c <prvCheckTasksWaitingTermination+0x54>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	3b01      	subs	r3, #1
 800595c:	4a0b      	ldr	r2, [pc, #44]	; (800598c <prvCheckTasksWaitingTermination+0x54>)
 800595e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005960:	4b0b      	ldr	r3, [pc, #44]	; (8005990 <prvCheckTasksWaitingTermination+0x58>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	3b01      	subs	r3, #1
 8005966:	4a0a      	ldr	r2, [pc, #40]	; (8005990 <prvCheckTasksWaitingTermination+0x58>)
 8005968:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800596a:	f000 fdeb 	bl	8006544 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 f810 	bl	8005994 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005974:	4b06      	ldr	r3, [pc, #24]	; (8005990 <prvCheckTasksWaitingTermination+0x58>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d1e1      	bne.n	8005940 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800597c:	bf00      	nop
 800597e:	bf00      	nop
 8005980:	3708      	adds	r7, #8
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
 8005986:	bf00      	nop
 8005988:	20000d34 	.word	0x20000d34
 800598c:	20000d60 	.word	0x20000d60
 8005990:	20000d48 	.word	0x20000d48

08005994 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005994:	b580      	push	{r7, lr}
 8005996:	b084      	sub	sp, #16
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d108      	bne.n	80059b8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059aa:	4618      	mov	r0, r3
 80059ac:	f000 ff88 	bl	80068c0 <vPortFree>
				vPortFree( pxTCB );
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f000 ff85 	bl	80068c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80059b6:	e018      	b.n	80059ea <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d103      	bne.n	80059ca <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 ff7c 	bl	80068c0 <vPortFree>
	}
 80059c8:	e00f      	b.n	80059ea <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80059d0:	2b02      	cmp	r3, #2
 80059d2:	d00a      	beq.n	80059ea <prvDeleteTCB+0x56>
	__asm volatile
 80059d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d8:	f383 8811 	msr	BASEPRI, r3
 80059dc:	f3bf 8f6f 	isb	sy
 80059e0:	f3bf 8f4f 	dsb	sy
 80059e4:	60fb      	str	r3, [r7, #12]
}
 80059e6:	bf00      	nop
 80059e8:	e7fe      	b.n	80059e8 <prvDeleteTCB+0x54>
	}
 80059ea:	bf00      	nop
 80059ec:	3710      	adds	r7, #16
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
	...

080059f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80059f4:	b480      	push	{r7}
 80059f6:	b083      	sub	sp, #12
 80059f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059fa:	4b0c      	ldr	r3, [pc, #48]	; (8005a2c <prvResetNextTaskUnblockTime+0x38>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d104      	bne.n	8005a0e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005a04:	4b0a      	ldr	r3, [pc, #40]	; (8005a30 <prvResetNextTaskUnblockTime+0x3c>)
 8005a06:	f04f 32ff 	mov.w	r2, #4294967295
 8005a0a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005a0c:	e008      	b.n	8005a20 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a0e:	4b07      	ldr	r3, [pc, #28]	; (8005a2c <prvResetNextTaskUnblockTime+0x38>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	4a04      	ldr	r2, [pc, #16]	; (8005a30 <prvResetNextTaskUnblockTime+0x3c>)
 8005a1e:	6013      	str	r3, [r2, #0]
}
 8005a20:	bf00      	nop
 8005a22:	370c      	adds	r7, #12
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr
 8005a2c:	20000d18 	.word	0x20000d18
 8005a30:	20000d80 	.word	0x20000d80

08005a34 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005a3a:	4b0b      	ldr	r3, [pc, #44]	; (8005a68 <xTaskGetSchedulerState+0x34>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d102      	bne.n	8005a48 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005a42:	2301      	movs	r3, #1
 8005a44:	607b      	str	r3, [r7, #4]
 8005a46:	e008      	b.n	8005a5a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a48:	4b08      	ldr	r3, [pc, #32]	; (8005a6c <xTaskGetSchedulerState+0x38>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d102      	bne.n	8005a56 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005a50:	2302      	movs	r3, #2
 8005a52:	607b      	str	r3, [r7, #4]
 8005a54:	e001      	b.n	8005a5a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005a56:	2300      	movs	r3, #0
 8005a58:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005a5a:	687b      	ldr	r3, [r7, #4]
	}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	370c      	adds	r7, #12
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr
 8005a68:	20000d6c 	.word	0x20000d6c
 8005a6c:	20000d88 	.word	0x20000d88

08005a70 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b086      	sub	sp, #24
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d056      	beq.n	8005b34 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005a86:	4b2e      	ldr	r3, [pc, #184]	; (8005b40 <xTaskPriorityDisinherit+0xd0>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	693a      	ldr	r2, [r7, #16]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d00a      	beq.n	8005aa6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a94:	f383 8811 	msr	BASEPRI, r3
 8005a98:	f3bf 8f6f 	isb	sy
 8005a9c:	f3bf 8f4f 	dsb	sy
 8005aa0:	60fb      	str	r3, [r7, #12]
}
 8005aa2:	bf00      	nop
 8005aa4:	e7fe      	b.n	8005aa4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d10a      	bne.n	8005ac4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab2:	f383 8811 	msr	BASEPRI, r3
 8005ab6:	f3bf 8f6f 	isb	sy
 8005aba:	f3bf 8f4f 	dsb	sy
 8005abe:	60bb      	str	r3, [r7, #8]
}
 8005ac0:	bf00      	nop
 8005ac2:	e7fe      	b.n	8005ac2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ac8:	1e5a      	subs	r2, r3, #1
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d02c      	beq.n	8005b34 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d128      	bne.n	8005b34 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	3304      	adds	r3, #4
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f7fe fc70 	bl	80043cc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b04:	4b0f      	ldr	r3, [pc, #60]	; (8005b44 <xTaskPriorityDisinherit+0xd4>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d903      	bls.n	8005b14 <xTaskPriorityDisinherit+0xa4>
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b10:	4a0c      	ldr	r2, [pc, #48]	; (8005b44 <xTaskPriorityDisinherit+0xd4>)
 8005b12:	6013      	str	r3, [r2, #0]
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b18:	4613      	mov	r3, r2
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	4413      	add	r3, r2
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	4a09      	ldr	r2, [pc, #36]	; (8005b48 <xTaskPriorityDisinherit+0xd8>)
 8005b22:	441a      	add	r2, r3
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	3304      	adds	r3, #4
 8005b28:	4619      	mov	r1, r3
 8005b2a:	4610      	mov	r0, r2
 8005b2c:	f7fe fbf1 	bl	8004312 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005b30:	2301      	movs	r3, #1
 8005b32:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005b34:	697b      	ldr	r3, [r7, #20]
	}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3718      	adds	r7, #24
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
 8005b3e:	bf00      	nop
 8005b40:	2000088c 	.word	0x2000088c
 8005b44:	20000d68 	.word	0x20000d68
 8005b48:	20000890 	.word	0x20000890

08005b4c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005b56:	4b21      	ldr	r3, [pc, #132]	; (8005bdc <prvAddCurrentTaskToDelayedList+0x90>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b5c:	4b20      	ldr	r3, [pc, #128]	; (8005be0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	3304      	adds	r3, #4
 8005b62:	4618      	mov	r0, r3
 8005b64:	f7fe fc32 	bl	80043cc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b6e:	d10a      	bne.n	8005b86 <prvAddCurrentTaskToDelayedList+0x3a>
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d007      	beq.n	8005b86 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b76:	4b1a      	ldr	r3, [pc, #104]	; (8005be0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	3304      	adds	r3, #4
 8005b7c:	4619      	mov	r1, r3
 8005b7e:	4819      	ldr	r0, [pc, #100]	; (8005be4 <prvAddCurrentTaskToDelayedList+0x98>)
 8005b80:	f7fe fbc7 	bl	8004312 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005b84:	e026      	b.n	8005bd4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005b86:	68fa      	ldr	r2, [r7, #12]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4413      	add	r3, r2
 8005b8c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005b8e:	4b14      	ldr	r3, [pc, #80]	; (8005be0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	68ba      	ldr	r2, [r7, #8]
 8005b94:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005b96:	68ba      	ldr	r2, [r7, #8]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d209      	bcs.n	8005bb2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b9e:	4b12      	ldr	r3, [pc, #72]	; (8005be8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	4b0f      	ldr	r3, [pc, #60]	; (8005be0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	3304      	adds	r3, #4
 8005ba8:	4619      	mov	r1, r3
 8005baa:	4610      	mov	r0, r2
 8005bac:	f7fe fbd5 	bl	800435a <vListInsert>
}
 8005bb0:	e010      	b.n	8005bd4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005bb2:	4b0e      	ldr	r3, [pc, #56]	; (8005bec <prvAddCurrentTaskToDelayedList+0xa0>)
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	4b0a      	ldr	r3, [pc, #40]	; (8005be0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	3304      	adds	r3, #4
 8005bbc:	4619      	mov	r1, r3
 8005bbe:	4610      	mov	r0, r2
 8005bc0:	f7fe fbcb 	bl	800435a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005bc4:	4b0a      	ldr	r3, [pc, #40]	; (8005bf0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	68ba      	ldr	r2, [r7, #8]
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d202      	bcs.n	8005bd4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005bce:	4a08      	ldr	r2, [pc, #32]	; (8005bf0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	6013      	str	r3, [r2, #0]
}
 8005bd4:	bf00      	nop
 8005bd6:	3710      	adds	r7, #16
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}
 8005bdc:	20000d64 	.word	0x20000d64
 8005be0:	2000088c 	.word	0x2000088c
 8005be4:	20000d4c 	.word	0x20000d4c
 8005be8:	20000d1c 	.word	0x20000d1c
 8005bec:	20000d18 	.word	0x20000d18
 8005bf0:	20000d80 	.word	0x20000d80

08005bf4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b08a      	sub	sp, #40	; 0x28
 8005bf8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005bfe:	f000 fb07 	bl	8006210 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005c02:	4b1c      	ldr	r3, [pc, #112]	; (8005c74 <xTimerCreateTimerTask+0x80>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d021      	beq.n	8005c4e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005c12:	1d3a      	adds	r2, r7, #4
 8005c14:	f107 0108 	add.w	r1, r7, #8
 8005c18:	f107 030c 	add.w	r3, r7, #12
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f7fe fb31 	bl	8004284 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005c22:	6879      	ldr	r1, [r7, #4]
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	68fa      	ldr	r2, [r7, #12]
 8005c28:	9202      	str	r2, [sp, #8]
 8005c2a:	9301      	str	r3, [sp, #4]
 8005c2c:	2302      	movs	r3, #2
 8005c2e:	9300      	str	r3, [sp, #0]
 8005c30:	2300      	movs	r3, #0
 8005c32:	460a      	mov	r2, r1
 8005c34:	4910      	ldr	r1, [pc, #64]	; (8005c78 <xTimerCreateTimerTask+0x84>)
 8005c36:	4811      	ldr	r0, [pc, #68]	; (8005c7c <xTimerCreateTimerTask+0x88>)
 8005c38:	f7ff f8de 	bl	8004df8 <xTaskCreateStatic>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	4a10      	ldr	r2, [pc, #64]	; (8005c80 <xTimerCreateTimerTask+0x8c>)
 8005c40:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005c42:	4b0f      	ldr	r3, [pc, #60]	; (8005c80 <xTimerCreateTimerTask+0x8c>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d001      	beq.n	8005c4e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d10a      	bne.n	8005c6a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c58:	f383 8811 	msr	BASEPRI, r3
 8005c5c:	f3bf 8f6f 	isb	sy
 8005c60:	f3bf 8f4f 	dsb	sy
 8005c64:	613b      	str	r3, [r7, #16]
}
 8005c66:	bf00      	nop
 8005c68:	e7fe      	b.n	8005c68 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005c6a:	697b      	ldr	r3, [r7, #20]
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3718      	adds	r7, #24
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}
 8005c74:	20000dbc 	.word	0x20000dbc
 8005c78:	08007938 	.word	0x08007938
 8005c7c:	08005db9 	.word	0x08005db9
 8005c80:	20000dc0 	.word	0x20000dc0

08005c84 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b08a      	sub	sp, #40	; 0x28
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	60f8      	str	r0, [r7, #12]
 8005c8c:	60b9      	str	r1, [r7, #8]
 8005c8e:	607a      	str	r2, [r7, #4]
 8005c90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005c92:	2300      	movs	r3, #0
 8005c94:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d10a      	bne.n	8005cb2 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca0:	f383 8811 	msr	BASEPRI, r3
 8005ca4:	f3bf 8f6f 	isb	sy
 8005ca8:	f3bf 8f4f 	dsb	sy
 8005cac:	623b      	str	r3, [r7, #32]
}
 8005cae:	bf00      	nop
 8005cb0:	e7fe      	b.n	8005cb0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005cb2:	4b1a      	ldr	r3, [pc, #104]	; (8005d1c <xTimerGenericCommand+0x98>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d02a      	beq.n	8005d10 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	2b05      	cmp	r3, #5
 8005cca:	dc18      	bgt.n	8005cfe <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005ccc:	f7ff feb2 	bl	8005a34 <xTaskGetSchedulerState>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	2b02      	cmp	r3, #2
 8005cd4:	d109      	bne.n	8005cea <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005cd6:	4b11      	ldr	r3, [pc, #68]	; (8005d1c <xTimerGenericCommand+0x98>)
 8005cd8:	6818      	ldr	r0, [r3, #0]
 8005cda:	f107 0110 	add.w	r1, r7, #16
 8005cde:	2300      	movs	r3, #0
 8005ce0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ce2:	f7fe fca1 	bl	8004628 <xQueueGenericSend>
 8005ce6:	6278      	str	r0, [r7, #36]	; 0x24
 8005ce8:	e012      	b.n	8005d10 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005cea:	4b0c      	ldr	r3, [pc, #48]	; (8005d1c <xTimerGenericCommand+0x98>)
 8005cec:	6818      	ldr	r0, [r3, #0]
 8005cee:	f107 0110 	add.w	r1, r7, #16
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f7fe fc97 	bl	8004628 <xQueueGenericSend>
 8005cfa:	6278      	str	r0, [r7, #36]	; 0x24
 8005cfc:	e008      	b.n	8005d10 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005cfe:	4b07      	ldr	r3, [pc, #28]	; (8005d1c <xTimerGenericCommand+0x98>)
 8005d00:	6818      	ldr	r0, [r3, #0]
 8005d02:	f107 0110 	add.w	r1, r7, #16
 8005d06:	2300      	movs	r3, #0
 8005d08:	683a      	ldr	r2, [r7, #0]
 8005d0a:	f7fe fd8b 	bl	8004824 <xQueueGenericSendFromISR>
 8005d0e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3728      	adds	r7, #40	; 0x28
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}
 8005d1a:	bf00      	nop
 8005d1c:	20000dbc 	.word	0x20000dbc

08005d20 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b088      	sub	sp, #32
 8005d24:	af02      	add	r7, sp, #8
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d2a:	4b22      	ldr	r3, [pc, #136]	; (8005db4 <prvProcessExpiredTimer+0x94>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	3304      	adds	r3, #4
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f7fe fb47 	bl	80043cc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d44:	f003 0304 	and.w	r3, r3, #4
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d022      	beq.n	8005d92 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	699a      	ldr	r2, [r3, #24]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	18d1      	adds	r1, r2, r3
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	683a      	ldr	r2, [r7, #0]
 8005d58:	6978      	ldr	r0, [r7, #20]
 8005d5a:	f000 f8d1 	bl	8005f00 <prvInsertTimerInActiveList>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d01f      	beq.n	8005da4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005d64:	2300      	movs	r3, #0
 8005d66:	9300      	str	r3, [sp, #0]
 8005d68:	2300      	movs	r3, #0
 8005d6a:	687a      	ldr	r2, [r7, #4]
 8005d6c:	2100      	movs	r1, #0
 8005d6e:	6978      	ldr	r0, [r7, #20]
 8005d70:	f7ff ff88 	bl	8005c84 <xTimerGenericCommand>
 8005d74:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d113      	bne.n	8005da4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d80:	f383 8811 	msr	BASEPRI, r3
 8005d84:	f3bf 8f6f 	isb	sy
 8005d88:	f3bf 8f4f 	dsb	sy
 8005d8c:	60fb      	str	r3, [r7, #12]
}
 8005d8e:	bf00      	nop
 8005d90:	e7fe      	b.n	8005d90 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d98:	f023 0301 	bic.w	r3, r3, #1
 8005d9c:	b2da      	uxtb	r2, r3
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	6a1b      	ldr	r3, [r3, #32]
 8005da8:	6978      	ldr	r0, [r7, #20]
 8005daa:	4798      	blx	r3
}
 8005dac:	bf00      	nop
 8005dae:	3718      	adds	r7, #24
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}
 8005db4:	20000db4 	.word	0x20000db4

08005db8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b084      	sub	sp, #16
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005dc0:	f107 0308 	add.w	r3, r7, #8
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f000 f857 	bl	8005e78 <prvGetNextExpireTime>
 8005dca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	4619      	mov	r1, r3
 8005dd0:	68f8      	ldr	r0, [r7, #12]
 8005dd2:	f000 f803 	bl	8005ddc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005dd6:	f000 f8d5 	bl	8005f84 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005dda:	e7f1      	b.n	8005dc0 <prvTimerTask+0x8>

08005ddc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b084      	sub	sp, #16
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005de6:	f7ff fa43 	bl	8005270 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005dea:	f107 0308 	add.w	r3, r7, #8
 8005dee:	4618      	mov	r0, r3
 8005df0:	f000 f866 	bl	8005ec0 <prvSampleTimeNow>
 8005df4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d130      	bne.n	8005e5e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d10a      	bne.n	8005e18 <prvProcessTimerOrBlockTask+0x3c>
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d806      	bhi.n	8005e18 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005e0a:	f7ff fa3f 	bl	800528c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005e0e:	68f9      	ldr	r1, [r7, #12]
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f7ff ff85 	bl	8005d20 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005e16:	e024      	b.n	8005e62 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d008      	beq.n	8005e30 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005e1e:	4b13      	ldr	r3, [pc, #76]	; (8005e6c <prvProcessTimerOrBlockTask+0x90>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d101      	bne.n	8005e2c <prvProcessTimerOrBlockTask+0x50>
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e000      	b.n	8005e2e <prvProcessTimerOrBlockTask+0x52>
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005e30:	4b0f      	ldr	r3, [pc, #60]	; (8005e70 <prvProcessTimerOrBlockTask+0x94>)
 8005e32:	6818      	ldr	r0, [r3, #0]
 8005e34:	687a      	ldr	r2, [r7, #4]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	1ad3      	subs	r3, r2, r3
 8005e3a:	683a      	ldr	r2, [r7, #0]
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	f7fe ffa7 	bl	8004d90 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005e42:	f7ff fa23 	bl	800528c <xTaskResumeAll>
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d10a      	bne.n	8005e62 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005e4c:	4b09      	ldr	r3, [pc, #36]	; (8005e74 <prvProcessTimerOrBlockTask+0x98>)
 8005e4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e52:	601a      	str	r2, [r3, #0]
 8005e54:	f3bf 8f4f 	dsb	sy
 8005e58:	f3bf 8f6f 	isb	sy
}
 8005e5c:	e001      	b.n	8005e62 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005e5e:	f7ff fa15 	bl	800528c <xTaskResumeAll>
}
 8005e62:	bf00      	nop
 8005e64:	3710      	adds	r7, #16
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	bf00      	nop
 8005e6c:	20000db8 	.word	0x20000db8
 8005e70:	20000dbc 	.word	0x20000dbc
 8005e74:	e000ed04 	.word	0xe000ed04

08005e78 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b085      	sub	sp, #20
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005e80:	4b0e      	ldr	r3, [pc, #56]	; (8005ebc <prvGetNextExpireTime+0x44>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d101      	bne.n	8005e8e <prvGetNextExpireTime+0x16>
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	e000      	b.n	8005e90 <prvGetNextExpireTime+0x18>
 8005e8e:	2200      	movs	r2, #0
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d105      	bne.n	8005ea8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005e9c:	4b07      	ldr	r3, [pc, #28]	; (8005ebc <prvGetNextExpireTime+0x44>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	68db      	ldr	r3, [r3, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	60fb      	str	r3, [r7, #12]
 8005ea6:	e001      	b.n	8005eac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005eac:	68fb      	ldr	r3, [r7, #12]
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3714      	adds	r7, #20
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr
 8005eba:	bf00      	nop
 8005ebc:	20000db4 	.word	0x20000db4

08005ec0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b084      	sub	sp, #16
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005ec8:	f7ff fa7e 	bl	80053c8 <xTaskGetTickCount>
 8005ecc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005ece:	4b0b      	ldr	r3, [pc, #44]	; (8005efc <prvSampleTimeNow+0x3c>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	68fa      	ldr	r2, [r7, #12]
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d205      	bcs.n	8005ee4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005ed8:	f000 f936 	bl	8006148 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	601a      	str	r2, [r3, #0]
 8005ee2:	e002      	b.n	8005eea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005eea:	4a04      	ldr	r2, [pc, #16]	; (8005efc <prvSampleTimeNow+0x3c>)
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3710      	adds	r7, #16
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}
 8005efa:	bf00      	nop
 8005efc:	20000dc4 	.word	0x20000dc4

08005f00 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b086      	sub	sp, #24
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	60f8      	str	r0, [r7, #12]
 8005f08:	60b9      	str	r1, [r7, #8]
 8005f0a:	607a      	str	r2, [r7, #4]
 8005f0c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	68ba      	ldr	r2, [r7, #8]
 8005f16:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	68fa      	ldr	r2, [r7, #12]
 8005f1c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005f1e:	68ba      	ldr	r2, [r7, #8]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d812      	bhi.n	8005f4c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f26:	687a      	ldr	r2, [r7, #4]
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	1ad2      	subs	r2, r2, r3
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	699b      	ldr	r3, [r3, #24]
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d302      	bcc.n	8005f3a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005f34:	2301      	movs	r3, #1
 8005f36:	617b      	str	r3, [r7, #20]
 8005f38:	e01b      	b.n	8005f72 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005f3a:	4b10      	ldr	r3, [pc, #64]	; (8005f7c <prvInsertTimerInActiveList+0x7c>)
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	3304      	adds	r3, #4
 8005f42:	4619      	mov	r1, r3
 8005f44:	4610      	mov	r0, r2
 8005f46:	f7fe fa08 	bl	800435a <vListInsert>
 8005f4a:	e012      	b.n	8005f72 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d206      	bcs.n	8005f62 <prvInsertTimerInActiveList+0x62>
 8005f54:	68ba      	ldr	r2, [r7, #8]
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d302      	bcc.n	8005f62 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	617b      	str	r3, [r7, #20]
 8005f60:	e007      	b.n	8005f72 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005f62:	4b07      	ldr	r3, [pc, #28]	; (8005f80 <prvInsertTimerInActiveList+0x80>)
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	3304      	adds	r3, #4
 8005f6a:	4619      	mov	r1, r3
 8005f6c:	4610      	mov	r0, r2
 8005f6e:	f7fe f9f4 	bl	800435a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005f72:	697b      	ldr	r3, [r7, #20]
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3718      	adds	r7, #24
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}
 8005f7c:	20000db8 	.word	0x20000db8
 8005f80:	20000db4 	.word	0x20000db4

08005f84 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b08e      	sub	sp, #56	; 0x38
 8005f88:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005f8a:	e0ca      	b.n	8006122 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	da18      	bge.n	8005fc4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005f92:	1d3b      	adds	r3, r7, #4
 8005f94:	3304      	adds	r3, #4
 8005f96:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d10a      	bne.n	8005fb4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa2:	f383 8811 	msr	BASEPRI, r3
 8005fa6:	f3bf 8f6f 	isb	sy
 8005faa:	f3bf 8f4f 	dsb	sy
 8005fae:	61fb      	str	r3, [r7, #28]
}
 8005fb0:	bf00      	nop
 8005fb2:	e7fe      	b.n	8005fb2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fba:	6850      	ldr	r0, [r2, #4]
 8005fbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fbe:	6892      	ldr	r2, [r2, #8]
 8005fc0:	4611      	mov	r1, r2
 8005fc2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	f2c0 80aa 	blt.w	8006120 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd2:	695b      	ldr	r3, [r3, #20]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d004      	beq.n	8005fe2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fda:	3304      	adds	r3, #4
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f7fe f9f5 	bl	80043cc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005fe2:	463b      	mov	r3, r7
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f7ff ff6b 	bl	8005ec0 <prvSampleTimeNow>
 8005fea:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2b09      	cmp	r3, #9
 8005ff0:	f200 8097 	bhi.w	8006122 <prvProcessReceivedCommands+0x19e>
 8005ff4:	a201      	add	r2, pc, #4	; (adr r2, 8005ffc <prvProcessReceivedCommands+0x78>)
 8005ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ffa:	bf00      	nop
 8005ffc:	08006025 	.word	0x08006025
 8006000:	08006025 	.word	0x08006025
 8006004:	08006025 	.word	0x08006025
 8006008:	08006099 	.word	0x08006099
 800600c:	080060ad 	.word	0x080060ad
 8006010:	080060f7 	.word	0x080060f7
 8006014:	08006025 	.word	0x08006025
 8006018:	08006025 	.word	0x08006025
 800601c:	08006099 	.word	0x08006099
 8006020:	080060ad 	.word	0x080060ad
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006026:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800602a:	f043 0301 	orr.w	r3, r3, #1
 800602e:	b2da      	uxtb	r2, r3
 8006030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006032:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006036:	68ba      	ldr	r2, [r7, #8]
 8006038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800603a:	699b      	ldr	r3, [r3, #24]
 800603c:	18d1      	adds	r1, r2, r3
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006042:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006044:	f7ff ff5c 	bl	8005f00 <prvInsertTimerInActiveList>
 8006048:	4603      	mov	r3, r0
 800604a:	2b00      	cmp	r3, #0
 800604c:	d069      	beq.n	8006122 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800604e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006050:	6a1b      	ldr	r3, [r3, #32]
 8006052:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006054:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006058:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800605c:	f003 0304 	and.w	r3, r3, #4
 8006060:	2b00      	cmp	r3, #0
 8006062:	d05e      	beq.n	8006122 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006064:	68ba      	ldr	r2, [r7, #8]
 8006066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006068:	699b      	ldr	r3, [r3, #24]
 800606a:	441a      	add	r2, r3
 800606c:	2300      	movs	r3, #0
 800606e:	9300      	str	r3, [sp, #0]
 8006070:	2300      	movs	r3, #0
 8006072:	2100      	movs	r1, #0
 8006074:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006076:	f7ff fe05 	bl	8005c84 <xTimerGenericCommand>
 800607a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800607c:	6a3b      	ldr	r3, [r7, #32]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d14f      	bne.n	8006122 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006086:	f383 8811 	msr	BASEPRI, r3
 800608a:	f3bf 8f6f 	isb	sy
 800608e:	f3bf 8f4f 	dsb	sy
 8006092:	61bb      	str	r3, [r7, #24]
}
 8006094:	bf00      	nop
 8006096:	e7fe      	b.n	8006096 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800609a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800609e:	f023 0301 	bic.w	r3, r3, #1
 80060a2:	b2da      	uxtb	r2, r3
 80060a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80060aa:	e03a      	b.n	8006122 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80060ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060b2:	f043 0301 	orr.w	r3, r3, #1
 80060b6:	b2da      	uxtb	r2, r3
 80060b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80060be:	68ba      	ldr	r2, [r7, #8]
 80060c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80060c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c6:	699b      	ldr	r3, [r3, #24]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d10a      	bne.n	80060e2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80060cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d0:	f383 8811 	msr	BASEPRI, r3
 80060d4:	f3bf 8f6f 	isb	sy
 80060d8:	f3bf 8f4f 	dsb	sy
 80060dc:	617b      	str	r3, [r7, #20]
}
 80060de:	bf00      	nop
 80060e0:	e7fe      	b.n	80060e0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80060e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e4:	699a      	ldr	r2, [r3, #24]
 80060e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e8:	18d1      	adds	r1, r2, r3
 80060ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060f0:	f7ff ff06 	bl	8005f00 <prvInsertTimerInActiveList>
					break;
 80060f4:	e015      	b.n	8006122 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80060f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060fc:	f003 0302 	and.w	r3, r3, #2
 8006100:	2b00      	cmp	r3, #0
 8006102:	d103      	bne.n	800610c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006104:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006106:	f000 fbdb 	bl	80068c0 <vPortFree>
 800610a:	e00a      	b.n	8006122 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800610c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800610e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006112:	f023 0301 	bic.w	r3, r3, #1
 8006116:	b2da      	uxtb	r2, r3
 8006118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800611a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800611e:	e000      	b.n	8006122 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006120:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006122:	4b08      	ldr	r3, [pc, #32]	; (8006144 <prvProcessReceivedCommands+0x1c0>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	1d39      	adds	r1, r7, #4
 8006128:	2200      	movs	r2, #0
 800612a:	4618      	mov	r0, r3
 800612c:	f7fe fc16 	bl	800495c <xQueueReceive>
 8006130:	4603      	mov	r3, r0
 8006132:	2b00      	cmp	r3, #0
 8006134:	f47f af2a 	bne.w	8005f8c <prvProcessReceivedCommands+0x8>
	}
}
 8006138:	bf00      	nop
 800613a:	bf00      	nop
 800613c:	3730      	adds	r7, #48	; 0x30
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
 8006142:	bf00      	nop
 8006144:	20000dbc 	.word	0x20000dbc

08006148 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b088      	sub	sp, #32
 800614c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800614e:	e048      	b.n	80061e2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006150:	4b2d      	ldr	r3, [pc, #180]	; (8006208 <prvSwitchTimerLists+0xc0>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	68db      	ldr	r3, [r3, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800615a:	4b2b      	ldr	r3, [pc, #172]	; (8006208 <prvSwitchTimerLists+0xc0>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	68db      	ldr	r3, [r3, #12]
 8006162:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	3304      	adds	r3, #4
 8006168:	4618      	mov	r0, r3
 800616a:	f7fe f92f 	bl	80043cc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6a1b      	ldr	r3, [r3, #32]
 8006172:	68f8      	ldr	r0, [r7, #12]
 8006174:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800617c:	f003 0304 	and.w	r3, r3, #4
 8006180:	2b00      	cmp	r3, #0
 8006182:	d02e      	beq.n	80061e2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	699b      	ldr	r3, [r3, #24]
 8006188:	693a      	ldr	r2, [r7, #16]
 800618a:	4413      	add	r3, r2
 800618c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800618e:	68ba      	ldr	r2, [r7, #8]
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	429a      	cmp	r2, r3
 8006194:	d90e      	bls.n	80061b4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	68ba      	ldr	r2, [r7, #8]
 800619a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	68fa      	ldr	r2, [r7, #12]
 80061a0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80061a2:	4b19      	ldr	r3, [pc, #100]	; (8006208 <prvSwitchTimerLists+0xc0>)
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	3304      	adds	r3, #4
 80061aa:	4619      	mov	r1, r3
 80061ac:	4610      	mov	r0, r2
 80061ae:	f7fe f8d4 	bl	800435a <vListInsert>
 80061b2:	e016      	b.n	80061e2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80061b4:	2300      	movs	r3, #0
 80061b6:	9300      	str	r3, [sp, #0]
 80061b8:	2300      	movs	r3, #0
 80061ba:	693a      	ldr	r2, [r7, #16]
 80061bc:	2100      	movs	r1, #0
 80061be:	68f8      	ldr	r0, [r7, #12]
 80061c0:	f7ff fd60 	bl	8005c84 <xTimerGenericCommand>
 80061c4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d10a      	bne.n	80061e2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80061cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d0:	f383 8811 	msr	BASEPRI, r3
 80061d4:	f3bf 8f6f 	isb	sy
 80061d8:	f3bf 8f4f 	dsb	sy
 80061dc:	603b      	str	r3, [r7, #0]
}
 80061de:	bf00      	nop
 80061e0:	e7fe      	b.n	80061e0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80061e2:	4b09      	ldr	r3, [pc, #36]	; (8006208 <prvSwitchTimerLists+0xc0>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d1b1      	bne.n	8006150 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80061ec:	4b06      	ldr	r3, [pc, #24]	; (8006208 <prvSwitchTimerLists+0xc0>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80061f2:	4b06      	ldr	r3, [pc, #24]	; (800620c <prvSwitchTimerLists+0xc4>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a04      	ldr	r2, [pc, #16]	; (8006208 <prvSwitchTimerLists+0xc0>)
 80061f8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80061fa:	4a04      	ldr	r2, [pc, #16]	; (800620c <prvSwitchTimerLists+0xc4>)
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	6013      	str	r3, [r2, #0]
}
 8006200:	bf00      	nop
 8006202:	3718      	adds	r7, #24
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}
 8006208:	20000db4 	.word	0x20000db4
 800620c:	20000db8 	.word	0x20000db8

08006210 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b082      	sub	sp, #8
 8006214:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006216:	f000 f965 	bl	80064e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800621a:	4b15      	ldr	r3, [pc, #84]	; (8006270 <prvCheckForValidListAndQueue+0x60>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d120      	bne.n	8006264 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006222:	4814      	ldr	r0, [pc, #80]	; (8006274 <prvCheckForValidListAndQueue+0x64>)
 8006224:	f7fe f848 	bl	80042b8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006228:	4813      	ldr	r0, [pc, #76]	; (8006278 <prvCheckForValidListAndQueue+0x68>)
 800622a:	f7fe f845 	bl	80042b8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800622e:	4b13      	ldr	r3, [pc, #76]	; (800627c <prvCheckForValidListAndQueue+0x6c>)
 8006230:	4a10      	ldr	r2, [pc, #64]	; (8006274 <prvCheckForValidListAndQueue+0x64>)
 8006232:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006234:	4b12      	ldr	r3, [pc, #72]	; (8006280 <prvCheckForValidListAndQueue+0x70>)
 8006236:	4a10      	ldr	r2, [pc, #64]	; (8006278 <prvCheckForValidListAndQueue+0x68>)
 8006238:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800623a:	2300      	movs	r3, #0
 800623c:	9300      	str	r3, [sp, #0]
 800623e:	4b11      	ldr	r3, [pc, #68]	; (8006284 <prvCheckForValidListAndQueue+0x74>)
 8006240:	4a11      	ldr	r2, [pc, #68]	; (8006288 <prvCheckForValidListAndQueue+0x78>)
 8006242:	2110      	movs	r1, #16
 8006244:	200a      	movs	r0, #10
 8006246:	f7fe f953 	bl	80044f0 <xQueueGenericCreateStatic>
 800624a:	4603      	mov	r3, r0
 800624c:	4a08      	ldr	r2, [pc, #32]	; (8006270 <prvCheckForValidListAndQueue+0x60>)
 800624e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006250:	4b07      	ldr	r3, [pc, #28]	; (8006270 <prvCheckForValidListAndQueue+0x60>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d005      	beq.n	8006264 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006258:	4b05      	ldr	r3, [pc, #20]	; (8006270 <prvCheckForValidListAndQueue+0x60>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	490b      	ldr	r1, [pc, #44]	; (800628c <prvCheckForValidListAndQueue+0x7c>)
 800625e:	4618      	mov	r0, r3
 8006260:	f7fe fd6c 	bl	8004d3c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006264:	f000 f96e 	bl	8006544 <vPortExitCritical>
}
 8006268:	bf00      	nop
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}
 800626e:	bf00      	nop
 8006270:	20000dbc 	.word	0x20000dbc
 8006274:	20000d8c 	.word	0x20000d8c
 8006278:	20000da0 	.word	0x20000da0
 800627c:	20000db4 	.word	0x20000db4
 8006280:	20000db8 	.word	0x20000db8
 8006284:	20000e68 	.word	0x20000e68
 8006288:	20000dc8 	.word	0x20000dc8
 800628c:	08007940 	.word	0x08007940

08006290 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006290:	b480      	push	{r7}
 8006292:	b085      	sub	sp, #20
 8006294:	af00      	add	r7, sp, #0
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	3b04      	subs	r3, #4
 80062a0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80062a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	3b04      	subs	r3, #4
 80062ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	f023 0201 	bic.w	r2, r3, #1
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	3b04      	subs	r3, #4
 80062be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80062c0:	4a0c      	ldr	r2, [pc, #48]	; (80062f4 <pxPortInitialiseStack+0x64>)
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	3b14      	subs	r3, #20
 80062ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	3b04      	subs	r3, #4
 80062d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f06f 0202 	mvn.w	r2, #2
 80062de:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	3b20      	subs	r3, #32
 80062e4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80062e6:	68fb      	ldr	r3, [r7, #12]
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3714      	adds	r7, #20
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr
 80062f4:	080062f9 	.word	0x080062f9

080062f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80062f8:	b480      	push	{r7}
 80062fa:	b085      	sub	sp, #20
 80062fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80062fe:	2300      	movs	r3, #0
 8006300:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006302:	4b12      	ldr	r3, [pc, #72]	; (800634c <prvTaskExitError+0x54>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800630a:	d00a      	beq.n	8006322 <prvTaskExitError+0x2a>
	__asm volatile
 800630c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006310:	f383 8811 	msr	BASEPRI, r3
 8006314:	f3bf 8f6f 	isb	sy
 8006318:	f3bf 8f4f 	dsb	sy
 800631c:	60fb      	str	r3, [r7, #12]
}
 800631e:	bf00      	nop
 8006320:	e7fe      	b.n	8006320 <prvTaskExitError+0x28>
	__asm volatile
 8006322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006326:	f383 8811 	msr	BASEPRI, r3
 800632a:	f3bf 8f6f 	isb	sy
 800632e:	f3bf 8f4f 	dsb	sy
 8006332:	60bb      	str	r3, [r7, #8]
}
 8006334:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006336:	bf00      	nop
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d0fc      	beq.n	8006338 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800633e:	bf00      	nop
 8006340:	bf00      	nop
 8006342:	3714      	adds	r7, #20
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr
 800634c:	2000000c 	.word	0x2000000c

08006350 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006350:	4b07      	ldr	r3, [pc, #28]	; (8006370 <pxCurrentTCBConst2>)
 8006352:	6819      	ldr	r1, [r3, #0]
 8006354:	6808      	ldr	r0, [r1, #0]
 8006356:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800635a:	f380 8809 	msr	PSP, r0
 800635e:	f3bf 8f6f 	isb	sy
 8006362:	f04f 0000 	mov.w	r0, #0
 8006366:	f380 8811 	msr	BASEPRI, r0
 800636a:	4770      	bx	lr
 800636c:	f3af 8000 	nop.w

08006370 <pxCurrentTCBConst2>:
 8006370:	2000088c 	.word	0x2000088c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006374:	bf00      	nop
 8006376:	bf00      	nop

08006378 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006378:	4808      	ldr	r0, [pc, #32]	; (800639c <prvPortStartFirstTask+0x24>)
 800637a:	6800      	ldr	r0, [r0, #0]
 800637c:	6800      	ldr	r0, [r0, #0]
 800637e:	f380 8808 	msr	MSP, r0
 8006382:	f04f 0000 	mov.w	r0, #0
 8006386:	f380 8814 	msr	CONTROL, r0
 800638a:	b662      	cpsie	i
 800638c:	b661      	cpsie	f
 800638e:	f3bf 8f4f 	dsb	sy
 8006392:	f3bf 8f6f 	isb	sy
 8006396:	df00      	svc	0
 8006398:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800639a:	bf00      	nop
 800639c:	e000ed08 	.word	0xe000ed08

080063a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b086      	sub	sp, #24
 80063a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80063a6:	4b46      	ldr	r3, [pc, #280]	; (80064c0 <xPortStartScheduler+0x120>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a46      	ldr	r2, [pc, #280]	; (80064c4 <xPortStartScheduler+0x124>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d10a      	bne.n	80063c6 <xPortStartScheduler+0x26>
	__asm volatile
 80063b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b4:	f383 8811 	msr	BASEPRI, r3
 80063b8:	f3bf 8f6f 	isb	sy
 80063bc:	f3bf 8f4f 	dsb	sy
 80063c0:	613b      	str	r3, [r7, #16]
}
 80063c2:	bf00      	nop
 80063c4:	e7fe      	b.n	80063c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80063c6:	4b3e      	ldr	r3, [pc, #248]	; (80064c0 <xPortStartScheduler+0x120>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a3f      	ldr	r2, [pc, #252]	; (80064c8 <xPortStartScheduler+0x128>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d10a      	bne.n	80063e6 <xPortStartScheduler+0x46>
	__asm volatile
 80063d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d4:	f383 8811 	msr	BASEPRI, r3
 80063d8:	f3bf 8f6f 	isb	sy
 80063dc:	f3bf 8f4f 	dsb	sy
 80063e0:	60fb      	str	r3, [r7, #12]
}
 80063e2:	bf00      	nop
 80063e4:	e7fe      	b.n	80063e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80063e6:	4b39      	ldr	r3, [pc, #228]	; (80064cc <xPortStartScheduler+0x12c>)
 80063e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	22ff      	movs	r2, #255	; 0xff
 80063f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	781b      	ldrb	r3, [r3, #0]
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006400:	78fb      	ldrb	r3, [r7, #3]
 8006402:	b2db      	uxtb	r3, r3
 8006404:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006408:	b2da      	uxtb	r2, r3
 800640a:	4b31      	ldr	r3, [pc, #196]	; (80064d0 <xPortStartScheduler+0x130>)
 800640c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800640e:	4b31      	ldr	r3, [pc, #196]	; (80064d4 <xPortStartScheduler+0x134>)
 8006410:	2207      	movs	r2, #7
 8006412:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006414:	e009      	b.n	800642a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006416:	4b2f      	ldr	r3, [pc, #188]	; (80064d4 <xPortStartScheduler+0x134>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	3b01      	subs	r3, #1
 800641c:	4a2d      	ldr	r2, [pc, #180]	; (80064d4 <xPortStartScheduler+0x134>)
 800641e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006420:	78fb      	ldrb	r3, [r7, #3]
 8006422:	b2db      	uxtb	r3, r3
 8006424:	005b      	lsls	r3, r3, #1
 8006426:	b2db      	uxtb	r3, r3
 8006428:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800642a:	78fb      	ldrb	r3, [r7, #3]
 800642c:	b2db      	uxtb	r3, r3
 800642e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006432:	2b80      	cmp	r3, #128	; 0x80
 8006434:	d0ef      	beq.n	8006416 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006436:	4b27      	ldr	r3, [pc, #156]	; (80064d4 <xPortStartScheduler+0x134>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f1c3 0307 	rsb	r3, r3, #7
 800643e:	2b04      	cmp	r3, #4
 8006440:	d00a      	beq.n	8006458 <xPortStartScheduler+0xb8>
	__asm volatile
 8006442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006446:	f383 8811 	msr	BASEPRI, r3
 800644a:	f3bf 8f6f 	isb	sy
 800644e:	f3bf 8f4f 	dsb	sy
 8006452:	60bb      	str	r3, [r7, #8]
}
 8006454:	bf00      	nop
 8006456:	e7fe      	b.n	8006456 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006458:	4b1e      	ldr	r3, [pc, #120]	; (80064d4 <xPortStartScheduler+0x134>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	021b      	lsls	r3, r3, #8
 800645e:	4a1d      	ldr	r2, [pc, #116]	; (80064d4 <xPortStartScheduler+0x134>)
 8006460:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006462:	4b1c      	ldr	r3, [pc, #112]	; (80064d4 <xPortStartScheduler+0x134>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800646a:	4a1a      	ldr	r2, [pc, #104]	; (80064d4 <xPortStartScheduler+0x134>)
 800646c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	b2da      	uxtb	r2, r3
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006476:	4b18      	ldr	r3, [pc, #96]	; (80064d8 <xPortStartScheduler+0x138>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a17      	ldr	r2, [pc, #92]	; (80064d8 <xPortStartScheduler+0x138>)
 800647c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006480:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006482:	4b15      	ldr	r3, [pc, #84]	; (80064d8 <xPortStartScheduler+0x138>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a14      	ldr	r2, [pc, #80]	; (80064d8 <xPortStartScheduler+0x138>)
 8006488:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800648c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800648e:	f000 f8dd 	bl	800664c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006492:	4b12      	ldr	r3, [pc, #72]	; (80064dc <xPortStartScheduler+0x13c>)
 8006494:	2200      	movs	r2, #0
 8006496:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006498:	f000 f8fc 	bl	8006694 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800649c:	4b10      	ldr	r3, [pc, #64]	; (80064e0 <xPortStartScheduler+0x140>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a0f      	ldr	r2, [pc, #60]	; (80064e0 <xPortStartScheduler+0x140>)
 80064a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80064a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80064a8:	f7ff ff66 	bl	8006378 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80064ac:	f7ff f856 	bl	800555c <vTaskSwitchContext>
	prvTaskExitError();
 80064b0:	f7ff ff22 	bl	80062f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80064b4:	2300      	movs	r3, #0
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3718      	adds	r7, #24
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop
 80064c0:	e000ed00 	.word	0xe000ed00
 80064c4:	410fc271 	.word	0x410fc271
 80064c8:	410fc270 	.word	0x410fc270
 80064cc:	e000e400 	.word	0xe000e400
 80064d0:	20000eb8 	.word	0x20000eb8
 80064d4:	20000ebc 	.word	0x20000ebc
 80064d8:	e000ed20 	.word	0xe000ed20
 80064dc:	2000000c 	.word	0x2000000c
 80064e0:	e000ef34 	.word	0xe000ef34

080064e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80064e4:	b480      	push	{r7}
 80064e6:	b083      	sub	sp, #12
 80064e8:	af00      	add	r7, sp, #0
	__asm volatile
 80064ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ee:	f383 8811 	msr	BASEPRI, r3
 80064f2:	f3bf 8f6f 	isb	sy
 80064f6:	f3bf 8f4f 	dsb	sy
 80064fa:	607b      	str	r3, [r7, #4]
}
 80064fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80064fe:	4b0f      	ldr	r3, [pc, #60]	; (800653c <vPortEnterCritical+0x58>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	3301      	adds	r3, #1
 8006504:	4a0d      	ldr	r2, [pc, #52]	; (800653c <vPortEnterCritical+0x58>)
 8006506:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006508:	4b0c      	ldr	r3, [pc, #48]	; (800653c <vPortEnterCritical+0x58>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	2b01      	cmp	r3, #1
 800650e:	d10f      	bne.n	8006530 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006510:	4b0b      	ldr	r3, [pc, #44]	; (8006540 <vPortEnterCritical+0x5c>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	b2db      	uxtb	r3, r3
 8006516:	2b00      	cmp	r3, #0
 8006518:	d00a      	beq.n	8006530 <vPortEnterCritical+0x4c>
	__asm volatile
 800651a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800651e:	f383 8811 	msr	BASEPRI, r3
 8006522:	f3bf 8f6f 	isb	sy
 8006526:	f3bf 8f4f 	dsb	sy
 800652a:	603b      	str	r3, [r7, #0]
}
 800652c:	bf00      	nop
 800652e:	e7fe      	b.n	800652e <vPortEnterCritical+0x4a>
	}
}
 8006530:	bf00      	nop
 8006532:	370c      	adds	r7, #12
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr
 800653c:	2000000c 	.word	0x2000000c
 8006540:	e000ed04 	.word	0xe000ed04

08006544 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006544:	b480      	push	{r7}
 8006546:	b083      	sub	sp, #12
 8006548:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800654a:	4b12      	ldr	r3, [pc, #72]	; (8006594 <vPortExitCritical+0x50>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d10a      	bne.n	8006568 <vPortExitCritical+0x24>
	__asm volatile
 8006552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006556:	f383 8811 	msr	BASEPRI, r3
 800655a:	f3bf 8f6f 	isb	sy
 800655e:	f3bf 8f4f 	dsb	sy
 8006562:	607b      	str	r3, [r7, #4]
}
 8006564:	bf00      	nop
 8006566:	e7fe      	b.n	8006566 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006568:	4b0a      	ldr	r3, [pc, #40]	; (8006594 <vPortExitCritical+0x50>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	3b01      	subs	r3, #1
 800656e:	4a09      	ldr	r2, [pc, #36]	; (8006594 <vPortExitCritical+0x50>)
 8006570:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006572:	4b08      	ldr	r3, [pc, #32]	; (8006594 <vPortExitCritical+0x50>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d105      	bne.n	8006586 <vPortExitCritical+0x42>
 800657a:	2300      	movs	r3, #0
 800657c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	f383 8811 	msr	BASEPRI, r3
}
 8006584:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006586:	bf00      	nop
 8006588:	370c      	adds	r7, #12
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr
 8006592:	bf00      	nop
 8006594:	2000000c 	.word	0x2000000c
	...

080065a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80065a0:	f3ef 8009 	mrs	r0, PSP
 80065a4:	f3bf 8f6f 	isb	sy
 80065a8:	4b15      	ldr	r3, [pc, #84]	; (8006600 <pxCurrentTCBConst>)
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	f01e 0f10 	tst.w	lr, #16
 80065b0:	bf08      	it	eq
 80065b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80065b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065ba:	6010      	str	r0, [r2, #0]
 80065bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80065c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80065c4:	f380 8811 	msr	BASEPRI, r0
 80065c8:	f3bf 8f4f 	dsb	sy
 80065cc:	f3bf 8f6f 	isb	sy
 80065d0:	f7fe ffc4 	bl	800555c <vTaskSwitchContext>
 80065d4:	f04f 0000 	mov.w	r0, #0
 80065d8:	f380 8811 	msr	BASEPRI, r0
 80065dc:	bc09      	pop	{r0, r3}
 80065de:	6819      	ldr	r1, [r3, #0]
 80065e0:	6808      	ldr	r0, [r1, #0]
 80065e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065e6:	f01e 0f10 	tst.w	lr, #16
 80065ea:	bf08      	it	eq
 80065ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80065f0:	f380 8809 	msr	PSP, r0
 80065f4:	f3bf 8f6f 	isb	sy
 80065f8:	4770      	bx	lr
 80065fa:	bf00      	nop
 80065fc:	f3af 8000 	nop.w

08006600 <pxCurrentTCBConst>:
 8006600:	2000088c 	.word	0x2000088c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006604:	bf00      	nop
 8006606:	bf00      	nop

08006608 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b082      	sub	sp, #8
 800660c:	af00      	add	r7, sp, #0
	__asm volatile
 800660e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006612:	f383 8811 	msr	BASEPRI, r3
 8006616:	f3bf 8f6f 	isb	sy
 800661a:	f3bf 8f4f 	dsb	sy
 800661e:	607b      	str	r3, [r7, #4]
}
 8006620:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006622:	f7fe fee1 	bl	80053e8 <xTaskIncrementTick>
 8006626:	4603      	mov	r3, r0
 8006628:	2b00      	cmp	r3, #0
 800662a:	d003      	beq.n	8006634 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800662c:	4b06      	ldr	r3, [pc, #24]	; (8006648 <xPortSysTickHandler+0x40>)
 800662e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006632:	601a      	str	r2, [r3, #0]
 8006634:	2300      	movs	r3, #0
 8006636:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	f383 8811 	msr	BASEPRI, r3
}
 800663e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006640:	bf00      	nop
 8006642:	3708      	adds	r7, #8
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}
 8006648:	e000ed04 	.word	0xe000ed04

0800664c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800664c:	b480      	push	{r7}
 800664e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006650:	4b0b      	ldr	r3, [pc, #44]	; (8006680 <vPortSetupTimerInterrupt+0x34>)
 8006652:	2200      	movs	r2, #0
 8006654:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006656:	4b0b      	ldr	r3, [pc, #44]	; (8006684 <vPortSetupTimerInterrupt+0x38>)
 8006658:	2200      	movs	r2, #0
 800665a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800665c:	4b0a      	ldr	r3, [pc, #40]	; (8006688 <vPortSetupTimerInterrupt+0x3c>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a0a      	ldr	r2, [pc, #40]	; (800668c <vPortSetupTimerInterrupt+0x40>)
 8006662:	fba2 2303 	umull	r2, r3, r2, r3
 8006666:	099b      	lsrs	r3, r3, #6
 8006668:	4a09      	ldr	r2, [pc, #36]	; (8006690 <vPortSetupTimerInterrupt+0x44>)
 800666a:	3b01      	subs	r3, #1
 800666c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800666e:	4b04      	ldr	r3, [pc, #16]	; (8006680 <vPortSetupTimerInterrupt+0x34>)
 8006670:	2207      	movs	r2, #7
 8006672:	601a      	str	r2, [r3, #0]
}
 8006674:	bf00      	nop
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr
 800667e:	bf00      	nop
 8006680:	e000e010 	.word	0xe000e010
 8006684:	e000e018 	.word	0xe000e018
 8006688:	20000000 	.word	0x20000000
 800668c:	10624dd3 	.word	0x10624dd3
 8006690:	e000e014 	.word	0xe000e014

08006694 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006694:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80066a4 <vPortEnableVFP+0x10>
 8006698:	6801      	ldr	r1, [r0, #0]
 800669a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800669e:	6001      	str	r1, [r0, #0]
 80066a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80066a2:	bf00      	nop
 80066a4:	e000ed88 	.word	0xe000ed88

080066a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80066a8:	b480      	push	{r7}
 80066aa:	b085      	sub	sp, #20
 80066ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80066ae:	f3ef 8305 	mrs	r3, IPSR
 80066b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2b0f      	cmp	r3, #15
 80066b8:	d914      	bls.n	80066e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80066ba:	4a17      	ldr	r2, [pc, #92]	; (8006718 <vPortValidateInterruptPriority+0x70>)
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	4413      	add	r3, r2
 80066c0:	781b      	ldrb	r3, [r3, #0]
 80066c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80066c4:	4b15      	ldr	r3, [pc, #84]	; (800671c <vPortValidateInterruptPriority+0x74>)
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	7afa      	ldrb	r2, [r7, #11]
 80066ca:	429a      	cmp	r2, r3
 80066cc:	d20a      	bcs.n	80066e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80066ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d2:	f383 8811 	msr	BASEPRI, r3
 80066d6:	f3bf 8f6f 	isb	sy
 80066da:	f3bf 8f4f 	dsb	sy
 80066de:	607b      	str	r3, [r7, #4]
}
 80066e0:	bf00      	nop
 80066e2:	e7fe      	b.n	80066e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80066e4:	4b0e      	ldr	r3, [pc, #56]	; (8006720 <vPortValidateInterruptPriority+0x78>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80066ec:	4b0d      	ldr	r3, [pc, #52]	; (8006724 <vPortValidateInterruptPriority+0x7c>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d90a      	bls.n	800670a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80066f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f8:	f383 8811 	msr	BASEPRI, r3
 80066fc:	f3bf 8f6f 	isb	sy
 8006700:	f3bf 8f4f 	dsb	sy
 8006704:	603b      	str	r3, [r7, #0]
}
 8006706:	bf00      	nop
 8006708:	e7fe      	b.n	8006708 <vPortValidateInterruptPriority+0x60>
	}
 800670a:	bf00      	nop
 800670c:	3714      	adds	r7, #20
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	4770      	bx	lr
 8006716:	bf00      	nop
 8006718:	e000e3f0 	.word	0xe000e3f0
 800671c:	20000eb8 	.word	0x20000eb8
 8006720:	e000ed0c 	.word	0xe000ed0c
 8006724:	20000ebc 	.word	0x20000ebc

08006728 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b08a      	sub	sp, #40	; 0x28
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006730:	2300      	movs	r3, #0
 8006732:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006734:	f7fe fd9c 	bl	8005270 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006738:	4b5b      	ldr	r3, [pc, #364]	; (80068a8 <pvPortMalloc+0x180>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d101      	bne.n	8006744 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006740:	f000 f920 	bl	8006984 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006744:	4b59      	ldr	r3, [pc, #356]	; (80068ac <pvPortMalloc+0x184>)
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	4013      	ands	r3, r2
 800674c:	2b00      	cmp	r3, #0
 800674e:	f040 8093 	bne.w	8006878 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d01d      	beq.n	8006794 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006758:	2208      	movs	r2, #8
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4413      	add	r3, r2
 800675e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f003 0307 	and.w	r3, r3, #7
 8006766:	2b00      	cmp	r3, #0
 8006768:	d014      	beq.n	8006794 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f023 0307 	bic.w	r3, r3, #7
 8006770:	3308      	adds	r3, #8
 8006772:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f003 0307 	and.w	r3, r3, #7
 800677a:	2b00      	cmp	r3, #0
 800677c:	d00a      	beq.n	8006794 <pvPortMalloc+0x6c>
	__asm volatile
 800677e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006782:	f383 8811 	msr	BASEPRI, r3
 8006786:	f3bf 8f6f 	isb	sy
 800678a:	f3bf 8f4f 	dsb	sy
 800678e:	617b      	str	r3, [r7, #20]
}
 8006790:	bf00      	nop
 8006792:	e7fe      	b.n	8006792 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d06e      	beq.n	8006878 <pvPortMalloc+0x150>
 800679a:	4b45      	ldr	r3, [pc, #276]	; (80068b0 <pvPortMalloc+0x188>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d869      	bhi.n	8006878 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80067a4:	4b43      	ldr	r3, [pc, #268]	; (80068b4 <pvPortMalloc+0x18c>)
 80067a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80067a8:	4b42      	ldr	r3, [pc, #264]	; (80068b4 <pvPortMalloc+0x18c>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80067ae:	e004      	b.n	80067ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80067b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80067b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80067ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d903      	bls.n	80067cc <pvPortMalloc+0xa4>
 80067c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d1f1      	bne.n	80067b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80067cc:	4b36      	ldr	r3, [pc, #216]	; (80068a8 <pvPortMalloc+0x180>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067d2:	429a      	cmp	r2, r3
 80067d4:	d050      	beq.n	8006878 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80067d6:	6a3b      	ldr	r3, [r7, #32]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	2208      	movs	r2, #8
 80067dc:	4413      	add	r3, r2
 80067de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80067e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	6a3b      	ldr	r3, [r7, #32]
 80067e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80067e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ea:	685a      	ldr	r2, [r3, #4]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	1ad2      	subs	r2, r2, r3
 80067f0:	2308      	movs	r3, #8
 80067f2:	005b      	lsls	r3, r3, #1
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d91f      	bls.n	8006838 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80067f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	4413      	add	r3, r2
 80067fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006800:	69bb      	ldr	r3, [r7, #24]
 8006802:	f003 0307 	and.w	r3, r3, #7
 8006806:	2b00      	cmp	r3, #0
 8006808:	d00a      	beq.n	8006820 <pvPortMalloc+0xf8>
	__asm volatile
 800680a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800680e:	f383 8811 	msr	BASEPRI, r3
 8006812:	f3bf 8f6f 	isb	sy
 8006816:	f3bf 8f4f 	dsb	sy
 800681a:	613b      	str	r3, [r7, #16]
}
 800681c:	bf00      	nop
 800681e:	e7fe      	b.n	800681e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006822:	685a      	ldr	r2, [r3, #4]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	1ad2      	subs	r2, r2, r3
 8006828:	69bb      	ldr	r3, [r7, #24]
 800682a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800682c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682e:	687a      	ldr	r2, [r7, #4]
 8006830:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006832:	69b8      	ldr	r0, [r7, #24]
 8006834:	f000 f908 	bl	8006a48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006838:	4b1d      	ldr	r3, [pc, #116]	; (80068b0 <pvPortMalloc+0x188>)
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	1ad3      	subs	r3, r2, r3
 8006842:	4a1b      	ldr	r2, [pc, #108]	; (80068b0 <pvPortMalloc+0x188>)
 8006844:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006846:	4b1a      	ldr	r3, [pc, #104]	; (80068b0 <pvPortMalloc+0x188>)
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	4b1b      	ldr	r3, [pc, #108]	; (80068b8 <pvPortMalloc+0x190>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	429a      	cmp	r2, r3
 8006850:	d203      	bcs.n	800685a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006852:	4b17      	ldr	r3, [pc, #92]	; (80068b0 <pvPortMalloc+0x188>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a18      	ldr	r2, [pc, #96]	; (80068b8 <pvPortMalloc+0x190>)
 8006858:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800685a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685c:	685a      	ldr	r2, [r3, #4]
 800685e:	4b13      	ldr	r3, [pc, #76]	; (80068ac <pvPortMalloc+0x184>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	431a      	orrs	r2, r3
 8006864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006866:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686a:	2200      	movs	r2, #0
 800686c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800686e:	4b13      	ldr	r3, [pc, #76]	; (80068bc <pvPortMalloc+0x194>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	3301      	adds	r3, #1
 8006874:	4a11      	ldr	r2, [pc, #68]	; (80068bc <pvPortMalloc+0x194>)
 8006876:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006878:	f7fe fd08 	bl	800528c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800687c:	69fb      	ldr	r3, [r7, #28]
 800687e:	f003 0307 	and.w	r3, r3, #7
 8006882:	2b00      	cmp	r3, #0
 8006884:	d00a      	beq.n	800689c <pvPortMalloc+0x174>
	__asm volatile
 8006886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800688a:	f383 8811 	msr	BASEPRI, r3
 800688e:	f3bf 8f6f 	isb	sy
 8006892:	f3bf 8f4f 	dsb	sy
 8006896:	60fb      	str	r3, [r7, #12]
}
 8006898:	bf00      	nop
 800689a:	e7fe      	b.n	800689a <pvPortMalloc+0x172>
	return pvReturn;
 800689c:	69fb      	ldr	r3, [r7, #28]
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3728      	adds	r7, #40	; 0x28
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	bf00      	nop
 80068a8:	20004ac8 	.word	0x20004ac8
 80068ac:	20004adc 	.word	0x20004adc
 80068b0:	20004acc 	.word	0x20004acc
 80068b4:	20004ac0 	.word	0x20004ac0
 80068b8:	20004ad0 	.word	0x20004ad0
 80068bc:	20004ad4 	.word	0x20004ad4

080068c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b086      	sub	sp, #24
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d04d      	beq.n	800696e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80068d2:	2308      	movs	r3, #8
 80068d4:	425b      	negs	r3, r3
 80068d6:	697a      	ldr	r2, [r7, #20]
 80068d8:	4413      	add	r3, r2
 80068da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	685a      	ldr	r2, [r3, #4]
 80068e4:	4b24      	ldr	r3, [pc, #144]	; (8006978 <vPortFree+0xb8>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4013      	ands	r3, r2
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d10a      	bne.n	8006904 <vPortFree+0x44>
	__asm volatile
 80068ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f2:	f383 8811 	msr	BASEPRI, r3
 80068f6:	f3bf 8f6f 	isb	sy
 80068fa:	f3bf 8f4f 	dsb	sy
 80068fe:	60fb      	str	r3, [r7, #12]
}
 8006900:	bf00      	nop
 8006902:	e7fe      	b.n	8006902 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d00a      	beq.n	8006922 <vPortFree+0x62>
	__asm volatile
 800690c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006910:	f383 8811 	msr	BASEPRI, r3
 8006914:	f3bf 8f6f 	isb	sy
 8006918:	f3bf 8f4f 	dsb	sy
 800691c:	60bb      	str	r3, [r7, #8]
}
 800691e:	bf00      	nop
 8006920:	e7fe      	b.n	8006920 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	685a      	ldr	r2, [r3, #4]
 8006926:	4b14      	ldr	r3, [pc, #80]	; (8006978 <vPortFree+0xb8>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4013      	ands	r3, r2
 800692c:	2b00      	cmp	r3, #0
 800692e:	d01e      	beq.n	800696e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d11a      	bne.n	800696e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	685a      	ldr	r2, [r3, #4]
 800693c:	4b0e      	ldr	r3, [pc, #56]	; (8006978 <vPortFree+0xb8>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	43db      	mvns	r3, r3
 8006942:	401a      	ands	r2, r3
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006948:	f7fe fc92 	bl	8005270 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	685a      	ldr	r2, [r3, #4]
 8006950:	4b0a      	ldr	r3, [pc, #40]	; (800697c <vPortFree+0xbc>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4413      	add	r3, r2
 8006956:	4a09      	ldr	r2, [pc, #36]	; (800697c <vPortFree+0xbc>)
 8006958:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800695a:	6938      	ldr	r0, [r7, #16]
 800695c:	f000 f874 	bl	8006a48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006960:	4b07      	ldr	r3, [pc, #28]	; (8006980 <vPortFree+0xc0>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	3301      	adds	r3, #1
 8006966:	4a06      	ldr	r2, [pc, #24]	; (8006980 <vPortFree+0xc0>)
 8006968:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800696a:	f7fe fc8f 	bl	800528c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800696e:	bf00      	nop
 8006970:	3718      	adds	r7, #24
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
 8006976:	bf00      	nop
 8006978:	20004adc 	.word	0x20004adc
 800697c:	20004acc 	.word	0x20004acc
 8006980:	20004ad8 	.word	0x20004ad8

08006984 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006984:	b480      	push	{r7}
 8006986:	b085      	sub	sp, #20
 8006988:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800698a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800698e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006990:	4b27      	ldr	r3, [pc, #156]	; (8006a30 <prvHeapInit+0xac>)
 8006992:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f003 0307 	and.w	r3, r3, #7
 800699a:	2b00      	cmp	r3, #0
 800699c:	d00c      	beq.n	80069b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	3307      	adds	r3, #7
 80069a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f023 0307 	bic.w	r3, r3, #7
 80069aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80069ac:	68ba      	ldr	r2, [r7, #8]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	1ad3      	subs	r3, r2, r3
 80069b2:	4a1f      	ldr	r2, [pc, #124]	; (8006a30 <prvHeapInit+0xac>)
 80069b4:	4413      	add	r3, r2
 80069b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80069bc:	4a1d      	ldr	r2, [pc, #116]	; (8006a34 <prvHeapInit+0xb0>)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80069c2:	4b1c      	ldr	r3, [pc, #112]	; (8006a34 <prvHeapInit+0xb0>)
 80069c4:	2200      	movs	r2, #0
 80069c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	68ba      	ldr	r2, [r7, #8]
 80069cc:	4413      	add	r3, r2
 80069ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80069d0:	2208      	movs	r2, #8
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	1a9b      	subs	r3, r3, r2
 80069d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f023 0307 	bic.w	r3, r3, #7
 80069de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	4a15      	ldr	r2, [pc, #84]	; (8006a38 <prvHeapInit+0xb4>)
 80069e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80069e6:	4b14      	ldr	r3, [pc, #80]	; (8006a38 <prvHeapInit+0xb4>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	2200      	movs	r2, #0
 80069ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80069ee:	4b12      	ldr	r3, [pc, #72]	; (8006a38 <prvHeapInit+0xb4>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	2200      	movs	r2, #0
 80069f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	68fa      	ldr	r2, [r7, #12]
 80069fe:	1ad2      	subs	r2, r2, r3
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006a04:	4b0c      	ldr	r3, [pc, #48]	; (8006a38 <prvHeapInit+0xb4>)
 8006a06:	681a      	ldr	r2, [r3, #0]
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	4a0a      	ldr	r2, [pc, #40]	; (8006a3c <prvHeapInit+0xb8>)
 8006a12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	4a09      	ldr	r2, [pc, #36]	; (8006a40 <prvHeapInit+0xbc>)
 8006a1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006a1c:	4b09      	ldr	r3, [pc, #36]	; (8006a44 <prvHeapInit+0xc0>)
 8006a1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006a22:	601a      	str	r2, [r3, #0]
}
 8006a24:	bf00      	nop
 8006a26:	3714      	adds	r7, #20
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr
 8006a30:	20000ec0 	.word	0x20000ec0
 8006a34:	20004ac0 	.word	0x20004ac0
 8006a38:	20004ac8 	.word	0x20004ac8
 8006a3c:	20004ad0 	.word	0x20004ad0
 8006a40:	20004acc 	.word	0x20004acc
 8006a44:	20004adc 	.word	0x20004adc

08006a48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b085      	sub	sp, #20
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006a50:	4b28      	ldr	r3, [pc, #160]	; (8006af4 <prvInsertBlockIntoFreeList+0xac>)
 8006a52:	60fb      	str	r3, [r7, #12]
 8006a54:	e002      	b.n	8006a5c <prvInsertBlockIntoFreeList+0x14>
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	60fb      	str	r3, [r7, #12]
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	687a      	ldr	r2, [r7, #4]
 8006a62:	429a      	cmp	r2, r3
 8006a64:	d8f7      	bhi.n	8006a56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	68ba      	ldr	r2, [r7, #8]
 8006a70:	4413      	add	r3, r2
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d108      	bne.n	8006a8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	685a      	ldr	r2, [r3, #4]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	441a      	add	r2, r3
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	68ba      	ldr	r2, [r7, #8]
 8006a94:	441a      	add	r2, r3
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d118      	bne.n	8006ad0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	4b15      	ldr	r3, [pc, #84]	; (8006af8 <prvInsertBlockIntoFreeList+0xb0>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	d00d      	beq.n	8006ac6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	685a      	ldr	r2, [r3, #4]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	441a      	add	r2, r3
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	681a      	ldr	r2, [r3, #0]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	601a      	str	r2, [r3, #0]
 8006ac4:	e008      	b.n	8006ad8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006ac6:	4b0c      	ldr	r3, [pc, #48]	; (8006af8 <prvInsertBlockIntoFreeList+0xb0>)
 8006ac8:	681a      	ldr	r2, [r3, #0]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	601a      	str	r2, [r3, #0]
 8006ace:	e003      	b.n	8006ad8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006ad8:	68fa      	ldr	r2, [r7, #12]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	429a      	cmp	r2, r3
 8006ade:	d002      	beq.n	8006ae6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ae6:	bf00      	nop
 8006ae8:	3714      	adds	r7, #20
 8006aea:	46bd      	mov	sp, r7
 8006aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af0:	4770      	bx	lr
 8006af2:	bf00      	nop
 8006af4:	20004ac0 	.word	0x20004ac0
 8006af8:	20004ac8 	.word	0x20004ac8

08006afc <OLED_Refresh_Gram>:

#include "../../PeripheralDriver/Inc/oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b082      	sub	sp, #8
 8006b00:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 8006b02:	2300      	movs	r3, #0
 8006b04:	71fb      	strb	r3, [r7, #7]
 8006b06:	e026      	b.n	8006b56 <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 8006b08:	79fb      	ldrb	r3, [r7, #7]
 8006b0a:	3b50      	subs	r3, #80	; 0x50
 8006b0c:	b2db      	uxtb	r3, r3
 8006b0e:	2100      	movs	r1, #0
 8006b10:	4618      	mov	r0, r3
 8006b12:	f000 f82b 	bl	8006b6c <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 8006b16:	2100      	movs	r1, #0
 8006b18:	2000      	movs	r0, #0
 8006b1a:	f000 f827 	bl	8006b6c <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 8006b1e:	2100      	movs	r1, #0
 8006b20:	2010      	movs	r0, #16
 8006b22:	f000 f823 	bl	8006b6c <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 8006b26:	2300      	movs	r3, #0
 8006b28:	71bb      	strb	r3, [r7, #6]
 8006b2a:	e00d      	b.n	8006b48 <OLED_Refresh_Gram+0x4c>
 8006b2c:	79ba      	ldrb	r2, [r7, #6]
 8006b2e:	79fb      	ldrb	r3, [r7, #7]
 8006b30:	490d      	ldr	r1, [pc, #52]	; (8006b68 <OLED_Refresh_Gram+0x6c>)
 8006b32:	00d2      	lsls	r2, r2, #3
 8006b34:	440a      	add	r2, r1
 8006b36:	4413      	add	r3, r2
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	2101      	movs	r1, #1
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f000 f815 	bl	8006b6c <OLED_WR_Byte>
 8006b42:	79bb      	ldrb	r3, [r7, #6]
 8006b44:	3301      	adds	r3, #1
 8006b46:	71bb      	strb	r3, [r7, #6]
 8006b48:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	daed      	bge.n	8006b2c <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 8006b50:	79fb      	ldrb	r3, [r7, #7]
 8006b52:	3301      	adds	r3, #1
 8006b54:	71fb      	strb	r3, [r7, #7]
 8006b56:	79fb      	ldrb	r3, [r7, #7]
 8006b58:	2b07      	cmp	r3, #7
 8006b5a:	d9d5      	bls.n	8006b08 <OLED_Refresh_Gram+0xc>
	}   
}
 8006b5c:	bf00      	nop
 8006b5e:	bf00      	nop
 8006b60:	3708      	adds	r7, #8
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}
 8006b66:	bf00      	nop
 8006b68:	20004ae0 	.word	0x20004ae0

08006b6c <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b084      	sub	sp, #16
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	4603      	mov	r3, r0
 8006b74:	460a      	mov	r2, r1
 8006b76:	71fb      	strb	r3, [r7, #7]
 8006b78:	4613      	mov	r3, r2
 8006b7a:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 8006b7c:	79bb      	ldrb	r3, [r7, #6]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d006      	beq.n	8006b90 <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 8006b82:	2201      	movs	r2, #1
 8006b84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006b88:	481c      	ldr	r0, [pc, #112]	; (8006bfc <OLED_WR_Byte+0x90>)
 8006b8a:	f7fa fdf3 	bl	8001774 <HAL_GPIO_WritePin>
 8006b8e:	e005      	b.n	8006b9c <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 8006b90:	2200      	movs	r2, #0
 8006b92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006b96:	4819      	ldr	r0, [pc, #100]	; (8006bfc <OLED_WR_Byte+0x90>)
 8006b98:	f7fa fdec 	bl	8001774 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	73fb      	strb	r3, [r7, #15]
 8006ba0:	e01e      	b.n	8006be0 <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	2120      	movs	r1, #32
 8006ba6:	4815      	ldr	r0, [pc, #84]	; (8006bfc <OLED_WR_Byte+0x90>)
 8006ba8:	f7fa fde4 	bl	8001774 <HAL_GPIO_WritePin>
		if(dat&0x80)
 8006bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	da05      	bge.n	8006bc0 <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	2140      	movs	r1, #64	; 0x40
 8006bb8:	4810      	ldr	r0, [pc, #64]	; (8006bfc <OLED_WR_Byte+0x90>)
 8006bba:	f7fa fddb 	bl	8001774 <HAL_GPIO_WritePin>
 8006bbe:	e004      	b.n	8006bca <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	2140      	movs	r1, #64	; 0x40
 8006bc4:	480d      	ldr	r0, [pc, #52]	; (8006bfc <OLED_WR_Byte+0x90>)
 8006bc6:	f7fa fdd5 	bl	8001774 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 8006bca:	2201      	movs	r2, #1
 8006bcc:	2120      	movs	r1, #32
 8006bce:	480b      	ldr	r0, [pc, #44]	; (8006bfc <OLED_WR_Byte+0x90>)
 8006bd0:	f7fa fdd0 	bl	8001774 <HAL_GPIO_WritePin>
		dat<<=1;   
 8006bd4:	79fb      	ldrb	r3, [r7, #7]
 8006bd6:	005b      	lsls	r3, r3, #1
 8006bd8:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 8006bda:	7bfb      	ldrb	r3, [r7, #15]
 8006bdc:	3301      	adds	r3, #1
 8006bde:	73fb      	strb	r3, [r7, #15]
 8006be0:	7bfb      	ldrb	r3, [r7, #15]
 8006be2:	2b07      	cmp	r3, #7
 8006be4:	d9dd      	bls.n	8006ba2 <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 8006be6:	2201      	movs	r2, #1
 8006be8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006bec:	4803      	ldr	r0, [pc, #12]	; (8006bfc <OLED_WR_Byte+0x90>)
 8006bee:	f7fa fdc1 	bl	8001774 <HAL_GPIO_WritePin>
} 
 8006bf2:	bf00      	nop
 8006bf4:	3710      	adds	r7, #16
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}
 8006bfa:	bf00      	nop
 8006bfc:	40021000 	.word	0x40021000

08006c00 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b082      	sub	sp, #8
 8006c04:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 8006c06:	2300      	movs	r3, #0
 8006c08:	71fb      	strb	r3, [r7, #7]
 8006c0a:	e014      	b.n	8006c36 <OLED_Clear+0x36>
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	71bb      	strb	r3, [r7, #6]
 8006c10:	e00a      	b.n	8006c28 <OLED_Clear+0x28>
 8006c12:	79ba      	ldrb	r2, [r7, #6]
 8006c14:	79fb      	ldrb	r3, [r7, #7]
 8006c16:	490c      	ldr	r1, [pc, #48]	; (8006c48 <OLED_Clear+0x48>)
 8006c18:	00d2      	lsls	r2, r2, #3
 8006c1a:	440a      	add	r2, r1
 8006c1c:	4413      	add	r3, r2
 8006c1e:	2200      	movs	r2, #0
 8006c20:	701a      	strb	r2, [r3, #0]
 8006c22:	79bb      	ldrb	r3, [r7, #6]
 8006c24:	3301      	adds	r3, #1
 8006c26:	71bb      	strb	r3, [r7, #6]
 8006c28:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	daf0      	bge.n	8006c12 <OLED_Clear+0x12>
 8006c30:	79fb      	ldrb	r3, [r7, #7]
 8006c32:	3301      	adds	r3, #1
 8006c34:	71fb      	strb	r3, [r7, #7]
 8006c36:	79fb      	ldrb	r3, [r7, #7]
 8006c38:	2b07      	cmp	r3, #7
 8006c3a:	d9e7      	bls.n	8006c0c <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 8006c3c:	f7ff ff5e 	bl	8006afc <OLED_Refresh_Gram>
}
 8006c40:	bf00      	nop
 8006c42:	3708      	adds	r7, #8
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}
 8006c48:	20004ae0 	.word	0x20004ae0

08006c4c <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b085      	sub	sp, #20
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	4603      	mov	r3, r0
 8006c54:	71fb      	strb	r3, [r7, #7]
 8006c56:	460b      	mov	r3, r1
 8006c58:	71bb      	strb	r3, [r7, #6]
 8006c5a:	4613      	mov	r3, r2
 8006c5c:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 8006c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	db41      	blt.n	8006cee <OLED_DrawPoint+0xa2>
 8006c6a:	79bb      	ldrb	r3, [r7, #6]
 8006c6c:	2b3f      	cmp	r3, #63	; 0x3f
 8006c6e:	d83e      	bhi.n	8006cee <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 8006c70:	79bb      	ldrb	r3, [r7, #6]
 8006c72:	08db      	lsrs	r3, r3, #3
 8006c74:	b2db      	uxtb	r3, r3
 8006c76:	f1c3 0307 	rsb	r3, r3, #7
 8006c7a:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 8006c7c:	79bb      	ldrb	r3, [r7, #6]
 8006c7e:	f003 0307 	and.w	r3, r3, #7
 8006c82:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 8006c84:	7b7b      	ldrb	r3, [r7, #13]
 8006c86:	f1c3 0307 	rsb	r3, r3, #7
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c90:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 8006c92:	797b      	ldrb	r3, [r7, #5]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d012      	beq.n	8006cbe <OLED_DrawPoint+0x72>
 8006c98:	79fa      	ldrb	r2, [r7, #7]
 8006c9a:	7bbb      	ldrb	r3, [r7, #14]
 8006c9c:	4917      	ldr	r1, [pc, #92]	; (8006cfc <OLED_DrawPoint+0xb0>)
 8006c9e:	00d2      	lsls	r2, r2, #3
 8006ca0:	440a      	add	r2, r1
 8006ca2:	4413      	add	r3, r2
 8006ca4:	7818      	ldrb	r0, [r3, #0]
 8006ca6:	79fa      	ldrb	r2, [r7, #7]
 8006ca8:	7bbb      	ldrb	r3, [r7, #14]
 8006caa:	7bf9      	ldrb	r1, [r7, #15]
 8006cac:	4301      	orrs	r1, r0
 8006cae:	b2c8      	uxtb	r0, r1
 8006cb0:	4912      	ldr	r1, [pc, #72]	; (8006cfc <OLED_DrawPoint+0xb0>)
 8006cb2:	00d2      	lsls	r2, r2, #3
 8006cb4:	440a      	add	r2, r1
 8006cb6:	4413      	add	r3, r2
 8006cb8:	4602      	mov	r2, r0
 8006cba:	701a      	strb	r2, [r3, #0]
 8006cbc:	e018      	b.n	8006cf0 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 8006cbe:	79fa      	ldrb	r2, [r7, #7]
 8006cc0:	7bbb      	ldrb	r3, [r7, #14]
 8006cc2:	490e      	ldr	r1, [pc, #56]	; (8006cfc <OLED_DrawPoint+0xb0>)
 8006cc4:	00d2      	lsls	r2, r2, #3
 8006cc6:	440a      	add	r2, r1
 8006cc8:	4413      	add	r3, r2
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	b25a      	sxtb	r2, r3
 8006cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006cd2:	43db      	mvns	r3, r3
 8006cd4:	b25b      	sxtb	r3, r3
 8006cd6:	4013      	ands	r3, r2
 8006cd8:	b259      	sxtb	r1, r3
 8006cda:	79fa      	ldrb	r2, [r7, #7]
 8006cdc:	7bbb      	ldrb	r3, [r7, #14]
 8006cde:	b2c8      	uxtb	r0, r1
 8006ce0:	4906      	ldr	r1, [pc, #24]	; (8006cfc <OLED_DrawPoint+0xb0>)
 8006ce2:	00d2      	lsls	r2, r2, #3
 8006ce4:	440a      	add	r2, r1
 8006ce6:	4413      	add	r3, r2
 8006ce8:	4602      	mov	r2, r0
 8006cea:	701a      	strb	r2, [r3, #0]
 8006cec:	e000      	b.n	8006cf0 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 8006cee:	bf00      	nop
}
 8006cf0:	3714      	adds	r7, #20
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr
 8006cfa:	bf00      	nop
 8006cfc:	20004ae0 	.word	0x20004ae0

08006d00 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 8006d00:	b590      	push	{r4, r7, lr}
 8006d02:	b085      	sub	sp, #20
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	4604      	mov	r4, r0
 8006d08:	4608      	mov	r0, r1
 8006d0a:	4611      	mov	r1, r2
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	4623      	mov	r3, r4
 8006d10:	71fb      	strb	r3, [r7, #7]
 8006d12:	4603      	mov	r3, r0
 8006d14:	71bb      	strb	r3, [r7, #6]
 8006d16:	460b      	mov	r3, r1
 8006d18:	717b      	strb	r3, [r7, #5]
 8006d1a:	4613      	mov	r3, r2
 8006d1c:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 8006d1e:	79bb      	ldrb	r3, [r7, #6]
 8006d20:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 8006d22:	797b      	ldrb	r3, [r7, #5]
 8006d24:	3b20      	subs	r3, #32
 8006d26:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 8006d28:	2300      	movs	r3, #0
 8006d2a:	73bb      	strb	r3, [r7, #14]
 8006d2c:	e04d      	b.n	8006dca <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 8006d2e:	793b      	ldrb	r3, [r7, #4]
 8006d30:	2b0c      	cmp	r3, #12
 8006d32:	d10b      	bne.n	8006d4c <OLED_ShowChar+0x4c>
 8006d34:	797a      	ldrb	r2, [r7, #5]
 8006d36:	7bb9      	ldrb	r1, [r7, #14]
 8006d38:	4828      	ldr	r0, [pc, #160]	; (8006ddc <OLED_ShowChar+0xdc>)
 8006d3a:	4613      	mov	r3, r2
 8006d3c:	005b      	lsls	r3, r3, #1
 8006d3e:	4413      	add	r3, r2
 8006d40:	009b      	lsls	r3, r3, #2
 8006d42:	4403      	add	r3, r0
 8006d44:	440b      	add	r3, r1
 8006d46:	781b      	ldrb	r3, [r3, #0]
 8006d48:	73fb      	strb	r3, [r7, #15]
 8006d4a:	e007      	b.n	8006d5c <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 8006d4c:	797a      	ldrb	r2, [r7, #5]
 8006d4e:	7bbb      	ldrb	r3, [r7, #14]
 8006d50:	4923      	ldr	r1, [pc, #140]	; (8006de0 <OLED_ShowChar+0xe0>)
 8006d52:	0112      	lsls	r2, r2, #4
 8006d54:	440a      	add	r2, r1
 8006d56:	4413      	add	r3, r2
 8006d58:	781b      	ldrb	r3, [r3, #0]
 8006d5a:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	737b      	strb	r3, [r7, #13]
 8006d60:	e02d      	b.n	8006dbe <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 8006d62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	da07      	bge.n	8006d7a <OLED_ShowChar+0x7a>
 8006d6a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8006d6e:	79b9      	ldrb	r1, [r7, #6]
 8006d70:	79fb      	ldrb	r3, [r7, #7]
 8006d72:	4618      	mov	r0, r3
 8006d74:	f7ff ff6a 	bl	8006c4c <OLED_DrawPoint>
 8006d78:	e00c      	b.n	8006d94 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 8006d7a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	bf0c      	ite	eq
 8006d82:	2301      	moveq	r3, #1
 8006d84:	2300      	movne	r3, #0
 8006d86:	b2db      	uxtb	r3, r3
 8006d88:	461a      	mov	r2, r3
 8006d8a:	79b9      	ldrb	r1, [r7, #6]
 8006d8c:	79fb      	ldrb	r3, [r7, #7]
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f7ff ff5c 	bl	8006c4c <OLED_DrawPoint>
			temp<<=1;
 8006d94:	7bfb      	ldrb	r3, [r7, #15]
 8006d96:	005b      	lsls	r3, r3, #1
 8006d98:	73fb      	strb	r3, [r7, #15]
			y++;
 8006d9a:	79bb      	ldrb	r3, [r7, #6]
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 8006da0:	79ba      	ldrb	r2, [r7, #6]
 8006da2:	7b3b      	ldrb	r3, [r7, #12]
 8006da4:	1ad2      	subs	r2, r2, r3
 8006da6:	793b      	ldrb	r3, [r7, #4]
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d105      	bne.n	8006db8 <OLED_ShowChar+0xb8>
			{
				y=y0;
 8006dac:	7b3b      	ldrb	r3, [r7, #12]
 8006dae:	71bb      	strb	r3, [r7, #6]
				x++;
 8006db0:	79fb      	ldrb	r3, [r7, #7]
 8006db2:	3301      	adds	r3, #1
 8006db4:	71fb      	strb	r3, [r7, #7]
				break;
 8006db6:	e005      	b.n	8006dc4 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 8006db8:	7b7b      	ldrb	r3, [r7, #13]
 8006dba:	3301      	adds	r3, #1
 8006dbc:	737b      	strb	r3, [r7, #13]
 8006dbe:	7b7b      	ldrb	r3, [r7, #13]
 8006dc0:	2b07      	cmp	r3, #7
 8006dc2:	d9ce      	bls.n	8006d62 <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 8006dc4:	7bbb      	ldrb	r3, [r7, #14]
 8006dc6:	3301      	adds	r3, #1
 8006dc8:	73bb      	strb	r3, [r7, #14]
 8006dca:	7bba      	ldrb	r2, [r7, #14]
 8006dcc:	793b      	ldrb	r3, [r7, #4]
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d3ad      	bcc.n	8006d2e <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 8006dd2:	bf00      	nop
 8006dd4:	bf00      	nop
 8006dd6:	3714      	adds	r7, #20
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd90      	pop	{r4, r7, pc}
 8006ddc:	080079f0 	.word	0x080079f0
 8006de0:	08007e64 	.word	0x08007e64

08006de4 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b084      	sub	sp, #16
 8006de8:	af02      	add	r7, sp, #8
 8006dea:	4603      	mov	r3, r0
 8006dec:	603a      	str	r2, [r7, #0]
 8006dee:	71fb      	strb	r3, [r7, #7]
 8006df0:	460b      	mov	r3, r1
 8006df2:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 8006df4:	e01f      	b.n	8006e36 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 8006df6:	79fb      	ldrb	r3, [r7, #7]
 8006df8:	2b7a      	cmp	r3, #122	; 0x7a
 8006dfa:	d904      	bls.n	8006e06 <OLED_ShowString+0x22>
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	71fb      	strb	r3, [r7, #7]
 8006e00:	79bb      	ldrb	r3, [r7, #6]
 8006e02:	3310      	adds	r3, #16
 8006e04:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 8006e06:	79bb      	ldrb	r3, [r7, #6]
 8006e08:	2b3a      	cmp	r3, #58	; 0x3a
 8006e0a:	d905      	bls.n	8006e18 <OLED_ShowString+0x34>
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	71fb      	strb	r3, [r7, #7]
 8006e10:	79fb      	ldrb	r3, [r7, #7]
 8006e12:	71bb      	strb	r3, [r7, #6]
 8006e14:	f7ff fef4 	bl	8006c00 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	781a      	ldrb	r2, [r3, #0]
 8006e1c:	79b9      	ldrb	r1, [r7, #6]
 8006e1e:	79f8      	ldrb	r0, [r7, #7]
 8006e20:	2301      	movs	r3, #1
 8006e22:	9300      	str	r3, [sp, #0]
 8006e24:	230c      	movs	r3, #12
 8006e26:	f7ff ff6b 	bl	8006d00 <OLED_ShowChar>
        x+=8;
 8006e2a:	79fb      	ldrb	r3, [r7, #7]
 8006e2c:	3308      	adds	r3, #8
 8006e2e:	71fb      	strb	r3, [r7, #7]
        p++;
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	3301      	adds	r3, #1
 8006e34:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	781b      	ldrb	r3, [r3, #0]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d1db      	bne.n	8006df6 <OLED_ShowString+0x12>
    }  
}	 
 8006e3e:	bf00      	nop
 8006e40:	bf00      	nop
 8006e42:	3708      	adds	r7, #8
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}

08006e48 <OLED_Init>:

void OLED_Init(void)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 8006e4c:	f7fa fcc6 	bl	80017dc <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 8006e50:	4b41      	ldr	r3, [pc, #260]	; (8006f58 <OLED_Init+0x110>)
 8006e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e54:	4a40      	ldr	r2, [pc, #256]	; (8006f58 <OLED_Init+0x110>)
 8006e56:	f023 0301 	bic.w	r3, r3, #1
 8006e5a:	6713      	str	r3, [r2, #112]	; 0x70
 8006e5c:	4b3e      	ldr	r3, [pc, #248]	; (8006f58 <OLED_Init+0x110>)
 8006e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e60:	4a3d      	ldr	r2, [pc, #244]	; (8006f58 <OLED_Init+0x110>)
 8006e62:	f023 0304 	bic.w	r3, r3, #4
 8006e66:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 8006e68:	f7fa fccc 	bl	8001804 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	2180      	movs	r1, #128	; 0x80
 8006e70:	483a      	ldr	r0, [pc, #232]	; (8006f5c <OLED_Init+0x114>)
 8006e72:	f7fa fc7f 	bl	8001774 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8006e76:	2064      	movs	r0, #100	; 0x64
 8006e78:	f7fa f918 	bl	80010ac <HAL_Delay>
	OLED_RST_Set();
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	2180      	movs	r1, #128	; 0x80
 8006e80:	4836      	ldr	r0, [pc, #216]	; (8006f5c <OLED_Init+0x114>)
 8006e82:	f7fa fc77 	bl	8001774 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 8006e86:	2100      	movs	r1, #0
 8006e88:	20ae      	movs	r0, #174	; 0xae
 8006e8a:	f7ff fe6f 	bl	8006b6c <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 8006e8e:	2100      	movs	r1, #0
 8006e90:	20d5      	movs	r0, #213	; 0xd5
 8006e92:	f7ff fe6b 	bl	8006b6c <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 8006e96:	2100      	movs	r1, #0
 8006e98:	2050      	movs	r0, #80	; 0x50
 8006e9a:	f7ff fe67 	bl	8006b6c <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 8006e9e:	2100      	movs	r1, #0
 8006ea0:	20a8      	movs	r0, #168	; 0xa8
 8006ea2:	f7ff fe63 	bl	8006b6c <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 8006ea6:	2100      	movs	r1, #0
 8006ea8:	203f      	movs	r0, #63	; 0x3f
 8006eaa:	f7ff fe5f 	bl	8006b6c <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 8006eae:	2100      	movs	r1, #0
 8006eb0:	20d3      	movs	r0, #211	; 0xd3
 8006eb2:	f7ff fe5b 	bl	8006b6c <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 8006eb6:	2100      	movs	r1, #0
 8006eb8:	2000      	movs	r0, #0
 8006eba:	f7ff fe57 	bl	8006b6c <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 8006ebe:	2100      	movs	r1, #0
 8006ec0:	2040      	movs	r0, #64	; 0x40
 8006ec2:	f7ff fe53 	bl	8006b6c <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 8006ec6:	2100      	movs	r1, #0
 8006ec8:	208d      	movs	r0, #141	; 0x8d
 8006eca:	f7ff fe4f 	bl	8006b6c <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 8006ece:	2100      	movs	r1, #0
 8006ed0:	2014      	movs	r0, #20
 8006ed2:	f7ff fe4b 	bl	8006b6c <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 8006ed6:	2100      	movs	r1, #0
 8006ed8:	2020      	movs	r0, #32
 8006eda:	f7ff fe47 	bl	8006b6c <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 8006ede:	2100      	movs	r1, #0
 8006ee0:	2002      	movs	r0, #2
 8006ee2:	f7ff fe43 	bl	8006b6c <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 8006ee6:	2100      	movs	r1, #0
 8006ee8:	20a1      	movs	r0, #161	; 0xa1
 8006eea:	f7ff fe3f 	bl	8006b6c <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 8006eee:	2100      	movs	r1, #0
 8006ef0:	20c0      	movs	r0, #192	; 0xc0
 8006ef2:	f7ff fe3b 	bl	8006b6c <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 8006ef6:	2100      	movs	r1, #0
 8006ef8:	20da      	movs	r0, #218	; 0xda
 8006efa:	f7ff fe37 	bl	8006b6c <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 8006efe:	2100      	movs	r1, #0
 8006f00:	2012      	movs	r0, #18
 8006f02:	f7ff fe33 	bl	8006b6c <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 8006f06:	2100      	movs	r1, #0
 8006f08:	2081      	movs	r0, #129	; 0x81
 8006f0a:	f7ff fe2f 	bl	8006b6c <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 8006f0e:	2100      	movs	r1, #0
 8006f10:	20ef      	movs	r0, #239	; 0xef
 8006f12:	f7ff fe2b 	bl	8006b6c <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 8006f16:	2100      	movs	r1, #0
 8006f18:	20d9      	movs	r0, #217	; 0xd9
 8006f1a:	f7ff fe27 	bl	8006b6c <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 8006f1e:	2100      	movs	r1, #0
 8006f20:	20f1      	movs	r0, #241	; 0xf1
 8006f22:	f7ff fe23 	bl	8006b6c <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 8006f26:	2100      	movs	r1, #0
 8006f28:	20db      	movs	r0, #219	; 0xdb
 8006f2a:	f7ff fe1f 	bl	8006b6c <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 8006f2e:	2100      	movs	r1, #0
 8006f30:	2030      	movs	r0, #48	; 0x30
 8006f32:	f7ff fe1b 	bl	8006b6c <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 8006f36:	2100      	movs	r1, #0
 8006f38:	20a4      	movs	r0, #164	; 0xa4
 8006f3a:	f7ff fe17 	bl	8006b6c <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 8006f3e:	2100      	movs	r1, #0
 8006f40:	20a6      	movs	r0, #166	; 0xa6
 8006f42:	f7ff fe13 	bl	8006b6c <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 8006f46:	2100      	movs	r1, #0
 8006f48:	20af      	movs	r0, #175	; 0xaf
 8006f4a:	f7ff fe0f 	bl	8006b6c <OLED_WR_Byte>
	OLED_Clear(); 
 8006f4e:	f7ff fe57 	bl	8006c00 <OLED_Clear>
 8006f52:	bf00      	nop
 8006f54:	bd80      	pop	{r7, pc}
 8006f56:	bf00      	nop
 8006f58:	40023800 	.word	0x40023800
 8006f5c:	40021000 	.word	0x40021000

08006f60 <__errno>:
 8006f60:	4b01      	ldr	r3, [pc, #4]	; (8006f68 <__errno+0x8>)
 8006f62:	6818      	ldr	r0, [r3, #0]
 8006f64:	4770      	bx	lr
 8006f66:	bf00      	nop
 8006f68:	20000010 	.word	0x20000010

08006f6c <__libc_init_array>:
 8006f6c:	b570      	push	{r4, r5, r6, lr}
 8006f6e:	4d0d      	ldr	r5, [pc, #52]	; (8006fa4 <__libc_init_array+0x38>)
 8006f70:	4c0d      	ldr	r4, [pc, #52]	; (8006fa8 <__libc_init_array+0x3c>)
 8006f72:	1b64      	subs	r4, r4, r5
 8006f74:	10a4      	asrs	r4, r4, #2
 8006f76:	2600      	movs	r6, #0
 8006f78:	42a6      	cmp	r6, r4
 8006f7a:	d109      	bne.n	8006f90 <__libc_init_array+0x24>
 8006f7c:	4d0b      	ldr	r5, [pc, #44]	; (8006fac <__libc_init_array+0x40>)
 8006f7e:	4c0c      	ldr	r4, [pc, #48]	; (8006fb0 <__libc_init_array+0x44>)
 8006f80:	f000 fc8e 	bl	80078a0 <_init>
 8006f84:	1b64      	subs	r4, r4, r5
 8006f86:	10a4      	asrs	r4, r4, #2
 8006f88:	2600      	movs	r6, #0
 8006f8a:	42a6      	cmp	r6, r4
 8006f8c:	d105      	bne.n	8006f9a <__libc_init_array+0x2e>
 8006f8e:	bd70      	pop	{r4, r5, r6, pc}
 8006f90:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f94:	4798      	blx	r3
 8006f96:	3601      	adds	r6, #1
 8006f98:	e7ee      	b.n	8006f78 <__libc_init_array+0xc>
 8006f9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f9e:	4798      	blx	r3
 8006fa0:	3601      	adds	r6, #1
 8006fa2:	e7f2      	b.n	8006f8a <__libc_init_array+0x1e>
 8006fa4:	08008490 	.word	0x08008490
 8006fa8:	08008490 	.word	0x08008490
 8006fac:	08008490 	.word	0x08008490
 8006fb0:	08008494 	.word	0x08008494

08006fb4 <memcpy>:
 8006fb4:	440a      	add	r2, r1
 8006fb6:	4291      	cmp	r1, r2
 8006fb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8006fbc:	d100      	bne.n	8006fc0 <memcpy+0xc>
 8006fbe:	4770      	bx	lr
 8006fc0:	b510      	push	{r4, lr}
 8006fc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006fca:	4291      	cmp	r1, r2
 8006fcc:	d1f9      	bne.n	8006fc2 <memcpy+0xe>
 8006fce:	bd10      	pop	{r4, pc}

08006fd0 <memset>:
 8006fd0:	4402      	add	r2, r0
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d100      	bne.n	8006fda <memset+0xa>
 8006fd8:	4770      	bx	lr
 8006fda:	f803 1b01 	strb.w	r1, [r3], #1
 8006fde:	e7f9      	b.n	8006fd4 <memset+0x4>

08006fe0 <siprintf>:
 8006fe0:	b40e      	push	{r1, r2, r3}
 8006fe2:	b500      	push	{lr}
 8006fe4:	b09c      	sub	sp, #112	; 0x70
 8006fe6:	ab1d      	add	r3, sp, #116	; 0x74
 8006fe8:	9002      	str	r0, [sp, #8]
 8006fea:	9006      	str	r0, [sp, #24]
 8006fec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006ff0:	4809      	ldr	r0, [pc, #36]	; (8007018 <siprintf+0x38>)
 8006ff2:	9107      	str	r1, [sp, #28]
 8006ff4:	9104      	str	r1, [sp, #16]
 8006ff6:	4909      	ldr	r1, [pc, #36]	; (800701c <siprintf+0x3c>)
 8006ff8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ffc:	9105      	str	r1, [sp, #20]
 8006ffe:	6800      	ldr	r0, [r0, #0]
 8007000:	9301      	str	r3, [sp, #4]
 8007002:	a902      	add	r1, sp, #8
 8007004:	f000 f868 	bl	80070d8 <_svfiprintf_r>
 8007008:	9b02      	ldr	r3, [sp, #8]
 800700a:	2200      	movs	r2, #0
 800700c:	701a      	strb	r2, [r3, #0]
 800700e:	b01c      	add	sp, #112	; 0x70
 8007010:	f85d eb04 	ldr.w	lr, [sp], #4
 8007014:	b003      	add	sp, #12
 8007016:	4770      	bx	lr
 8007018:	20000010 	.word	0x20000010
 800701c:	ffff0208 	.word	0xffff0208

08007020 <__ssputs_r>:
 8007020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007024:	688e      	ldr	r6, [r1, #8]
 8007026:	429e      	cmp	r6, r3
 8007028:	4682      	mov	sl, r0
 800702a:	460c      	mov	r4, r1
 800702c:	4690      	mov	r8, r2
 800702e:	461f      	mov	r7, r3
 8007030:	d838      	bhi.n	80070a4 <__ssputs_r+0x84>
 8007032:	898a      	ldrh	r2, [r1, #12]
 8007034:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007038:	d032      	beq.n	80070a0 <__ssputs_r+0x80>
 800703a:	6825      	ldr	r5, [r4, #0]
 800703c:	6909      	ldr	r1, [r1, #16]
 800703e:	eba5 0901 	sub.w	r9, r5, r1
 8007042:	6965      	ldr	r5, [r4, #20]
 8007044:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007048:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800704c:	3301      	adds	r3, #1
 800704e:	444b      	add	r3, r9
 8007050:	106d      	asrs	r5, r5, #1
 8007052:	429d      	cmp	r5, r3
 8007054:	bf38      	it	cc
 8007056:	461d      	movcc	r5, r3
 8007058:	0553      	lsls	r3, r2, #21
 800705a:	d531      	bpl.n	80070c0 <__ssputs_r+0xa0>
 800705c:	4629      	mov	r1, r5
 800705e:	f000 fb55 	bl	800770c <_malloc_r>
 8007062:	4606      	mov	r6, r0
 8007064:	b950      	cbnz	r0, 800707c <__ssputs_r+0x5c>
 8007066:	230c      	movs	r3, #12
 8007068:	f8ca 3000 	str.w	r3, [sl]
 800706c:	89a3      	ldrh	r3, [r4, #12]
 800706e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007072:	81a3      	strh	r3, [r4, #12]
 8007074:	f04f 30ff 	mov.w	r0, #4294967295
 8007078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800707c:	6921      	ldr	r1, [r4, #16]
 800707e:	464a      	mov	r2, r9
 8007080:	f7ff ff98 	bl	8006fb4 <memcpy>
 8007084:	89a3      	ldrh	r3, [r4, #12]
 8007086:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800708a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800708e:	81a3      	strh	r3, [r4, #12]
 8007090:	6126      	str	r6, [r4, #16]
 8007092:	6165      	str	r5, [r4, #20]
 8007094:	444e      	add	r6, r9
 8007096:	eba5 0509 	sub.w	r5, r5, r9
 800709a:	6026      	str	r6, [r4, #0]
 800709c:	60a5      	str	r5, [r4, #8]
 800709e:	463e      	mov	r6, r7
 80070a0:	42be      	cmp	r6, r7
 80070a2:	d900      	bls.n	80070a6 <__ssputs_r+0x86>
 80070a4:	463e      	mov	r6, r7
 80070a6:	6820      	ldr	r0, [r4, #0]
 80070a8:	4632      	mov	r2, r6
 80070aa:	4641      	mov	r1, r8
 80070ac:	f000 faa8 	bl	8007600 <memmove>
 80070b0:	68a3      	ldr	r3, [r4, #8]
 80070b2:	1b9b      	subs	r3, r3, r6
 80070b4:	60a3      	str	r3, [r4, #8]
 80070b6:	6823      	ldr	r3, [r4, #0]
 80070b8:	4433      	add	r3, r6
 80070ba:	6023      	str	r3, [r4, #0]
 80070bc:	2000      	movs	r0, #0
 80070be:	e7db      	b.n	8007078 <__ssputs_r+0x58>
 80070c0:	462a      	mov	r2, r5
 80070c2:	f000 fb97 	bl	80077f4 <_realloc_r>
 80070c6:	4606      	mov	r6, r0
 80070c8:	2800      	cmp	r0, #0
 80070ca:	d1e1      	bne.n	8007090 <__ssputs_r+0x70>
 80070cc:	6921      	ldr	r1, [r4, #16]
 80070ce:	4650      	mov	r0, sl
 80070d0:	f000 fab0 	bl	8007634 <_free_r>
 80070d4:	e7c7      	b.n	8007066 <__ssputs_r+0x46>
	...

080070d8 <_svfiprintf_r>:
 80070d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070dc:	4698      	mov	r8, r3
 80070de:	898b      	ldrh	r3, [r1, #12]
 80070e0:	061b      	lsls	r3, r3, #24
 80070e2:	b09d      	sub	sp, #116	; 0x74
 80070e4:	4607      	mov	r7, r0
 80070e6:	460d      	mov	r5, r1
 80070e8:	4614      	mov	r4, r2
 80070ea:	d50e      	bpl.n	800710a <_svfiprintf_r+0x32>
 80070ec:	690b      	ldr	r3, [r1, #16]
 80070ee:	b963      	cbnz	r3, 800710a <_svfiprintf_r+0x32>
 80070f0:	2140      	movs	r1, #64	; 0x40
 80070f2:	f000 fb0b 	bl	800770c <_malloc_r>
 80070f6:	6028      	str	r0, [r5, #0]
 80070f8:	6128      	str	r0, [r5, #16]
 80070fa:	b920      	cbnz	r0, 8007106 <_svfiprintf_r+0x2e>
 80070fc:	230c      	movs	r3, #12
 80070fe:	603b      	str	r3, [r7, #0]
 8007100:	f04f 30ff 	mov.w	r0, #4294967295
 8007104:	e0d1      	b.n	80072aa <_svfiprintf_r+0x1d2>
 8007106:	2340      	movs	r3, #64	; 0x40
 8007108:	616b      	str	r3, [r5, #20]
 800710a:	2300      	movs	r3, #0
 800710c:	9309      	str	r3, [sp, #36]	; 0x24
 800710e:	2320      	movs	r3, #32
 8007110:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007114:	f8cd 800c 	str.w	r8, [sp, #12]
 8007118:	2330      	movs	r3, #48	; 0x30
 800711a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80072c4 <_svfiprintf_r+0x1ec>
 800711e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007122:	f04f 0901 	mov.w	r9, #1
 8007126:	4623      	mov	r3, r4
 8007128:	469a      	mov	sl, r3
 800712a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800712e:	b10a      	cbz	r2, 8007134 <_svfiprintf_r+0x5c>
 8007130:	2a25      	cmp	r2, #37	; 0x25
 8007132:	d1f9      	bne.n	8007128 <_svfiprintf_r+0x50>
 8007134:	ebba 0b04 	subs.w	fp, sl, r4
 8007138:	d00b      	beq.n	8007152 <_svfiprintf_r+0x7a>
 800713a:	465b      	mov	r3, fp
 800713c:	4622      	mov	r2, r4
 800713e:	4629      	mov	r1, r5
 8007140:	4638      	mov	r0, r7
 8007142:	f7ff ff6d 	bl	8007020 <__ssputs_r>
 8007146:	3001      	adds	r0, #1
 8007148:	f000 80aa 	beq.w	80072a0 <_svfiprintf_r+0x1c8>
 800714c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800714e:	445a      	add	r2, fp
 8007150:	9209      	str	r2, [sp, #36]	; 0x24
 8007152:	f89a 3000 	ldrb.w	r3, [sl]
 8007156:	2b00      	cmp	r3, #0
 8007158:	f000 80a2 	beq.w	80072a0 <_svfiprintf_r+0x1c8>
 800715c:	2300      	movs	r3, #0
 800715e:	f04f 32ff 	mov.w	r2, #4294967295
 8007162:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007166:	f10a 0a01 	add.w	sl, sl, #1
 800716a:	9304      	str	r3, [sp, #16]
 800716c:	9307      	str	r3, [sp, #28]
 800716e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007172:	931a      	str	r3, [sp, #104]	; 0x68
 8007174:	4654      	mov	r4, sl
 8007176:	2205      	movs	r2, #5
 8007178:	f814 1b01 	ldrb.w	r1, [r4], #1
 800717c:	4851      	ldr	r0, [pc, #324]	; (80072c4 <_svfiprintf_r+0x1ec>)
 800717e:	f7f9 f827 	bl	80001d0 <memchr>
 8007182:	9a04      	ldr	r2, [sp, #16]
 8007184:	b9d8      	cbnz	r0, 80071be <_svfiprintf_r+0xe6>
 8007186:	06d0      	lsls	r0, r2, #27
 8007188:	bf44      	itt	mi
 800718a:	2320      	movmi	r3, #32
 800718c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007190:	0711      	lsls	r1, r2, #28
 8007192:	bf44      	itt	mi
 8007194:	232b      	movmi	r3, #43	; 0x2b
 8007196:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800719a:	f89a 3000 	ldrb.w	r3, [sl]
 800719e:	2b2a      	cmp	r3, #42	; 0x2a
 80071a0:	d015      	beq.n	80071ce <_svfiprintf_r+0xf6>
 80071a2:	9a07      	ldr	r2, [sp, #28]
 80071a4:	4654      	mov	r4, sl
 80071a6:	2000      	movs	r0, #0
 80071a8:	f04f 0c0a 	mov.w	ip, #10
 80071ac:	4621      	mov	r1, r4
 80071ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80071b2:	3b30      	subs	r3, #48	; 0x30
 80071b4:	2b09      	cmp	r3, #9
 80071b6:	d94e      	bls.n	8007256 <_svfiprintf_r+0x17e>
 80071b8:	b1b0      	cbz	r0, 80071e8 <_svfiprintf_r+0x110>
 80071ba:	9207      	str	r2, [sp, #28]
 80071bc:	e014      	b.n	80071e8 <_svfiprintf_r+0x110>
 80071be:	eba0 0308 	sub.w	r3, r0, r8
 80071c2:	fa09 f303 	lsl.w	r3, r9, r3
 80071c6:	4313      	orrs	r3, r2
 80071c8:	9304      	str	r3, [sp, #16]
 80071ca:	46a2      	mov	sl, r4
 80071cc:	e7d2      	b.n	8007174 <_svfiprintf_r+0x9c>
 80071ce:	9b03      	ldr	r3, [sp, #12]
 80071d0:	1d19      	adds	r1, r3, #4
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	9103      	str	r1, [sp, #12]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	bfbb      	ittet	lt
 80071da:	425b      	neglt	r3, r3
 80071dc:	f042 0202 	orrlt.w	r2, r2, #2
 80071e0:	9307      	strge	r3, [sp, #28]
 80071e2:	9307      	strlt	r3, [sp, #28]
 80071e4:	bfb8      	it	lt
 80071e6:	9204      	strlt	r2, [sp, #16]
 80071e8:	7823      	ldrb	r3, [r4, #0]
 80071ea:	2b2e      	cmp	r3, #46	; 0x2e
 80071ec:	d10c      	bne.n	8007208 <_svfiprintf_r+0x130>
 80071ee:	7863      	ldrb	r3, [r4, #1]
 80071f0:	2b2a      	cmp	r3, #42	; 0x2a
 80071f2:	d135      	bne.n	8007260 <_svfiprintf_r+0x188>
 80071f4:	9b03      	ldr	r3, [sp, #12]
 80071f6:	1d1a      	adds	r2, r3, #4
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	9203      	str	r2, [sp, #12]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	bfb8      	it	lt
 8007200:	f04f 33ff 	movlt.w	r3, #4294967295
 8007204:	3402      	adds	r4, #2
 8007206:	9305      	str	r3, [sp, #20]
 8007208:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80072d4 <_svfiprintf_r+0x1fc>
 800720c:	7821      	ldrb	r1, [r4, #0]
 800720e:	2203      	movs	r2, #3
 8007210:	4650      	mov	r0, sl
 8007212:	f7f8 ffdd 	bl	80001d0 <memchr>
 8007216:	b140      	cbz	r0, 800722a <_svfiprintf_r+0x152>
 8007218:	2340      	movs	r3, #64	; 0x40
 800721a:	eba0 000a 	sub.w	r0, r0, sl
 800721e:	fa03 f000 	lsl.w	r0, r3, r0
 8007222:	9b04      	ldr	r3, [sp, #16]
 8007224:	4303      	orrs	r3, r0
 8007226:	3401      	adds	r4, #1
 8007228:	9304      	str	r3, [sp, #16]
 800722a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800722e:	4826      	ldr	r0, [pc, #152]	; (80072c8 <_svfiprintf_r+0x1f0>)
 8007230:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007234:	2206      	movs	r2, #6
 8007236:	f7f8 ffcb 	bl	80001d0 <memchr>
 800723a:	2800      	cmp	r0, #0
 800723c:	d038      	beq.n	80072b0 <_svfiprintf_r+0x1d8>
 800723e:	4b23      	ldr	r3, [pc, #140]	; (80072cc <_svfiprintf_r+0x1f4>)
 8007240:	bb1b      	cbnz	r3, 800728a <_svfiprintf_r+0x1b2>
 8007242:	9b03      	ldr	r3, [sp, #12]
 8007244:	3307      	adds	r3, #7
 8007246:	f023 0307 	bic.w	r3, r3, #7
 800724a:	3308      	adds	r3, #8
 800724c:	9303      	str	r3, [sp, #12]
 800724e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007250:	4433      	add	r3, r6
 8007252:	9309      	str	r3, [sp, #36]	; 0x24
 8007254:	e767      	b.n	8007126 <_svfiprintf_r+0x4e>
 8007256:	fb0c 3202 	mla	r2, ip, r2, r3
 800725a:	460c      	mov	r4, r1
 800725c:	2001      	movs	r0, #1
 800725e:	e7a5      	b.n	80071ac <_svfiprintf_r+0xd4>
 8007260:	2300      	movs	r3, #0
 8007262:	3401      	adds	r4, #1
 8007264:	9305      	str	r3, [sp, #20]
 8007266:	4619      	mov	r1, r3
 8007268:	f04f 0c0a 	mov.w	ip, #10
 800726c:	4620      	mov	r0, r4
 800726e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007272:	3a30      	subs	r2, #48	; 0x30
 8007274:	2a09      	cmp	r2, #9
 8007276:	d903      	bls.n	8007280 <_svfiprintf_r+0x1a8>
 8007278:	2b00      	cmp	r3, #0
 800727a:	d0c5      	beq.n	8007208 <_svfiprintf_r+0x130>
 800727c:	9105      	str	r1, [sp, #20]
 800727e:	e7c3      	b.n	8007208 <_svfiprintf_r+0x130>
 8007280:	fb0c 2101 	mla	r1, ip, r1, r2
 8007284:	4604      	mov	r4, r0
 8007286:	2301      	movs	r3, #1
 8007288:	e7f0      	b.n	800726c <_svfiprintf_r+0x194>
 800728a:	ab03      	add	r3, sp, #12
 800728c:	9300      	str	r3, [sp, #0]
 800728e:	462a      	mov	r2, r5
 8007290:	4b0f      	ldr	r3, [pc, #60]	; (80072d0 <_svfiprintf_r+0x1f8>)
 8007292:	a904      	add	r1, sp, #16
 8007294:	4638      	mov	r0, r7
 8007296:	f3af 8000 	nop.w
 800729a:	1c42      	adds	r2, r0, #1
 800729c:	4606      	mov	r6, r0
 800729e:	d1d6      	bne.n	800724e <_svfiprintf_r+0x176>
 80072a0:	89ab      	ldrh	r3, [r5, #12]
 80072a2:	065b      	lsls	r3, r3, #25
 80072a4:	f53f af2c 	bmi.w	8007100 <_svfiprintf_r+0x28>
 80072a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80072aa:	b01d      	add	sp, #116	; 0x74
 80072ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072b0:	ab03      	add	r3, sp, #12
 80072b2:	9300      	str	r3, [sp, #0]
 80072b4:	462a      	mov	r2, r5
 80072b6:	4b06      	ldr	r3, [pc, #24]	; (80072d0 <_svfiprintf_r+0x1f8>)
 80072b8:	a904      	add	r1, sp, #16
 80072ba:	4638      	mov	r0, r7
 80072bc:	f000 f87a 	bl	80073b4 <_printf_i>
 80072c0:	e7eb      	b.n	800729a <_svfiprintf_r+0x1c2>
 80072c2:	bf00      	nop
 80072c4:	08008454 	.word	0x08008454
 80072c8:	0800845e 	.word	0x0800845e
 80072cc:	00000000 	.word	0x00000000
 80072d0:	08007021 	.word	0x08007021
 80072d4:	0800845a 	.word	0x0800845a

080072d8 <_printf_common>:
 80072d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072dc:	4616      	mov	r6, r2
 80072de:	4699      	mov	r9, r3
 80072e0:	688a      	ldr	r2, [r1, #8]
 80072e2:	690b      	ldr	r3, [r1, #16]
 80072e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80072e8:	4293      	cmp	r3, r2
 80072ea:	bfb8      	it	lt
 80072ec:	4613      	movlt	r3, r2
 80072ee:	6033      	str	r3, [r6, #0]
 80072f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80072f4:	4607      	mov	r7, r0
 80072f6:	460c      	mov	r4, r1
 80072f8:	b10a      	cbz	r2, 80072fe <_printf_common+0x26>
 80072fa:	3301      	adds	r3, #1
 80072fc:	6033      	str	r3, [r6, #0]
 80072fe:	6823      	ldr	r3, [r4, #0]
 8007300:	0699      	lsls	r1, r3, #26
 8007302:	bf42      	ittt	mi
 8007304:	6833      	ldrmi	r3, [r6, #0]
 8007306:	3302      	addmi	r3, #2
 8007308:	6033      	strmi	r3, [r6, #0]
 800730a:	6825      	ldr	r5, [r4, #0]
 800730c:	f015 0506 	ands.w	r5, r5, #6
 8007310:	d106      	bne.n	8007320 <_printf_common+0x48>
 8007312:	f104 0a19 	add.w	sl, r4, #25
 8007316:	68e3      	ldr	r3, [r4, #12]
 8007318:	6832      	ldr	r2, [r6, #0]
 800731a:	1a9b      	subs	r3, r3, r2
 800731c:	42ab      	cmp	r3, r5
 800731e:	dc26      	bgt.n	800736e <_printf_common+0x96>
 8007320:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007324:	1e13      	subs	r3, r2, #0
 8007326:	6822      	ldr	r2, [r4, #0]
 8007328:	bf18      	it	ne
 800732a:	2301      	movne	r3, #1
 800732c:	0692      	lsls	r2, r2, #26
 800732e:	d42b      	bmi.n	8007388 <_printf_common+0xb0>
 8007330:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007334:	4649      	mov	r1, r9
 8007336:	4638      	mov	r0, r7
 8007338:	47c0      	blx	r8
 800733a:	3001      	adds	r0, #1
 800733c:	d01e      	beq.n	800737c <_printf_common+0xa4>
 800733e:	6823      	ldr	r3, [r4, #0]
 8007340:	68e5      	ldr	r5, [r4, #12]
 8007342:	6832      	ldr	r2, [r6, #0]
 8007344:	f003 0306 	and.w	r3, r3, #6
 8007348:	2b04      	cmp	r3, #4
 800734a:	bf08      	it	eq
 800734c:	1aad      	subeq	r5, r5, r2
 800734e:	68a3      	ldr	r3, [r4, #8]
 8007350:	6922      	ldr	r2, [r4, #16]
 8007352:	bf0c      	ite	eq
 8007354:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007358:	2500      	movne	r5, #0
 800735a:	4293      	cmp	r3, r2
 800735c:	bfc4      	itt	gt
 800735e:	1a9b      	subgt	r3, r3, r2
 8007360:	18ed      	addgt	r5, r5, r3
 8007362:	2600      	movs	r6, #0
 8007364:	341a      	adds	r4, #26
 8007366:	42b5      	cmp	r5, r6
 8007368:	d11a      	bne.n	80073a0 <_printf_common+0xc8>
 800736a:	2000      	movs	r0, #0
 800736c:	e008      	b.n	8007380 <_printf_common+0xa8>
 800736e:	2301      	movs	r3, #1
 8007370:	4652      	mov	r2, sl
 8007372:	4649      	mov	r1, r9
 8007374:	4638      	mov	r0, r7
 8007376:	47c0      	blx	r8
 8007378:	3001      	adds	r0, #1
 800737a:	d103      	bne.n	8007384 <_printf_common+0xac>
 800737c:	f04f 30ff 	mov.w	r0, #4294967295
 8007380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007384:	3501      	adds	r5, #1
 8007386:	e7c6      	b.n	8007316 <_printf_common+0x3e>
 8007388:	18e1      	adds	r1, r4, r3
 800738a:	1c5a      	adds	r2, r3, #1
 800738c:	2030      	movs	r0, #48	; 0x30
 800738e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007392:	4422      	add	r2, r4
 8007394:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007398:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800739c:	3302      	adds	r3, #2
 800739e:	e7c7      	b.n	8007330 <_printf_common+0x58>
 80073a0:	2301      	movs	r3, #1
 80073a2:	4622      	mov	r2, r4
 80073a4:	4649      	mov	r1, r9
 80073a6:	4638      	mov	r0, r7
 80073a8:	47c0      	blx	r8
 80073aa:	3001      	adds	r0, #1
 80073ac:	d0e6      	beq.n	800737c <_printf_common+0xa4>
 80073ae:	3601      	adds	r6, #1
 80073b0:	e7d9      	b.n	8007366 <_printf_common+0x8e>
	...

080073b4 <_printf_i>:
 80073b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073b8:	7e0f      	ldrb	r7, [r1, #24]
 80073ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80073bc:	2f78      	cmp	r7, #120	; 0x78
 80073be:	4691      	mov	r9, r2
 80073c0:	4680      	mov	r8, r0
 80073c2:	460c      	mov	r4, r1
 80073c4:	469a      	mov	sl, r3
 80073c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80073ca:	d807      	bhi.n	80073dc <_printf_i+0x28>
 80073cc:	2f62      	cmp	r7, #98	; 0x62
 80073ce:	d80a      	bhi.n	80073e6 <_printf_i+0x32>
 80073d0:	2f00      	cmp	r7, #0
 80073d2:	f000 80d8 	beq.w	8007586 <_printf_i+0x1d2>
 80073d6:	2f58      	cmp	r7, #88	; 0x58
 80073d8:	f000 80a3 	beq.w	8007522 <_printf_i+0x16e>
 80073dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80073e4:	e03a      	b.n	800745c <_printf_i+0xa8>
 80073e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80073ea:	2b15      	cmp	r3, #21
 80073ec:	d8f6      	bhi.n	80073dc <_printf_i+0x28>
 80073ee:	a101      	add	r1, pc, #4	; (adr r1, 80073f4 <_printf_i+0x40>)
 80073f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80073f4:	0800744d 	.word	0x0800744d
 80073f8:	08007461 	.word	0x08007461
 80073fc:	080073dd 	.word	0x080073dd
 8007400:	080073dd 	.word	0x080073dd
 8007404:	080073dd 	.word	0x080073dd
 8007408:	080073dd 	.word	0x080073dd
 800740c:	08007461 	.word	0x08007461
 8007410:	080073dd 	.word	0x080073dd
 8007414:	080073dd 	.word	0x080073dd
 8007418:	080073dd 	.word	0x080073dd
 800741c:	080073dd 	.word	0x080073dd
 8007420:	0800756d 	.word	0x0800756d
 8007424:	08007491 	.word	0x08007491
 8007428:	0800754f 	.word	0x0800754f
 800742c:	080073dd 	.word	0x080073dd
 8007430:	080073dd 	.word	0x080073dd
 8007434:	0800758f 	.word	0x0800758f
 8007438:	080073dd 	.word	0x080073dd
 800743c:	08007491 	.word	0x08007491
 8007440:	080073dd 	.word	0x080073dd
 8007444:	080073dd 	.word	0x080073dd
 8007448:	08007557 	.word	0x08007557
 800744c:	682b      	ldr	r3, [r5, #0]
 800744e:	1d1a      	adds	r2, r3, #4
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	602a      	str	r2, [r5, #0]
 8007454:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007458:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800745c:	2301      	movs	r3, #1
 800745e:	e0a3      	b.n	80075a8 <_printf_i+0x1f4>
 8007460:	6820      	ldr	r0, [r4, #0]
 8007462:	6829      	ldr	r1, [r5, #0]
 8007464:	0606      	lsls	r6, r0, #24
 8007466:	f101 0304 	add.w	r3, r1, #4
 800746a:	d50a      	bpl.n	8007482 <_printf_i+0xce>
 800746c:	680e      	ldr	r6, [r1, #0]
 800746e:	602b      	str	r3, [r5, #0]
 8007470:	2e00      	cmp	r6, #0
 8007472:	da03      	bge.n	800747c <_printf_i+0xc8>
 8007474:	232d      	movs	r3, #45	; 0x2d
 8007476:	4276      	negs	r6, r6
 8007478:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800747c:	485e      	ldr	r0, [pc, #376]	; (80075f8 <_printf_i+0x244>)
 800747e:	230a      	movs	r3, #10
 8007480:	e019      	b.n	80074b6 <_printf_i+0x102>
 8007482:	680e      	ldr	r6, [r1, #0]
 8007484:	602b      	str	r3, [r5, #0]
 8007486:	f010 0f40 	tst.w	r0, #64	; 0x40
 800748a:	bf18      	it	ne
 800748c:	b236      	sxthne	r6, r6
 800748e:	e7ef      	b.n	8007470 <_printf_i+0xbc>
 8007490:	682b      	ldr	r3, [r5, #0]
 8007492:	6820      	ldr	r0, [r4, #0]
 8007494:	1d19      	adds	r1, r3, #4
 8007496:	6029      	str	r1, [r5, #0]
 8007498:	0601      	lsls	r1, r0, #24
 800749a:	d501      	bpl.n	80074a0 <_printf_i+0xec>
 800749c:	681e      	ldr	r6, [r3, #0]
 800749e:	e002      	b.n	80074a6 <_printf_i+0xf2>
 80074a0:	0646      	lsls	r6, r0, #25
 80074a2:	d5fb      	bpl.n	800749c <_printf_i+0xe8>
 80074a4:	881e      	ldrh	r6, [r3, #0]
 80074a6:	4854      	ldr	r0, [pc, #336]	; (80075f8 <_printf_i+0x244>)
 80074a8:	2f6f      	cmp	r7, #111	; 0x6f
 80074aa:	bf0c      	ite	eq
 80074ac:	2308      	moveq	r3, #8
 80074ae:	230a      	movne	r3, #10
 80074b0:	2100      	movs	r1, #0
 80074b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80074b6:	6865      	ldr	r5, [r4, #4]
 80074b8:	60a5      	str	r5, [r4, #8]
 80074ba:	2d00      	cmp	r5, #0
 80074bc:	bfa2      	ittt	ge
 80074be:	6821      	ldrge	r1, [r4, #0]
 80074c0:	f021 0104 	bicge.w	r1, r1, #4
 80074c4:	6021      	strge	r1, [r4, #0]
 80074c6:	b90e      	cbnz	r6, 80074cc <_printf_i+0x118>
 80074c8:	2d00      	cmp	r5, #0
 80074ca:	d04d      	beq.n	8007568 <_printf_i+0x1b4>
 80074cc:	4615      	mov	r5, r2
 80074ce:	fbb6 f1f3 	udiv	r1, r6, r3
 80074d2:	fb03 6711 	mls	r7, r3, r1, r6
 80074d6:	5dc7      	ldrb	r7, [r0, r7]
 80074d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80074dc:	4637      	mov	r7, r6
 80074de:	42bb      	cmp	r3, r7
 80074e0:	460e      	mov	r6, r1
 80074e2:	d9f4      	bls.n	80074ce <_printf_i+0x11a>
 80074e4:	2b08      	cmp	r3, #8
 80074e6:	d10b      	bne.n	8007500 <_printf_i+0x14c>
 80074e8:	6823      	ldr	r3, [r4, #0]
 80074ea:	07de      	lsls	r6, r3, #31
 80074ec:	d508      	bpl.n	8007500 <_printf_i+0x14c>
 80074ee:	6923      	ldr	r3, [r4, #16]
 80074f0:	6861      	ldr	r1, [r4, #4]
 80074f2:	4299      	cmp	r1, r3
 80074f4:	bfde      	ittt	le
 80074f6:	2330      	movle	r3, #48	; 0x30
 80074f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80074fc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007500:	1b52      	subs	r2, r2, r5
 8007502:	6122      	str	r2, [r4, #16]
 8007504:	f8cd a000 	str.w	sl, [sp]
 8007508:	464b      	mov	r3, r9
 800750a:	aa03      	add	r2, sp, #12
 800750c:	4621      	mov	r1, r4
 800750e:	4640      	mov	r0, r8
 8007510:	f7ff fee2 	bl	80072d8 <_printf_common>
 8007514:	3001      	adds	r0, #1
 8007516:	d14c      	bne.n	80075b2 <_printf_i+0x1fe>
 8007518:	f04f 30ff 	mov.w	r0, #4294967295
 800751c:	b004      	add	sp, #16
 800751e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007522:	4835      	ldr	r0, [pc, #212]	; (80075f8 <_printf_i+0x244>)
 8007524:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007528:	6829      	ldr	r1, [r5, #0]
 800752a:	6823      	ldr	r3, [r4, #0]
 800752c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007530:	6029      	str	r1, [r5, #0]
 8007532:	061d      	lsls	r5, r3, #24
 8007534:	d514      	bpl.n	8007560 <_printf_i+0x1ac>
 8007536:	07df      	lsls	r7, r3, #31
 8007538:	bf44      	itt	mi
 800753a:	f043 0320 	orrmi.w	r3, r3, #32
 800753e:	6023      	strmi	r3, [r4, #0]
 8007540:	b91e      	cbnz	r6, 800754a <_printf_i+0x196>
 8007542:	6823      	ldr	r3, [r4, #0]
 8007544:	f023 0320 	bic.w	r3, r3, #32
 8007548:	6023      	str	r3, [r4, #0]
 800754a:	2310      	movs	r3, #16
 800754c:	e7b0      	b.n	80074b0 <_printf_i+0xfc>
 800754e:	6823      	ldr	r3, [r4, #0]
 8007550:	f043 0320 	orr.w	r3, r3, #32
 8007554:	6023      	str	r3, [r4, #0]
 8007556:	2378      	movs	r3, #120	; 0x78
 8007558:	4828      	ldr	r0, [pc, #160]	; (80075fc <_printf_i+0x248>)
 800755a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800755e:	e7e3      	b.n	8007528 <_printf_i+0x174>
 8007560:	0659      	lsls	r1, r3, #25
 8007562:	bf48      	it	mi
 8007564:	b2b6      	uxthmi	r6, r6
 8007566:	e7e6      	b.n	8007536 <_printf_i+0x182>
 8007568:	4615      	mov	r5, r2
 800756a:	e7bb      	b.n	80074e4 <_printf_i+0x130>
 800756c:	682b      	ldr	r3, [r5, #0]
 800756e:	6826      	ldr	r6, [r4, #0]
 8007570:	6961      	ldr	r1, [r4, #20]
 8007572:	1d18      	adds	r0, r3, #4
 8007574:	6028      	str	r0, [r5, #0]
 8007576:	0635      	lsls	r5, r6, #24
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	d501      	bpl.n	8007580 <_printf_i+0x1cc>
 800757c:	6019      	str	r1, [r3, #0]
 800757e:	e002      	b.n	8007586 <_printf_i+0x1d2>
 8007580:	0670      	lsls	r0, r6, #25
 8007582:	d5fb      	bpl.n	800757c <_printf_i+0x1c8>
 8007584:	8019      	strh	r1, [r3, #0]
 8007586:	2300      	movs	r3, #0
 8007588:	6123      	str	r3, [r4, #16]
 800758a:	4615      	mov	r5, r2
 800758c:	e7ba      	b.n	8007504 <_printf_i+0x150>
 800758e:	682b      	ldr	r3, [r5, #0]
 8007590:	1d1a      	adds	r2, r3, #4
 8007592:	602a      	str	r2, [r5, #0]
 8007594:	681d      	ldr	r5, [r3, #0]
 8007596:	6862      	ldr	r2, [r4, #4]
 8007598:	2100      	movs	r1, #0
 800759a:	4628      	mov	r0, r5
 800759c:	f7f8 fe18 	bl	80001d0 <memchr>
 80075a0:	b108      	cbz	r0, 80075a6 <_printf_i+0x1f2>
 80075a2:	1b40      	subs	r0, r0, r5
 80075a4:	6060      	str	r0, [r4, #4]
 80075a6:	6863      	ldr	r3, [r4, #4]
 80075a8:	6123      	str	r3, [r4, #16]
 80075aa:	2300      	movs	r3, #0
 80075ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075b0:	e7a8      	b.n	8007504 <_printf_i+0x150>
 80075b2:	6923      	ldr	r3, [r4, #16]
 80075b4:	462a      	mov	r2, r5
 80075b6:	4649      	mov	r1, r9
 80075b8:	4640      	mov	r0, r8
 80075ba:	47d0      	blx	sl
 80075bc:	3001      	adds	r0, #1
 80075be:	d0ab      	beq.n	8007518 <_printf_i+0x164>
 80075c0:	6823      	ldr	r3, [r4, #0]
 80075c2:	079b      	lsls	r3, r3, #30
 80075c4:	d413      	bmi.n	80075ee <_printf_i+0x23a>
 80075c6:	68e0      	ldr	r0, [r4, #12]
 80075c8:	9b03      	ldr	r3, [sp, #12]
 80075ca:	4298      	cmp	r0, r3
 80075cc:	bfb8      	it	lt
 80075ce:	4618      	movlt	r0, r3
 80075d0:	e7a4      	b.n	800751c <_printf_i+0x168>
 80075d2:	2301      	movs	r3, #1
 80075d4:	4632      	mov	r2, r6
 80075d6:	4649      	mov	r1, r9
 80075d8:	4640      	mov	r0, r8
 80075da:	47d0      	blx	sl
 80075dc:	3001      	adds	r0, #1
 80075de:	d09b      	beq.n	8007518 <_printf_i+0x164>
 80075e0:	3501      	adds	r5, #1
 80075e2:	68e3      	ldr	r3, [r4, #12]
 80075e4:	9903      	ldr	r1, [sp, #12]
 80075e6:	1a5b      	subs	r3, r3, r1
 80075e8:	42ab      	cmp	r3, r5
 80075ea:	dcf2      	bgt.n	80075d2 <_printf_i+0x21e>
 80075ec:	e7eb      	b.n	80075c6 <_printf_i+0x212>
 80075ee:	2500      	movs	r5, #0
 80075f0:	f104 0619 	add.w	r6, r4, #25
 80075f4:	e7f5      	b.n	80075e2 <_printf_i+0x22e>
 80075f6:	bf00      	nop
 80075f8:	08008465 	.word	0x08008465
 80075fc:	08008476 	.word	0x08008476

08007600 <memmove>:
 8007600:	4288      	cmp	r0, r1
 8007602:	b510      	push	{r4, lr}
 8007604:	eb01 0402 	add.w	r4, r1, r2
 8007608:	d902      	bls.n	8007610 <memmove+0x10>
 800760a:	4284      	cmp	r4, r0
 800760c:	4623      	mov	r3, r4
 800760e:	d807      	bhi.n	8007620 <memmove+0x20>
 8007610:	1e43      	subs	r3, r0, #1
 8007612:	42a1      	cmp	r1, r4
 8007614:	d008      	beq.n	8007628 <memmove+0x28>
 8007616:	f811 2b01 	ldrb.w	r2, [r1], #1
 800761a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800761e:	e7f8      	b.n	8007612 <memmove+0x12>
 8007620:	4402      	add	r2, r0
 8007622:	4601      	mov	r1, r0
 8007624:	428a      	cmp	r2, r1
 8007626:	d100      	bne.n	800762a <memmove+0x2a>
 8007628:	bd10      	pop	{r4, pc}
 800762a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800762e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007632:	e7f7      	b.n	8007624 <memmove+0x24>

08007634 <_free_r>:
 8007634:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007636:	2900      	cmp	r1, #0
 8007638:	d044      	beq.n	80076c4 <_free_r+0x90>
 800763a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800763e:	9001      	str	r0, [sp, #4]
 8007640:	2b00      	cmp	r3, #0
 8007642:	f1a1 0404 	sub.w	r4, r1, #4
 8007646:	bfb8      	it	lt
 8007648:	18e4      	addlt	r4, r4, r3
 800764a:	f000 f913 	bl	8007874 <__malloc_lock>
 800764e:	4a1e      	ldr	r2, [pc, #120]	; (80076c8 <_free_r+0x94>)
 8007650:	9801      	ldr	r0, [sp, #4]
 8007652:	6813      	ldr	r3, [r2, #0]
 8007654:	b933      	cbnz	r3, 8007664 <_free_r+0x30>
 8007656:	6063      	str	r3, [r4, #4]
 8007658:	6014      	str	r4, [r2, #0]
 800765a:	b003      	add	sp, #12
 800765c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007660:	f000 b90e 	b.w	8007880 <__malloc_unlock>
 8007664:	42a3      	cmp	r3, r4
 8007666:	d908      	bls.n	800767a <_free_r+0x46>
 8007668:	6825      	ldr	r5, [r4, #0]
 800766a:	1961      	adds	r1, r4, r5
 800766c:	428b      	cmp	r3, r1
 800766e:	bf01      	itttt	eq
 8007670:	6819      	ldreq	r1, [r3, #0]
 8007672:	685b      	ldreq	r3, [r3, #4]
 8007674:	1949      	addeq	r1, r1, r5
 8007676:	6021      	streq	r1, [r4, #0]
 8007678:	e7ed      	b.n	8007656 <_free_r+0x22>
 800767a:	461a      	mov	r2, r3
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	b10b      	cbz	r3, 8007684 <_free_r+0x50>
 8007680:	42a3      	cmp	r3, r4
 8007682:	d9fa      	bls.n	800767a <_free_r+0x46>
 8007684:	6811      	ldr	r1, [r2, #0]
 8007686:	1855      	adds	r5, r2, r1
 8007688:	42a5      	cmp	r5, r4
 800768a:	d10b      	bne.n	80076a4 <_free_r+0x70>
 800768c:	6824      	ldr	r4, [r4, #0]
 800768e:	4421      	add	r1, r4
 8007690:	1854      	adds	r4, r2, r1
 8007692:	42a3      	cmp	r3, r4
 8007694:	6011      	str	r1, [r2, #0]
 8007696:	d1e0      	bne.n	800765a <_free_r+0x26>
 8007698:	681c      	ldr	r4, [r3, #0]
 800769a:	685b      	ldr	r3, [r3, #4]
 800769c:	6053      	str	r3, [r2, #4]
 800769e:	4421      	add	r1, r4
 80076a0:	6011      	str	r1, [r2, #0]
 80076a2:	e7da      	b.n	800765a <_free_r+0x26>
 80076a4:	d902      	bls.n	80076ac <_free_r+0x78>
 80076a6:	230c      	movs	r3, #12
 80076a8:	6003      	str	r3, [r0, #0]
 80076aa:	e7d6      	b.n	800765a <_free_r+0x26>
 80076ac:	6825      	ldr	r5, [r4, #0]
 80076ae:	1961      	adds	r1, r4, r5
 80076b0:	428b      	cmp	r3, r1
 80076b2:	bf04      	itt	eq
 80076b4:	6819      	ldreq	r1, [r3, #0]
 80076b6:	685b      	ldreq	r3, [r3, #4]
 80076b8:	6063      	str	r3, [r4, #4]
 80076ba:	bf04      	itt	eq
 80076bc:	1949      	addeq	r1, r1, r5
 80076be:	6021      	streq	r1, [r4, #0]
 80076c0:	6054      	str	r4, [r2, #4]
 80076c2:	e7ca      	b.n	800765a <_free_r+0x26>
 80076c4:	b003      	add	sp, #12
 80076c6:	bd30      	pop	{r4, r5, pc}
 80076c8:	20004ee0 	.word	0x20004ee0

080076cc <sbrk_aligned>:
 80076cc:	b570      	push	{r4, r5, r6, lr}
 80076ce:	4e0e      	ldr	r6, [pc, #56]	; (8007708 <sbrk_aligned+0x3c>)
 80076d0:	460c      	mov	r4, r1
 80076d2:	6831      	ldr	r1, [r6, #0]
 80076d4:	4605      	mov	r5, r0
 80076d6:	b911      	cbnz	r1, 80076de <sbrk_aligned+0x12>
 80076d8:	f000 f8bc 	bl	8007854 <_sbrk_r>
 80076dc:	6030      	str	r0, [r6, #0]
 80076de:	4621      	mov	r1, r4
 80076e0:	4628      	mov	r0, r5
 80076e2:	f000 f8b7 	bl	8007854 <_sbrk_r>
 80076e6:	1c43      	adds	r3, r0, #1
 80076e8:	d00a      	beq.n	8007700 <sbrk_aligned+0x34>
 80076ea:	1cc4      	adds	r4, r0, #3
 80076ec:	f024 0403 	bic.w	r4, r4, #3
 80076f0:	42a0      	cmp	r0, r4
 80076f2:	d007      	beq.n	8007704 <sbrk_aligned+0x38>
 80076f4:	1a21      	subs	r1, r4, r0
 80076f6:	4628      	mov	r0, r5
 80076f8:	f000 f8ac 	bl	8007854 <_sbrk_r>
 80076fc:	3001      	adds	r0, #1
 80076fe:	d101      	bne.n	8007704 <sbrk_aligned+0x38>
 8007700:	f04f 34ff 	mov.w	r4, #4294967295
 8007704:	4620      	mov	r0, r4
 8007706:	bd70      	pop	{r4, r5, r6, pc}
 8007708:	20004ee4 	.word	0x20004ee4

0800770c <_malloc_r>:
 800770c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007710:	1ccd      	adds	r5, r1, #3
 8007712:	f025 0503 	bic.w	r5, r5, #3
 8007716:	3508      	adds	r5, #8
 8007718:	2d0c      	cmp	r5, #12
 800771a:	bf38      	it	cc
 800771c:	250c      	movcc	r5, #12
 800771e:	2d00      	cmp	r5, #0
 8007720:	4607      	mov	r7, r0
 8007722:	db01      	blt.n	8007728 <_malloc_r+0x1c>
 8007724:	42a9      	cmp	r1, r5
 8007726:	d905      	bls.n	8007734 <_malloc_r+0x28>
 8007728:	230c      	movs	r3, #12
 800772a:	603b      	str	r3, [r7, #0]
 800772c:	2600      	movs	r6, #0
 800772e:	4630      	mov	r0, r6
 8007730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007734:	4e2e      	ldr	r6, [pc, #184]	; (80077f0 <_malloc_r+0xe4>)
 8007736:	f000 f89d 	bl	8007874 <__malloc_lock>
 800773a:	6833      	ldr	r3, [r6, #0]
 800773c:	461c      	mov	r4, r3
 800773e:	bb34      	cbnz	r4, 800778e <_malloc_r+0x82>
 8007740:	4629      	mov	r1, r5
 8007742:	4638      	mov	r0, r7
 8007744:	f7ff ffc2 	bl	80076cc <sbrk_aligned>
 8007748:	1c43      	adds	r3, r0, #1
 800774a:	4604      	mov	r4, r0
 800774c:	d14d      	bne.n	80077ea <_malloc_r+0xde>
 800774e:	6834      	ldr	r4, [r6, #0]
 8007750:	4626      	mov	r6, r4
 8007752:	2e00      	cmp	r6, #0
 8007754:	d140      	bne.n	80077d8 <_malloc_r+0xcc>
 8007756:	6823      	ldr	r3, [r4, #0]
 8007758:	4631      	mov	r1, r6
 800775a:	4638      	mov	r0, r7
 800775c:	eb04 0803 	add.w	r8, r4, r3
 8007760:	f000 f878 	bl	8007854 <_sbrk_r>
 8007764:	4580      	cmp	r8, r0
 8007766:	d13a      	bne.n	80077de <_malloc_r+0xd2>
 8007768:	6821      	ldr	r1, [r4, #0]
 800776a:	3503      	adds	r5, #3
 800776c:	1a6d      	subs	r5, r5, r1
 800776e:	f025 0503 	bic.w	r5, r5, #3
 8007772:	3508      	adds	r5, #8
 8007774:	2d0c      	cmp	r5, #12
 8007776:	bf38      	it	cc
 8007778:	250c      	movcc	r5, #12
 800777a:	4629      	mov	r1, r5
 800777c:	4638      	mov	r0, r7
 800777e:	f7ff ffa5 	bl	80076cc <sbrk_aligned>
 8007782:	3001      	adds	r0, #1
 8007784:	d02b      	beq.n	80077de <_malloc_r+0xd2>
 8007786:	6823      	ldr	r3, [r4, #0]
 8007788:	442b      	add	r3, r5
 800778a:	6023      	str	r3, [r4, #0]
 800778c:	e00e      	b.n	80077ac <_malloc_r+0xa0>
 800778e:	6822      	ldr	r2, [r4, #0]
 8007790:	1b52      	subs	r2, r2, r5
 8007792:	d41e      	bmi.n	80077d2 <_malloc_r+0xc6>
 8007794:	2a0b      	cmp	r2, #11
 8007796:	d916      	bls.n	80077c6 <_malloc_r+0xba>
 8007798:	1961      	adds	r1, r4, r5
 800779a:	42a3      	cmp	r3, r4
 800779c:	6025      	str	r5, [r4, #0]
 800779e:	bf18      	it	ne
 80077a0:	6059      	strne	r1, [r3, #4]
 80077a2:	6863      	ldr	r3, [r4, #4]
 80077a4:	bf08      	it	eq
 80077a6:	6031      	streq	r1, [r6, #0]
 80077a8:	5162      	str	r2, [r4, r5]
 80077aa:	604b      	str	r3, [r1, #4]
 80077ac:	4638      	mov	r0, r7
 80077ae:	f104 060b 	add.w	r6, r4, #11
 80077b2:	f000 f865 	bl	8007880 <__malloc_unlock>
 80077b6:	f026 0607 	bic.w	r6, r6, #7
 80077ba:	1d23      	adds	r3, r4, #4
 80077bc:	1af2      	subs	r2, r6, r3
 80077be:	d0b6      	beq.n	800772e <_malloc_r+0x22>
 80077c0:	1b9b      	subs	r3, r3, r6
 80077c2:	50a3      	str	r3, [r4, r2]
 80077c4:	e7b3      	b.n	800772e <_malloc_r+0x22>
 80077c6:	6862      	ldr	r2, [r4, #4]
 80077c8:	42a3      	cmp	r3, r4
 80077ca:	bf0c      	ite	eq
 80077cc:	6032      	streq	r2, [r6, #0]
 80077ce:	605a      	strne	r2, [r3, #4]
 80077d0:	e7ec      	b.n	80077ac <_malloc_r+0xa0>
 80077d2:	4623      	mov	r3, r4
 80077d4:	6864      	ldr	r4, [r4, #4]
 80077d6:	e7b2      	b.n	800773e <_malloc_r+0x32>
 80077d8:	4634      	mov	r4, r6
 80077da:	6876      	ldr	r6, [r6, #4]
 80077dc:	e7b9      	b.n	8007752 <_malloc_r+0x46>
 80077de:	230c      	movs	r3, #12
 80077e0:	603b      	str	r3, [r7, #0]
 80077e2:	4638      	mov	r0, r7
 80077e4:	f000 f84c 	bl	8007880 <__malloc_unlock>
 80077e8:	e7a1      	b.n	800772e <_malloc_r+0x22>
 80077ea:	6025      	str	r5, [r4, #0]
 80077ec:	e7de      	b.n	80077ac <_malloc_r+0xa0>
 80077ee:	bf00      	nop
 80077f0:	20004ee0 	.word	0x20004ee0

080077f4 <_realloc_r>:
 80077f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077f8:	4680      	mov	r8, r0
 80077fa:	4614      	mov	r4, r2
 80077fc:	460e      	mov	r6, r1
 80077fe:	b921      	cbnz	r1, 800780a <_realloc_r+0x16>
 8007800:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007804:	4611      	mov	r1, r2
 8007806:	f7ff bf81 	b.w	800770c <_malloc_r>
 800780a:	b92a      	cbnz	r2, 8007818 <_realloc_r+0x24>
 800780c:	f7ff ff12 	bl	8007634 <_free_r>
 8007810:	4625      	mov	r5, r4
 8007812:	4628      	mov	r0, r5
 8007814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007818:	f000 f838 	bl	800788c <_malloc_usable_size_r>
 800781c:	4284      	cmp	r4, r0
 800781e:	4607      	mov	r7, r0
 8007820:	d802      	bhi.n	8007828 <_realloc_r+0x34>
 8007822:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007826:	d812      	bhi.n	800784e <_realloc_r+0x5a>
 8007828:	4621      	mov	r1, r4
 800782a:	4640      	mov	r0, r8
 800782c:	f7ff ff6e 	bl	800770c <_malloc_r>
 8007830:	4605      	mov	r5, r0
 8007832:	2800      	cmp	r0, #0
 8007834:	d0ed      	beq.n	8007812 <_realloc_r+0x1e>
 8007836:	42bc      	cmp	r4, r7
 8007838:	4622      	mov	r2, r4
 800783a:	4631      	mov	r1, r6
 800783c:	bf28      	it	cs
 800783e:	463a      	movcs	r2, r7
 8007840:	f7ff fbb8 	bl	8006fb4 <memcpy>
 8007844:	4631      	mov	r1, r6
 8007846:	4640      	mov	r0, r8
 8007848:	f7ff fef4 	bl	8007634 <_free_r>
 800784c:	e7e1      	b.n	8007812 <_realloc_r+0x1e>
 800784e:	4635      	mov	r5, r6
 8007850:	e7df      	b.n	8007812 <_realloc_r+0x1e>
	...

08007854 <_sbrk_r>:
 8007854:	b538      	push	{r3, r4, r5, lr}
 8007856:	4d06      	ldr	r5, [pc, #24]	; (8007870 <_sbrk_r+0x1c>)
 8007858:	2300      	movs	r3, #0
 800785a:	4604      	mov	r4, r0
 800785c:	4608      	mov	r0, r1
 800785e:	602b      	str	r3, [r5, #0]
 8007860:	f7f9 fb40 	bl	8000ee4 <_sbrk>
 8007864:	1c43      	adds	r3, r0, #1
 8007866:	d102      	bne.n	800786e <_sbrk_r+0x1a>
 8007868:	682b      	ldr	r3, [r5, #0]
 800786a:	b103      	cbz	r3, 800786e <_sbrk_r+0x1a>
 800786c:	6023      	str	r3, [r4, #0]
 800786e:	bd38      	pop	{r3, r4, r5, pc}
 8007870:	20004ee8 	.word	0x20004ee8

08007874 <__malloc_lock>:
 8007874:	4801      	ldr	r0, [pc, #4]	; (800787c <__malloc_lock+0x8>)
 8007876:	f000 b811 	b.w	800789c <__retarget_lock_acquire_recursive>
 800787a:	bf00      	nop
 800787c:	20004eec 	.word	0x20004eec

08007880 <__malloc_unlock>:
 8007880:	4801      	ldr	r0, [pc, #4]	; (8007888 <__malloc_unlock+0x8>)
 8007882:	f000 b80c 	b.w	800789e <__retarget_lock_release_recursive>
 8007886:	bf00      	nop
 8007888:	20004eec 	.word	0x20004eec

0800788c <_malloc_usable_size_r>:
 800788c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007890:	1f18      	subs	r0, r3, #4
 8007892:	2b00      	cmp	r3, #0
 8007894:	bfbc      	itt	lt
 8007896:	580b      	ldrlt	r3, [r1, r0]
 8007898:	18c0      	addlt	r0, r0, r3
 800789a:	4770      	bx	lr

0800789c <__retarget_lock_acquire_recursive>:
 800789c:	4770      	bx	lr

0800789e <__retarget_lock_release_recursive>:
 800789e:	4770      	bx	lr

080078a0 <_init>:
 80078a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078a2:	bf00      	nop
 80078a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078a6:	bc08      	pop	{r3}
 80078a8:	469e      	mov	lr, r3
 80078aa:	4770      	bx	lr

080078ac <_fini>:
 80078ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ae:	bf00      	nop
 80078b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078b2:	bc08      	pop	{r3}
 80078b4:	469e      	mov	lr, r3
 80078b6:	4770      	bx	lr
